
MOUSE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08015388  08015388  00025388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b98  08015b98  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  08015b98  08015b98  00025b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ba0  08015ba0  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ba0  08015ba0  00025ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ba4  08015ba4  00025ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08015ba8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000551c  20000370  08015f18  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000588c  08015f18  0003588c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032ce9  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068d9  00000000  00000000  00063089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002158  00000000  00000000  00069968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ed8  00000000  00000000  0006bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de41  00000000  00000000  0006d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b019  00000000  00000000  0009b7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fae74  00000000  00000000  000c67f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c1666  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3a0  00000000  00000000  001c16bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001cba5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001cba98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000370 	.word	0x20000370
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015370 	.word	0x08015370

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000374 	.word	0x20000374
 80001ec:	08015370 	.word	0x08015370

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MPU6050_GYRO_CALIBRATION_FUN>:
/* brief : this function used to Calibrate the MPU gyro this function PRIVATEM used only by this file
 * param : flag  used to mark that the calibration is performed succefully
 * return : void
 */
PRIVATRE void MPU6050_GYRO_CALIBRATION_FUN(_Bool * flag)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af04      	add	r7, sp, #16
 8001012:	6078      	str	r0, [r7, #4]
	int32_t READED_DATA[3]={0};
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
	uint8_t data[6] = { 0 };
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	2300      	movs	r3, #0
 8001026:	81bb      	strh	r3, [r7, #12]
	for(int i=0;i<200;i++)
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	e03f      	b.n	80010ae <MPU6050_GYRO_CALIBRATION_FUN+0xa2>
	{
		HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_GYRO_XOUT_H_R, 1,
 800102e:	2314      	movs	r3, #20
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2306      	movs	r3, #6
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2243      	movs	r2, #67	; 0x43
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	482d      	ldr	r0, [pc, #180]	; (80010f8 <MPU6050_GYRO_CALIBRATION_FUN+0xec>)
 8001044:	f002 ffae 	bl	8003fa4 <HAL_I2C_Mem_Read>
				data, 6,20);
		MPU_REGS_DATA_STATIC.XG_Value = (uint16_t) (data[0] << 8
 8001048:	7a3b      	ldrb	r3, [r7, #8]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
				| data[1]);
 800104e:	7a7b      	ldrb	r3, [r7, #9]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
		MPU_REGS_DATA_STATIC.XG_Value = (uint16_t) (data[0] << 8
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MPU6050_GYRO_CALIBRATION_FUN+0xf0>)
 8001058:	80da      	strh	r2, [r3, #6]
		MPU_REGS_DATA_STATIC.YG_Value  = (uint16_t) (data[2] << 8
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
				| data[3]);
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
		MPU_REGS_DATA_STATIC.YG_Value  = (uint16_t) (data[2] << 8
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MPU6050_GYRO_CALIBRATION_FUN+0xf0>)
 800106a:	811a      	strh	r2, [r3, #8]
		MPU_REGS_DATA_STATIC.ZG_Value  = (uint16_t) (data[4] << 8
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
				| data[5]);
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
		MPU_REGS_DATA_STATIC.ZG_Value  = (uint16_t) (data[4] << 8
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MPU6050_GYRO_CALIBRATION_FUN+0xf0>)
 800107c:	815a      	strh	r2, [r3, #10]

	READED_DATA[0] += MPU_REGS_DATA_STATIC.XG_Value ;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <MPU6050_GYRO_CALIBRATION_FUN+0xf0>)
 8001082:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001086:	4413      	add	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
	READED_DATA[1] += MPU_REGS_DATA_STATIC.YG_Value ;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <MPU6050_GYRO_CALIBRATION_FUN+0xf0>)
 800108e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001092:	4413      	add	r3, r2
 8001094:	617b      	str	r3, [r7, #20]
	READED_DATA[2] += MPU_REGS_DATA_STATIC.ZG_Value ;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4a18      	ldr	r2, [pc, #96]	; (80010fc <MPU6050_GYRO_CALIBRATION_FUN+0xf0>)
 800109a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800109e:	4413      	add	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
	HAL_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f001 fae4 	bl	8002670 <HAL_Delay>
	for(int i=0;i<200;i++)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	3301      	adds	r3, #1
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	2bc7      	cmp	r3, #199	; 0xc7
 80010b2:	ddbc      	ble.n	800102e <MPU6050_GYRO_CALIBRATION_FUN+0x22>
	}
	// now we can calculate the offset
	GYRO_OFFSET_X = READED_DATA[0]/200 ;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 80010b8:	fb82 1203 	smull	r1, r2, r2, r3
 80010bc:	1192      	asrs	r2, r2, #6
 80010be:	17db      	asrs	r3, r3, #31
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <MPU6050_GYRO_CALIBRATION_FUN+0xf8>)
 80010c4:	6013      	str	r3, [r2, #0]
	GYRO_OFFSET_Y = READED_DATA[1]/200 ;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 80010ca:	fb82 1203 	smull	r1, r2, r2, r3
 80010ce:	1192      	asrs	r2, r2, #6
 80010d0:	17db      	asrs	r3, r3, #31
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <MPU6050_GYRO_CALIBRATION_FUN+0xfc>)
 80010d6:	6013      	str	r3, [r2, #0]
	GYRO_OFFSET_Z = READED_DATA[2]/200 ;
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <MPU6050_GYRO_CALIBRATION_FUN+0xf4>)
 80010dc:	fb82 1203 	smull	r1, r2, r2, r3
 80010e0:	1192      	asrs	r2, r2, #6
 80010e2:	17db      	asrs	r3, r3, #31
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <MPU6050_GYRO_CALIBRATION_FUN+0x100>)
 80010e8:	6013      	str	r3, [r2, #0]


	// set the flag to true to indicate that the sensor is calibrated
	*flag = true ;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20004da0 	.word	0x20004da0
 80010fc:	200003a8 	.word	0x200003a8
 8001100:	51eb851f 	.word	0x51eb851f
 8001104:	2000038c 	.word	0x2000038c
 8001108:	20000390 	.word	0x20000390
 800110c:	20000394 	.word	0x20000394

08001110 <MPU6050_ALL_GYRO_ANGELS>:

/* brief : this function used to get the GYRO angles
 * param : ANGELS_VAR_STRUCT is a data structure that in general hold all MPU Angles
 * return : void
*/
void MPU6050_ALL_GYRO_ANGELS(MPU6050_ANGELS_t *ANGELS_VAR_STRUCT) {
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]


/* first before initialize gyro we need to read the accel data to make it as start value of gyro */
	if(IsGYROInitialized == false)
 800111a:	4b56      	ldr	r3, [pc, #344]	; (8001274 <MPU6050_ALL_GYRO_ANGELS+0x164>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f083 0301 	eor.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <MPU6050_ALL_GYRO_ANGELS+0x28>
	{
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH = ANGELS_VAR_STRUCT->ACCEL_ANGLE_PITCH ;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	601a      	str	r2, [r3, #0]
	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL  = ANGELS_VAR_STRUCT->ACCEL_ANGLE_ROLL  ;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	605a      	str	r2, [r3, #4]
	}

/* now  we read gyro data */
	MPU6050_ALL_GYRO_Read(&MPU_REGS_DATA_STATIC);
 8001138:	484f      	ldr	r0, [pc, #316]	; (8001278 <MPU6050_ALL_GYRO_ANGELS+0x168>)
 800113a:	f000 f94b 	bl	80013d4 <MPU6050_ALL_GYRO_Read>

	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += (float) MPU_REGS_DATA_STATIC.XG_Value
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	ed93 7a00 	vldr	s14, [r3]
 8001144:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <MPU6050_ALL_GYRO_ANGELS+0x168>)
 8001146:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			* (1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))));
 8001152:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800127c <MPU6050_ALL_GYRO_ANGELS+0x16c>
 8001156:	ee67 7aa6 	vmul.f32	s15, s15, s13
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += (float) MPU_REGS_DATA_STATIC.XG_Value
 800115a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edc3 7a00 	vstr	s15, [r3]

	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL += (float) MPU_REGS_DATA_STATIC.YG_Value
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	ed93 7a01 	vldr	s14, [r3, #4]
 800116a:	4b43      	ldr	r3, [pc, #268]	; (8001278 <MPU6050_ALL_GYRO_ANGELS+0x168>)
 800116c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			* (1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))));
 8001178:	eddf 6a40 	vldr	s13, [pc, #256]	; 800127c <MPU6050_ALL_GYRO_ANGELS+0x16c>
 800117c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL += (float) MPU_REGS_DATA_STATIC.YG_Value
 8001180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edc3 7a01 	vstr	s15, [r3, #4]


	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL  -= ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9ea 	bl	8000568 <__aeabi_f2d>
 8001194:	4604      	mov	r4, r0
 8001196:	460d      	mov	r5, r1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e3 	bl	8000568 <__aeabi_f2d>
 80011a2:	4680      	mov	r8, r0
 80011a4:	4689      	mov	r9, r1
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <MPU6050_ALL_GYRO_ANGELS+0x168>)
 80011a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* ((1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))))
 80011b4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001280 <MPU6050_ALL_GYRO_ANGELS+0x170>
 80011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9d2 	bl	8000568 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ec43 2b10 	vmov	d0, r2, r3
 80011cc:	f012 fd50 	bl	8013c70 <sin>
 80011d0:	ec53 2b10 	vmov	r2, r3, d0
 80011d4:	4640      	mov	r0, r8
 80011d6:	4649      	mov	r1, r9
 80011d8:	f7ff fa1e 	bl	8000618 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
	ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL  -= ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff f860 	bl	80002a8 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd0a 	bl	8000c08 <__aeabi_d2f>
 80011f4:	4602      	mov	r2, r0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
									* DegreeToRadian));
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9b2 	bl	8000568 <__aeabi_f2d>
 8001204:	4604      	mov	r4, r0
 8001206:	460d      	mov	r5, r1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9ab 	bl	8000568 <__aeabi_f2d>
 8001212:	4680      	mov	r8, r0
 8001214:	4689      	mov	r9, r1
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MPU6050_ALL_GYRO_ANGELS+0x168>)
 8001218:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							* ((1/(MPU_SCALL * ((1000 / MPU_REFRUSH_READING_RATE))))
 8001224:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001280 <MPU6050_ALL_GYRO_ANGELS+0x170>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
			* sin((float) MPU_REGS_DATA_STATIC.ZG_Value
 800122c:	ee17 0a90 	vmov	r0, s15
 8001230:	f7ff f99a 	bl	8000568 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	ec43 2b10 	vmov	d0, r2, r3
 800123c:	f012 fd18 	bl	8013c70 <sin>
 8001240:	ec53 2b10 	vmov	r2, r3, d0
 8001244:	4640      	mov	r0, r8
 8001246:	4649      	mov	r1, r9
 8001248:	f7ff f9e6 	bl	8000618 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
	ANGELS_VAR_STRUCT->GYRO_ANGLE_PITCH += ANGELS_VAR_STRUCT->GYRO_ANGLE_ROLL
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7ff f82a 	bl	80002ac <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fcd2 	bl	8000c08 <__aeabi_d2f>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
									* DegreeToRadian));


}/* END_FUN MPU6050_ALL_GYRO_ANGELS() */
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001274:	200003a5 	.word	0x200003a5
 8001278:	200003a8 	.word	0x200003a8
 800127c:	38404c3e 	.word	0x38404c3e
 8001280:	35562492 	.word	0x35562492
 8001284:	00000000 	.word	0x00000000

08001288 <MPU6050_ALL_ACCEL_ANGELS>:

/* brief : this function used to get the accel angles
 * param : ANGELS_VAR_STRUCT is a data structure that in general hold all MPU Angles
 * return : void
*/
void MPU6050_ALL_ACCEL_ANGELS(MPU6050_ANGELS_t *ANGELS_VAR_STRUCT) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	float accel_x,accel_y,accel_z,accel_total=0;
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
	MPU6050_ALL_ACCEL_Read(&MPU_REGS_DATA_STATIC);
 8001296:	484c      	ldr	r0, [pc, #304]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 8001298:	f000 f8fa 	bl	8001490 <MPU6050_ALL_ACCEL_Read>


accel_x = ((float)MPU_REGS_DATA_STATIC.XA_Value)/ MPU6050_ACCEL_SCALL;
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 800129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80013cc <MPU6050_ALL_ACCEL_ANGELS+0x144>
 80012ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b2:	edc7 7a04 	vstr	s15, [r7, #16]
accel_y = ((float)MPU_REGS_DATA_STATIC.YA_Value)/ MPU6050_ACCEL_SCALL;
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 80012b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	eddf 6a41 	vldr	s13, [pc, #260]	; 80013cc <MPU6050_ALL_ACCEL_ANGELS+0x144>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	edc7 7a03 	vstr	s15, [r7, #12]
accel_z = (((float)MPU_REGS_DATA_STATIC.ZA_Value)/ MPU6050_ACCEL_SCALL);
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <MPU6050_ALL_ACCEL_ANGELS+0x140>)
 80012d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012de:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80013cc <MPU6050_ALL_ACCEL_ANGELS+0x144>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	edc7 7a02 	vstr	s15, [r7, #8]
accel_total = sqrt((accel_x*accel_x)+(accel_y*accel_y)+(accel_z*accel_z));
 80012ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001302:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	ee17 0a90 	vmov	r0, s15
 800130e:	f7ff f92b 	bl	8000568 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	ec43 2b10 	vmov	d0, r2, r3
 800131a:	f012 fd37 	bl	8013d8c <sqrt>
 800131e:	ec53 2b10 	vmov	r2, r3, d0
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc6f 	bl	8000c08 <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
 800132c:	617b      	str	r3, [r7, #20]
ANGELS_VAR_STRUCT->ACCEL_ANGLE_PITCH = asin(accel_y/accel_total)*57.296;
 800132e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001332:	edd7 7a05 	vldr	s15, [r7, #20]
 8001336:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800133a:	ee16 0a90 	vmov	r0, s13
 800133e:	f7ff f913 	bl	8000568 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	ec43 2b10 	vmov	d0, r2, r3
 800134a:	f012 fce5 	bl	8013d18 <asin>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	a31b      	add	r3, pc, #108	; (adr r3, 80013c0 <MPU6050_ALL_ACCEL_ANGELS+0x138>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f95e 	bl	8000618 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc50 	bl	8000c08 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60da      	str	r2, [r3, #12]
ANGELS_VAR_STRUCT->ACCEL_ANGLE_ROLL = asin(accel_x/accel_total)*57.296;
 800136e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001372:	edd7 7a05 	vldr	s15, [r7, #20]
 8001376:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800137a:	ee16 0a90 	vmov	r0, s13
 800137e:	f7ff f8f3 	bl	8000568 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	ec43 2b10 	vmov	d0, r2, r3
 800138a:	f012 fcc5 	bl	8013d18 <asin>
 800138e:	ec51 0b10 	vmov	r0, r1, d0
 8001392:	a30b      	add	r3, pc, #44	; (adr r3, 80013c0 <MPU6050_ALL_ACCEL_ANGELS+0x138>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f93e 	bl	8000618 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fc30 	bl	8000c08 <__aeabi_d2f>
 80013a8:	4602      	mov	r2, r0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]
IsGYROInitialized = true ;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MPU6050_ALL_ACCEL_ANGELS+0x148>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]


}/* END_FUN MPU6050_ALL_ACCEL_ANGELS() */
 80013b4:	bf00      	nop
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	53f7ced9 	.word	0x53f7ced9
 80013c4:	404ca5e3 	.word	0x404ca5e3
 80013c8:	200003a8 	.word	0x200003a8
 80013cc:	46800200 	.word	0x46800200
 80013d0:	200003a5 	.word	0x200003a5

080013d4 <MPU6050_ALL_GYRO_Read>:

/* brief : this function used to read the MPU GYRO register
 * param : ALL_Axis_Var is a data structure that in general hold all MPU readed data register
 * return : void
*/
void MPU6050_ALL_GYRO_Read(MPU6050_DATA_t *ALL_Axis_Var) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]


	if (GYRO_CALIBRATED == false) {
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <MPU6050_ALL_GYRO_Read+0xa8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <MPU6050_ALL_GYRO_Read+0x1c>
		MPU6050_GYRO_CALIBRATION_FUN(&GYRO_CALIBRATED);
 80013ea:	4824      	ldr	r0, [pc, #144]	; (800147c <MPU6050_ALL_GYRO_Read+0xa8>)
 80013ec:	f7ff fe0e 	bl	800100c <MPU6050_GYRO_CALIBRATION_FUN>
	}
	uint8_t data[6] = { 0 };
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	2300      	movs	r3, #0
 80013f6:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_GYRO_XOUT_H_R, 1,
 80013f8:	2314      	movs	r3, #20
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2306      	movs	r3, #6
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	2243      	movs	r2, #67	; 0x43
 800140a:	21d0      	movs	r1, #208	; 0xd0
 800140c:	481c      	ldr	r0, [pc, #112]	; (8001480 <MPU6050_ALL_GYRO_Read+0xac>)
 800140e:	f002 fdc9 	bl	8003fa4 <HAL_I2C_Mem_Read>
			data, 6, 20);
	ALL_Axis_Var->XG_Value = (uint16_t)((data[0] << 8 | data[1]) - GYRO_OFFSET_X);
 8001412:	7a3b      	ldrb	r3, [r7, #8]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	7a7b      	ldrb	r3, [r7, #9]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MPU6050_ALL_GYRO_Read+0xb0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	80da      	strh	r2, [r3, #6]
	ALL_Axis_Var->YG_Value = (uint16_t)((data[2] << 8 | data[3]) - GYRO_OFFSET_Y);
 8001432:	7abb      	ldrb	r3, [r7, #10]
 8001434:	021b      	lsls	r3, r3, #8
 8001436:	b21a      	sxth	r2, r3
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	b21b      	sxth	r3, r3
 800143c:	4313      	orrs	r3, r2
 800143e:	b21b      	sxth	r3, r3
 8001440:	b29a      	uxth	r2, r3
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MPU6050_ALL_GYRO_Read+0xb4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	b29b      	uxth	r3, r3
 800144c:	b21a      	sxth	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	811a      	strh	r2, [r3, #8]
	ALL_Axis_Var->ZG_Value = (uint16_t)((data[4] << 8 | data[5]) - GYRO_OFFSET_Z);
 8001452:	7b3b      	ldrb	r3, [r7, #12]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	b21a      	sxth	r2, r3
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	b21b      	sxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b21b      	sxth	r3, r3
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MPU6050_ALL_GYRO_Read+0xb8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	b21a      	sxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	815a      	strh	r2, [r3, #10]




}/* END_FUN MPU6050_ALL_GYRO_Read() */
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003a4 	.word	0x200003a4
 8001480:	20004da0 	.word	0x20004da0
 8001484:	2000038c 	.word	0x2000038c
 8001488:	20000390 	.word	0x20000390
 800148c:	20000394 	.word	0x20000394

08001490 <MPU6050_ALL_ACCEL_Read>:

/* brief : this function used to read the MPU accel register
 * param : ALL_Axis_Var is a data structure that in general hold all MPU readed data register
 * return : void
*/
void MPU6050_ALL_ACCEL_Read(MPU6050_DATA_t *ALL_Axis_Var) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af04      	add	r7, sp, #16
 8001496:	6078      	str	r0, [r7, #4]


	uint8_t data[6] = { 0 };
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	2300      	movs	r3, #0
 800149e:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_ACCEL_XOUT_H_R, 1,
 80014a0:	2314      	movs	r3, #20
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2306      	movs	r3, #6
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	223b      	movs	r2, #59	; 0x3b
 80014b2:	21d0      	movs	r1, #208	; 0xd0
 80014b4:	481b      	ldr	r0, [pc, #108]	; (8001524 <MPU6050_ALL_ACCEL_Read+0x94>)
 80014b6:	f002 fd75 	bl	8003fa4 <HAL_I2C_Mem_Read>
			data, 6, 20);
	ALL_Axis_Var->XA_Value = (uint16_t)(((data[0] << 8)  | data[1])-ACCEL_OFFSET_X);
 80014ba:	7a3b      	ldrb	r3, [r7, #8]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7a7b      	ldrb	r3, [r7, #9]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MPU6050_ALL_ACCEL_Read+0x98>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	801a      	strh	r2, [r3, #0]
	ALL_Axis_Var->YA_Value = (uint16_t) (((data[2] << 8) | data[3])-ACCEL_OFFSET_Y);
 80014da:	7abb      	ldrb	r3, [r7, #10]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <MPU6050_ALL_ACCEL_Read+0x9c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	805a      	strh	r2, [r3, #2]
	ALL_Axis_Var->ZA_Value = (uint16_t) (((data[4] << 8) | data[5])-ACCEL_OFFSET_Z);
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	7b7b      	ldrb	r3, [r7, #13]
 8001502:	b21b      	sxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b21b      	sxth	r3, r3
 8001508:	b29a      	uxth	r2, r3
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MPU6050_ALL_ACCEL_Read+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	809a      	strh	r2, [r3, #4]



}/* END_FUN MPU6050_ALL_ACCEL_Read() */
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20004da0 	.word	0x20004da0
 8001528:	20000398 	.word	0x20000398
 800152c:	2000039c 	.word	0x2000039c
 8001530:	200003a0 	.word	0x200003a0

08001534 <MPU6050_SET_Config>:
 *  return MPU6050_OK if this function successfully set registers
 *  you can add and remove any registers that you need to config
 *  the configuration will be in form of 2D array first byte hold the address register and the second byte hold
 *  the value that you need to assign to that register
 ****************************************************************************************/
void MPU6050_SET_Config(uint8_t *Config_arr, uint8_t array_size) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < (array_size / 2); i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e019      	b.n	800157a <MPU6050_SET_Config+0x46>
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_DEVICE_ADDR, *(Config_arr + (i * 2)), 1,
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	461a      	mov	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b299      	uxth	r1, r3
				(Config_arr + (i * 2) + 1), 1, 20);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	3301      	adds	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_DEVICE_ADDR, *(Config_arr + (i * 2)), 1,
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	2214      	movs	r2, #20
 8001560:	9202      	str	r2, [sp, #8]
 8001562:	2201      	movs	r2, #1
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	460a      	mov	r2, r1
 800156c:	21d0      	movs	r1, #208	; 0xd0
 800156e:	4808      	ldr	r0, [pc, #32]	; (8001590 <MPU6050_SET_Config+0x5c>)
 8001570:	f002 fc1e 	bl	8003db0 <HAL_I2C_Mem_Write>
	for (uint8_t i = 0; i < (array_size / 2); i++) {
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	3301      	adds	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3df      	bcc.n	8001546 <MPU6050_SET_Config+0x12>
	}

}/* END_FUN MPU6050_SET_Config() */
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20004da0 	.word	0x20004da0

08001594 <MPU6050_Read_temp_reg>:

/* brief : this function used to read the MPU temp register this function PRIVATEM used only by this file
 * param : ALL_Axis_Var is a data structure that in general hold all MPU readed data register
 * return : void
 */
 static void MPU6050_Read_temp_reg(MPU6050_DATA_t *ALL_Axis_Var) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af04      	add	r7, sp, #16
 800159a:	6078      	str	r0, [r7, #4]

	 int data[2] = {0} ;
 800159c:	f107 0308 	add.w	r3, r7, #8
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_DEVICE_ADDR, MPU6050_TEMP_OUT_H_R, 1,
 80015a6:	2314      	movs	r3, #20
 80015a8:	9302      	str	r3, [sp, #8]
 80015aa:	2302      	movs	r3, #2
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	2241      	movs	r2, #65	; 0x41
 80015b8:	21d0      	movs	r1, #208	; 0xd0
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <MPU6050_Read_temp_reg+0x48>)
 80015bc:	f002 fcf2 	bl	8003fa4 <HAL_I2C_Mem_Read>
			data , 2, 20);
	ALL_Axis_Var->TEMP_READED = (uint16_t)(((data[0] << 8)  | data[1]));
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	819a      	strh	r2, [r3, #12]

 }/* END_FUN MPU6050_Read_temp_reg() */
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20004da0 	.word	0x20004da0

080015e0 <MPU6050_Read_Temp_In_C>:
/* brief : this function used to get the temp value in C degree
 * param : ANGLES_VAR_STRUCT this data structure type in general used to hold the all required data that needed from MPU
 * return : void
 */
void MPU6050_Read_Temp_In_C(MPU6050_ANGELS_t *ANGLES_VAR_STRUCT)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	MPU6050_Read_temp_reg(&MPU_REGS_DATA_STATIC);
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MPU6050_Read_Temp_In_C+0x58>)
 80015ea:	f7ff ffd3 	bl	8001594 <MPU6050_Read_temp_reg>
	ANGLES_VAR_STRUCT->TEMP_IN_CEL = (MPU_REGS_DATA_STATIC.TEMP_READED)/340 + 36.53;
 80015ee:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MPU6050_Read_Temp_In_C+0x58>)
 80015f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015f4:	4a11      	ldr	r2, [pc, #68]	; (800163c <MPU6050_Read_Temp_In_C+0x5c>)
 80015f6:	fb82 1203 	smull	r1, r2, r2, r3
 80015fa:	11d2      	asrs	r2, r2, #7
 80015fc:	17db      	asrs	r3, r3, #31
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b21b      	sxth	r3, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff9e 	bl	8000544 <__aeabi_i2d>
 8001608:	a309      	add	r3, pc, #36	; (adr r3, 8001630 <MPU6050_Read_Temp_In_C+0x50>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fe4d 	bl	80002ac <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff faf5 	bl	8000c08 <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]

}/* END_FUN MPU6050_Read_Temp_In_C() */
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	f3af 8000 	nop.w
 8001630:	0a3d70a4 	.word	0x0a3d70a4
 8001634:	404243d7 	.word	0x404243d7
 8001638:	200003a8 	.word	0x200003a8
 800163c:	60606061 	.word	0x60606061

08001640 <Read_Accurate_Angles_ComplemantrayFilter>:
 * here also if you need to change the complemantary filter gain you caan do it in the MPU_config file
 * param : ANGELS_STRUCT_VAR return  all angles and temp
 * return : void
 */
void Read_Accurate_Angles_ComplemantrayFilter(MPU6050_ANGELS_t *ANGELS_STRUCT_VAR)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

	MPU6050_ALL_GYRO_ANGELS(ANGELS_STRUCT_VAR);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fd61 	bl	8001110 <MPU6050_ALL_GYRO_ANGELS>
	MPU6050_ALL_ACCEL_ANGELS(ANGELS_STRUCT_VAR);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe1a 	bl	8001288 <MPU6050_ALL_ACCEL_ANGELS>
	MPU6050_Read_Temp_In_C(ANGELS_STRUCT_VAR);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ffc3 	bl	80015e0 <MPU6050_Read_Temp_In_C>
	// now we have accel & gyro angles so we will apply filter to our measurements angle to get a very stable angle without offset
	ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL = ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL * ComplemantaryFilterGain1 \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001660:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80016b0 <Read_Accurate_Angles_ComplemantrayFilter+0x70>
 8001664:	ee27 7a87 	vmul.f32	s14, s15, s14
			+ ANGELS_STRUCT_VAR->ACCEL_ANGLE_ROLL * ComplemantaryFilterGain2;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a04 	vldr	s15, [r3, #16]
 800166e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80016b4 <Read_Accurate_Angles_ComplemantrayFilter+0x74>
 8001672:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
	ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL = ANGELS_STRUCT_VAR->GYRO_ANGLE_ROLL * ComplemantaryFilterGain1 \
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edc3 7a01 	vstr	s15, [r3, #4]
	ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH = ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH * ComplemantaryFilterGain1 \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80016b0 <Read_Accurate_Angles_ComplemantrayFilter+0x70>
 800168a:	ee27 7a87 	vmul.f32	s14, s15, s14
			+ ANGELS_STRUCT_VAR->ACCEL_ANGLE_PITCH *ComplemantaryFilterGain2;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a03 	vldr	s15, [r3, #12]
 8001694:	eddf 6a07 	vldr	s13, [pc, #28]	; 80016b4 <Read_Accurate_Angles_ComplemantrayFilter+0x74>
 8001698:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
	ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH = ANGELS_STRUCT_VAR->GYRO_ANGLE_PITCH * ComplemantaryFilterGain1 \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edc3 7a00 	vstr	s15, [r3]




}/* END_FUN Read_Accurate_Angles_ComplemantrayFilter() */
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	3f75c28f 	.word	0x3f75c28f
 80016b4:	3d23d70a 	.word	0x3d23d70a

080016b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <MX_ADC1_Init+0xa0>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_ADC1_Init+0x9c>)
 80016fc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_ADC1_Init+0x9c>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_ADC1_Init+0x9c>)
 800170a:	2201      	movs	r2, #1
 800170c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_ADC1_Init+0x9c>)
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_ADC1_Init+0x9c>)
 8001718:	2201      	movs	r2, #1
 800171a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <MX_ADC1_Init+0x9c>)
 800171e:	f000 ffcb 	bl	80026b8 <HAL_ADC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001728:	f000 fc28 	bl	8001f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800172c:	230d      	movs	r3, #13
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_ADC1_Init+0x9c>)
 800173e:	f001 f92d 	bl	800299c <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001748:	f000 fc18 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20004cf4 	.word	0x20004cf4
 8001758:	40012000 	.word	0x40012000

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2f      	ldr	r2, [pc, #188]	; (8001838 <HAL_ADC_MspInit+0xdc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d157      	bne.n	800182e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_ADC_MspInit+0xe0>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a2d      	ldr	r2, [pc, #180]	; (800183c <HAL_ADC_MspInit+0xe0>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_ADC_MspInit+0xe0>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b27      	ldr	r3, [pc, #156]	; (800183c <HAL_ADC_MspInit+0xe0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a26      	ldr	r2, [pc, #152]	; (800183c <HAL_ADC_MspInit+0xe0>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_ADC_MspInit+0xe0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b6:	2308      	movs	r3, #8
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ba:	2303      	movs	r3, #3
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	481d      	ldr	r0, [pc, #116]	; (8001840 <HAL_ADC_MspInit+0xe4>)
 80017ca:	f001 ffe9 	bl	80037a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_ADC_MspInit+0xec>)
 80017d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 80017e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 80017f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 80017f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 8001800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001804:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 8001814:	f001 fc54 	bl	80030c0 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800181e:	f000 fbad 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_ADC_MspInit+0xe8>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40012000 	.word	0x40012000
 800183c:	40023800 	.word	0x40023800
 8001840:	40020800 	.word	0x40020800
 8001844:	20004d3c 	.word	0x20004d3c
 8001848:	40026410 	.word	0x40026410

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_DMA_Init+0x3c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <MX_DMA_Init+0x3c>)
 800185c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_DMA_Init+0x3c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2105      	movs	r1, #5
 8001872:	2038      	movs	r0, #56	; 0x38
 8001874:	f001 fbfa 	bl	800306c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001878:	2038      	movs	r0, #56	; 0x38
 800187a:	f001 fc13 	bl	80030a4 <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <MX_FREERTOS_Init+0x18>)
 8001892:	2100      	movs	r1, #0
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_FREERTOS_Init+0x1c>)
 8001896:	f009 fa61 	bl	800ad5c <osThreadNew>
 800189a:	4603      	mov	r3, r0
 800189c:	4a03      	ldr	r2, [pc, #12]	; (80018ac <MX_FREERTOS_Init+0x20>)
 800189e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	08015494 	.word	0x08015494
 80018a8:	080018b1 	.word	0x080018b1
 80018ac:	20004d9c 	.word	0x20004d9c

080018b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018b8:	f00d f840 	bl	800e93c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f009 fadf 	bl	800ae80 <osDelay>
 80018c2:	e7fb      	b.n	80018bc <StartDefaultTask+0xc>

080018c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <MX_GPIO_Init+0xfc>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a37      	ldr	r2, [pc, #220]	; (80019c0 <MX_GPIO_Init+0xfc>)
 80018e4:	f043 0320 	orr.w	r3, r3, #32
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <MX_GPIO_Init+0xfc>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <MX_GPIO_Init+0xfc>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a30      	ldr	r2, [pc, #192]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <MX_GPIO_Init+0xfc>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <MX_GPIO_Init+0xfc>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_GPIO_Init+0xfc>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001966:	2301      	movs	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_GPIO_Init+0x100>)
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4813      	ldr	r0, [pc, #76]	; (80019c8 <MX_GPIO_Init+0x104>)
 800197a:	f001 ff11 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800197e:	2302      	movs	r3, #2
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <MX_GPIO_Init+0x108>)
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_GPIO_Init+0x104>)
 8001992:	f001 ff05 	bl	80037a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	2006      	movs	r0, #6
 800199c:	f001 fb66 	bl	800306c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019a0:	2006      	movs	r0, #6
 80019a2:	f001 fb7f 	bl	80030a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	2007      	movs	r0, #7
 80019ac:	f001 fb5e 	bl	800306c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019b0:	2007      	movs	r0, #7
 80019b2:	f001 fb77 	bl	80030a4 <HAL_NVIC_EnableIRQ>

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	10110000 	.word	0x10110000
 80019c8:	40020000 	.word	0x40020000
 80019cc:	10210000 	.word	0x10210000

080019d0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <MX_I2C2_Init+0x78>)
 80019d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <MX_I2C2_Init+0x7c>)
 80019de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <MX_I2C2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a0e:	f002 f88b 	bl	8003b28 <HAL_I2C_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a18:	f000 fab0 	bl	8001f7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a20:	f003 f841 	bl	8004aa6 <HAL_I2CEx_ConfigAnalogFilter>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001a2a:	f000 faa7 	bl	8001f7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_I2C2_Init+0x74>)
 8001a32:	f003 f874 	bl	8004b1e <HAL_I2CEx_ConfigDigitalFilter>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001a3c:	f000 fa9e 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20004da0 	.word	0x20004da0
 8001a48:	40005800 	.word	0x40005800
 8001a4c:	000186a0 	.word	0x000186a0

08001a50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_I2C_MspInit+0x84>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12b      	bne.n	8001aca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001a7c:	f043 0320 	orr.w	r3, r3, #32
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a92:	2312      	movs	r3, #18
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <HAL_I2C_MspInit+0x8c>)
 8001aaa:	f001 fe79 	bl	80037a0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_I2C_MspInit+0x88>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40005800 	.word	0x40005800
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40021400 	.word	0x40021400

08001ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ae6:	f000 fd81 	bl	80025ec <HAL_Init>

  /* USER CODE BEGIN Init */

   TasK_Attr =  &MainTasK_Attr; /* two way to initialize constant var but i used the pointer method */
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <main+0xf8>)
 8001aec:	607b      	str	r3, [r7, #4]


    TasK_Attr->name = "MainTask";
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a3a      	ldr	r2, [pc, #232]	; (8001bdc <main+0xfc>)
 8001af2:	601a      	str	r2, [r3, #0]
    TasK_Attr->stack_size = 256 * 4;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afa:	615a      	str	r2, [r3, #20]
  	TasK_Attr->priority = (osPriority_t) osPriorityHigh; /* only the other task run when enter block state */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2228      	movs	r2, #40	; 0x28
 8001b00:	619a      	str	r2, [r3, #24]


  	TasK_Attr =  &IMUTasK_Attr;
 8001b02:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <main+0x100>)
 8001b04:	607b      	str	r3, [r7, #4]

  	TasK_Attr->name = "IMUTask";
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <main+0x104>)
 8001b0a:	601a      	str	r2, [r3, #0]
  	TasK_Attr->stack_size = 256 * 4;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b12:	615a      	str	r2, [r3, #20]
	TasK_Attr->priority = (osPriority_t) osPriorityAboveNormal1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2221      	movs	r2, #33	; 0x21
 8001b18:	619a      	str	r2, [r3, #24]



  	TasK_Attr =  &JOYTasK_Attr ;
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <main+0x108>)
 8001b1c:	607b      	str	r3, [r7, #4]

  	TasK_Attr->name = "JOYTask";
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a32      	ldr	r2, [pc, #200]	; (8001bec <main+0x10c>)
 8001b22:	601a      	str	r2, [r3, #0]
  	TasK_Attr->stack_size = 256 * 4;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2a:	615a      	str	r2, [r3, #20]
	TasK_Attr->priority = (osPriority_t) osPriorityAboveNormal;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	619a      	str	r2, [r3, #24]

	MainTaskHandle = osThreadNew(MainTask_Fun, NULL, &MainTasK_Attr);
 8001b32:	4a29      	ldr	r2, [pc, #164]	; (8001bd8 <main+0xf8>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	482e      	ldr	r0, [pc, #184]	; (8001bf0 <main+0x110>)
 8001b38:	f009 f910 	bl	800ad5c <osThreadNew>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <main+0x114>)
 8001b40:	6013      	str	r3, [r2, #0]

	IMUTaskHandle = osThreadNew(IMUTask_Fun, NULL, &IMUTasK_Attr);
 8001b42:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <main+0x100>)
 8001b44:	2100      	movs	r1, #0
 8001b46:	482c      	ldr	r0, [pc, #176]	; (8001bf8 <main+0x118>)
 8001b48:	f009 f908 	bl	800ad5c <osThreadNew>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	; (8001bfc <main+0x11c>)
 8001b50:	6013      	str	r3, [r2, #0]

	JOYTaskHandle = osThreadNew(JOYTask_Fun, NULL, &JOYTasK_Attr);
 8001b52:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <main+0x108>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	482a      	ldr	r0, [pc, #168]	; (8001c00 <main+0x120>)
 8001b58:	f009 f900 	bl	800ad5c <osThreadNew>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a29      	ldr	r2, [pc, #164]	; (8001c04 <main+0x124>)
 8001b60:	6013      	str	r3, [r2, #0]

	IMUSemaHandle = osSemaphoreNew(1, 0, &IMUSema_attributes);
 8001b62:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <main+0x128>)
 8001b64:	2100      	movs	r1, #0
 8001b66:	2001      	movs	r0, #1
 8001b68:	f009 fa8e 	bl	800b088 <osSemaphoreNew>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a27      	ldr	r2, [pc, #156]	; (8001c0c <main+0x12c>)
 8001b70:	6013      	str	r3, [r2, #0]

	JOYSemaHandle = osSemaphoreNew(1, 0, &JOYSema_attributes);
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <main+0x130>)
 8001b74:	2100      	movs	r1, #0
 8001b76:	2001      	movs	r0, #1
 8001b78:	f009 fa86 	bl	800b088 <osSemaphoreNew>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a25      	ldr	r2, [pc, #148]	; (8001c14 <main+0x134>)
 8001b80:	6013      	str	r3, [r2, #0]

	Main_TaskEvents = osEventFlagsNew(&Main_TaskEventAttr);
 8001b82:	4825      	ldr	r0, [pc, #148]	; (8001c18 <main+0x138>)
 8001b84:	f009 f997 	bl	800aeb6 <osEventFlagsNew>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a24      	ldr	r2, [pc, #144]	; (8001c1c <main+0x13c>)
 8001b8c:	6013      	str	r3, [r2, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8e:	f000 f851 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b92:	f7ff fe97 	bl	80018c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b96:	f7ff fe59 	bl	800184c <MX_DMA_Init>
  MX_TIM8_Init();
 8001b9a:	f000 fbcb 	bl	8002334 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001b9e:	f7ff ff17 	bl	80019d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001ba2:	f000 fc87 	bl	80024b4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ba6:	f7ff fd87 	bl	80016b8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* start timer 8 to work as trigger for ADC conversion */
  HAL_TIM_Base_Start(&htim8);
 8001baa:	481d      	ldr	r0, [pc, #116]	; (8001c20 <main+0x140>)
 8001bac:	f004 fe58 	bl	8006860 <HAL_TIM_Base_Start>

  /* start ADC and initialize it to work with DMA mode */
  HAL_ADC_Start_DMA(&hadc1,&JOYRes, 1);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	491c      	ldr	r1, [pc, #112]	; (8001c24 <main+0x144>)
 8001bb4:	481c      	ldr	r0, [pc, #112]	; (8001c28 <main+0x148>)
 8001bb6:	f000 fdc3 	bl	8002740 <HAL_ADC_Start_DMA>

  /* register timer handler to work with stdio system calls */
  RetargetInit(&huart1 );
 8001bba:	481c      	ldr	r0, [pc, #112]	; (8001c2c <main+0x14c>)
 8001bbc:	f000 f9e4 	bl	8001f88 <RetargetInit>

  /* set configurations for MPU6050 */
  MPU6050_SET_Config(arr_cong ,sizeof(arr_cong));
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	481b      	ldr	r0, [pc, #108]	; (8001c30 <main+0x150>)
 8001bc4:	f7ff fcb6 	bl	8001534 <MPU6050_SET_Config>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001bc8:	f009 f87e 	bl	800acc8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001bcc:	f7ff fe5e 	bl	800188c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001bd0:	f009 f89e 	bl	800ad10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <main+0xf4>
 8001bd6:	bf00      	nop
 8001bd8:	20004e50 	.word	0x20004e50
 8001bdc:	080153cc 	.word	0x080153cc
 8001be0:	20004e2c 	.word	0x20004e2c
 8001be4:	080153d8 	.word	0x080153d8
 8001be8:	20004df4 	.word	0x20004df4
 8001bec:	080153e0 	.word	0x080153e0
 8001bf0:	08001d45 	.word	0x08001d45
 8001bf4:	20004e24 	.word	0x20004e24
 8001bf8:	08001df1 	.word	0x08001df1
 8001bfc:	20004e18 	.word	0x20004e18
 8001c00:	08001f05 	.word	0x08001f05
 8001c04:	20004e74 	.word	0x20004e74
 8001c08:	080154b8 	.word	0x080154b8
 8001c0c:	20004e7c 	.word	0x20004e7c
 8001c10:	080154c8 	.word	0x080154c8
 8001c14:	20004e28 	.word	0x20004e28
 8001c18:	080154d8 	.word	0x080154d8
 8001c1c:	20004e1c 	.word	0x20004e1c
 8001c20:	20004ed4 	.word	0x20004ed4
 8001c24:	20004e80 	.word	0x20004e80
 8001c28:	20004cf4 	.word	0x20004cf4
 8001c2c:	20004f1c 	.word	0x20004f1c
 8001c30:	20000000 	.word	0x20000000

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	; 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2230      	movs	r2, #48	; 0x30
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00d fb16 	bl	800f274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <SystemClock_Config+0xcc>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <SystemClock_Config+0xcc>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <SystemClock_Config+0xcc>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ca8:	23a8      	movs	r3, #168	; 0xa8
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f8db 	bl	8005e74 <HAL_RCC_OscConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cc4:	f000 f95a 	bl	8001f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc8:	230f      	movs	r3, #15
 8001cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fb3c 	bl	8006364 <HAL_RCC_ClockConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cf2:	f000 f943 	bl	8001f7c <Error_Handler>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3750      	adds	r7, #80	; 0x50
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40007000 	.word	0x40007000

08001d08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]

	  if (GPIO_Pin == GPIO_PIN_1) /* if GPIOA pin1 left button */
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d104      	bne.n	8001d22 <HAL_GPIO_EXTI_Callback+0x1a>
	  {
		  MouseButtons.Buttons.LeftButton = 1;
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x38>)
 8001d1a:	7813      	ldrb	r3, [r2, #0]
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	7013      	strb	r3, [r2, #0]
	  }
	  if(GPIO_Pin == GPIO_PIN_0)/* if GPIOA pin0 right button */
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d104      	bne.n	8001d32 <HAL_GPIO_EXTI_Callback+0x2a>
	  {
		  MouseButtons.Buttons.RightButton = 1;
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x38>)
 8001d2a:	7813      	ldrb	r3, [r2, #0]
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	7013      	strb	r3, [r2, #0]
	  }


}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20004e84 	.word	0x20004e84

08001d44 <MainTask_Fun>:


void MainTask_Fun(void * arg)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	const TickType_t xDelayTicks = 1 / portTICK_PERIOD_MS; /* calculate the number of ticks that generate 1Ms delay*/
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		USBbuffer[0] = MouseButtons.AllBits ;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MainTask_Fun+0x84>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <MainTask_Fun+0x88>)
 8001d5a:	701a      	strb	r2, [r3, #0]
		USBbuffer[1] = X_Axis;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MainTask_Fun+0x8c>)
 8001d5e:	f993 2000 	ldrsb.w	r2, [r3]
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <MainTask_Fun+0x88>)
 8001d64:	705a      	strb	r2, [r3, #1]
		USBbuffer[2] = Y_Axis;
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <MainTask_Fun+0x90>)
 8001d68:	f993 2000 	ldrsb.w	r2, [r3]
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <MainTask_Fun+0x88>)
 8001d6e:	709a      	strb	r2, [r3, #2]
		USBbuffer[3] = MouseWheel;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <MainTask_Fun+0x94>)
 8001d72:	f993 2000 	ldrsb.w	r2, [r3]
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <MainTask_Fun+0x88>)
 8001d78:	70da      	strb	r2, [r3, #3]

		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USBbuffer, 4);
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	4913      	ldr	r1, [pc, #76]	; (8001dcc <MainTask_Fun+0x88>)
 8001d7e:	4817      	ldr	r0, [pc, #92]	; (8001ddc <MainTask_Fun+0x98>)
 8001d80:	f007 fd02 	bl	8009788 <USBD_CUSTOM_HID_SendReport>


		  MouseButtons.AllBits = 0 ;
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <MainTask_Fun+0x84>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
		  X_Axis = 0 ;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MainTask_Fun+0x8c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
		  Y_Axis= 0 ;
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <MainTask_Fun+0x90>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
		  MouseWheel= 0 ;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MainTask_Fun+0x94>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]

			osDelay(xDelayTicks);  /* make some delay */
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f009 f86f 	bl	800ae80 <osDelay>

			osSemaphoreRelease(JOYSemaHandle);
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MainTask_Fun+0x9c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f009 fa4a 	bl	800b240 <osSemaphoreRelease>
			osSemaphoreRelease(IMUSemaHandle);
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <MainTask_Fun+0xa0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f009 fa45 	bl	800b240 <osSemaphoreRelease>


			osEventFlagsWait(Main_TaskEvents, IMU_Flag_BIT | JOY_Flag_BIT , osFlagsWaitAll, osWaitForever);
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MainTask_Fun+0xa4>)
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	f009 f8fb 	bl	800afbc <osEventFlagsWait>
		USBbuffer[0] = MouseButtons.AllBits ;
 8001dc6:	e7c3      	b.n	8001d50 <MainTask_Fun+0xc>
 8001dc8:	20004e84 	.word	0x20004e84
 8001dcc:	20004e20 	.word	0x20004e20
 8001dd0:	20004e85 	.word	0x20004e85
 8001dd4:	20004e86 	.word	0x20004e86
 8001dd8:	20004e78 	.word	0x20004e78
 8001ddc:	20004fa4 	.word	0x20004fa4
 8001de0:	20004e28 	.word	0x20004e28
 8001de4:	20004e7c 	.word	0x20004e7c
 8001de8:	20004e1c 	.word	0x20004e1c
 8001dec:	00000000 	.word	0x00000000

08001df0 <IMUTask_Fun>:



/* this task used to update X and Y axis */
void IMUTask_Fun(void * arg)
{
 8001df0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df4:	b090      	sub	sp, #64	; 0x40
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	6078      	str	r0, [r7, #4]
	MPU6050_ANGELS_t CurrentMeasure ={0} ;
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	619a      	str	r2, [r3, #24]


	float TempX = 0,TempY = 0 ;	/* perform the operation on local var before access the global one */
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
	while(1)
	{

		  osSemaphoreAcquire(IMUSemaHandle , osWaitForever);
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <IMUTask_Fun+0x100>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e22:	4618      	mov	r0, r3
 8001e24:	f009 f9ba 	bl	800b19c <osSemaphoreAcquire>

		  /* read IMU angles */
		Read_Accurate_Angles_ComplemantrayFilter(&CurrentMeasure);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fc07 	bl	8001640 <Read_Accurate_Angles_ComplemantrayFilter>

		/*IMU angles from =-90 t0 90 but axis -128 to 127 but we need it to be more stable */
		TempX = (CurrentMeasure.GYRO_ANGLE_ROLL * 0.1)  ;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb97 	bl	8000568 <__aeabi_f2d>
 8001e3a:	a32b      	add	r3, pc, #172	; (adr r3, 8001ee8 <IMUTask_Fun+0xf8>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fbea 	bl	8000618 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7fe fedc 	bl	8000c08 <__aeabi_d2f>
 8001e50:	4603      	mov	r3, r0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
		TempY = (CurrentMeasure.GYRO_ANGLE_PITCH * 0.1) ;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb86 	bl	8000568 <__aeabi_f2d>
 8001e5c:	a322      	add	r3, pc, #136	; (adr r3, 8001ee8 <IMUTask_Fun+0xf8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fbd9 	bl	8000618 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fecb 	bl	8000c08 <__aeabi_d2f>
 8001e72:	4603      	mov	r3, r0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* no need to protect these global variables because all tasks is synchronized so there is no concurrency access right now*/
			X_Axis  = TempX ;
 8001e76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7e:	edc7 7a00 	vstr	s15, [r7]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b25a      	sxtb	r2, r3
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <IMUTask_Fun+0x104>)
 8001e88:	701a      	strb	r2, [r3, #0]

			Y_Axis  = TempY ;
 8001e8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e92:	edc7 7a00 	vstr	s15, [r7]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b25a      	sxtb	r2, r3
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <IMUTask_Fun+0x108>)
 8001e9c:	701a      	strb	r2, [r3, #0]




			/* print the measured angle through uart */
		printf("pitch = %0.2f  ,  Roll = %0.2f  , Yaw = %0.2f  \n",CurrentMeasure.GYRO_ANGLE_PITCH
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb61 	bl	8000568 <__aeabi_f2d>
 8001ea6:	4680      	mov	r8, r0
 8001ea8:	4689      	mov	r9, r1
				  	  	  	  	  	  	  	  	  	  	  ,CurrentMeasure.GYRO_ANGLE_ROLL
 8001eaa:	693b      	ldr	r3, [r7, #16]
		printf("pitch = %0.2f  ,  Roll = %0.2f  , Yaw = %0.2f  \n",CurrentMeasure.GYRO_ANGLE_PITCH
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb5b 	bl	8000568 <__aeabi_f2d>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
														  ,CurrentMeasure.GYRO_ANGLE_YAW);
 8001eb6:	697b      	ldr	r3, [r7, #20]
		printf("pitch = %0.2f  ,  Roll = %0.2f  , Yaw = %0.2f  \n",CurrentMeasure.GYRO_ANGLE_PITCH
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb55 	bl	8000568 <__aeabi_f2d>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ec6:	e9cd 4500 	strd	r4, r5, [sp]
 8001eca:	4642      	mov	r2, r8
 8001ecc:	464b      	mov	r3, r9
 8001ece:	480b      	ldr	r0, [pc, #44]	; (8001efc <IMUTask_Fun+0x10c>)
 8001ed0:	f00e f852 	bl	800ff78 <iprintf>

		/* send notification to the main function my data is done */
		osEventFlagsSet(Main_TaskEvents, IMU_Flag_BIT);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <IMUTask_Fun+0x110>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4618      	mov	r0, r3
 8001edc:	f009 f82a 	bl	800af34 <osEventFlagsSet>
		  osSemaphoreAcquire(IMUSemaHandle , osWaitForever);
 8001ee0:	e79b      	b.n	8001e1a <IMUTask_Fun+0x2a>
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	9999999a 	.word	0x9999999a
 8001eec:	3fb99999 	.word	0x3fb99999
 8001ef0:	20004e7c 	.word	0x20004e7c
 8001ef4:	20004e85 	.word	0x20004e85
 8001ef8:	20004e86 	.word	0x20004e86
 8001efc:	080153e8 	.word	0x080153e8
 8001f00:	20004e1c 	.word	0x20004e1c

08001f04 <JOYTask_Fun>:
}


/* ADC work with DMA so data is update periodically */
void JOYTask_Fun(void * arg)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		osSemaphoreAcquire(JOYSemaHandle , osWaitForever);
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <JOYTask_Fun+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	4618      	mov	r0, r3
 8001f16:	f009 f941 	bl	800b19c <osSemaphoreAcquire>
		MouseWheel = (JOYRes - 2048)/1000;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <JOYTask_Fun+0x44>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <JOYTask_Fun+0x48>)
 8001f24:	fb82 1203 	smull	r1, r2, r2, r3
 8001f28:	1192      	asrs	r2, r2, #6
 8001f2a:	17db      	asrs	r3, r3, #31
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	b25a      	sxtb	r2, r3
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <JOYTask_Fun+0x4c>)
 8001f32:	701a      	strb	r2, [r3, #0]
		osEventFlagsSet(Main_TaskEvents, JOY_Flag_BIT);
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <JOYTask_Fun+0x50>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f008 fffa 	bl	800af34 <osEventFlagsSet>
		osSemaphoreAcquire(JOYSemaHandle , osWaitForever);
 8001f40:	e7e4      	b.n	8001f0c <JOYTask_Fun+0x8>
 8001f42:	bf00      	nop
 8001f44:	20004e28 	.word	0x20004e28
 8001f48:	20004e80 	.word	0x20004e80
 8001f4c:	10624dd3 	.word	0x10624dd3
 8001f50:	20004e78 	.word	0x20004e78
 8001f54:	20004e1c 	.word	0x20004e1c

08001f58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f6a:	f000 fb61 	bl	8002630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40001000 	.word	0x40001000

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <Error_Handler+0x8>
	...

08001f88 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <RetargetInit+0x28>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <RetargetInit+0x2c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6898      	ldr	r0, [r3, #8]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	f00e f801 	bl	800ffa8 <setvbuf>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20004e88 	.word	0x20004e88
 8001fb4:	20000198 	.word	0x20000198

08001fb8 <_isatty>:

int _isatty(int fd) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db04      	blt.n	8001fd0 <_isatty+0x18>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	dc01      	bgt.n	8001fd0 <_isatty+0x18>
    return 1;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e005      	b.n	8001fdc <_isatty+0x24>

  errno = EBADF;
 8001fd0:	f00d f918 	bl	800f204 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2209      	movs	r2, #9
 8001fd8:	601a      	str	r2, [r3, #0]
  return 0;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_write>:

int _write(int fd, char* ptr, int len) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d002      	beq.n	8001ffc <_write+0x18>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d111      	bne.n	8002020 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <_write+0x54>)
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	f005 fbc0 	bl	800778e <HAL_UART_Transmit>
 800200e:	4603      	mov	r3, r0
 8002010:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <_write+0x38>
      return len;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	e008      	b.n	800202e <_write+0x4a>
    else
      return EIO;
 800201c:	2305      	movs	r3, #5
 800201e:	e006      	b.n	800202e <_write+0x4a>
  }
  errno = EBADF;
 8002020:	f00d f8f0 	bl	800f204 <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	2209      	movs	r2, #9
 8002028:	601a      	str	r2, [r3, #0]
  return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20004e88 	.word	0x20004e88

0800203c <_close>:

int _close(int fd) {
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db04      	blt.n	8002054 <_close+0x18>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b02      	cmp	r3, #2
 800204e:	dc01      	bgt.n	8002054 <_close+0x18>
    return 0;
 8002050:	2300      	movs	r3, #0
 8002052:	e006      	b.n	8002062 <_close+0x26>

  errno = EBADF;
 8002054:	f00d f8d6 	bl	800f204 <__errno>
 8002058:	4603      	mov	r3, r0
 800205a:	2209      	movs	r2, #9
 800205c:	601a      	str	r2, [r3, #0]
  return -1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002076:	f00d f8c5 	bl	800f204 <__errno>
 800207a:	4603      	mov	r3, r0
 800207c:	2209      	movs	r2, #9
 800207e:	601a      	str	r2, [r3, #0]
  return -1;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_read>:

int _read(int fd, char* ptr, int len) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d110      	bne.n	80020c0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <_read+0x4c>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	2201      	movs	r2, #1
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	f005 fc02 	bl	80078b2 <HAL_UART_Receive>
 80020ae:	4603      	mov	r3, r0
 80020b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <_read+0x30>
      return 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e008      	b.n	80020ce <_read+0x42>
    else
      return EIO;
 80020bc:	2305      	movs	r3, #5
 80020be:	e006      	b.n	80020ce <_read+0x42>
  }
  errno = EBADF;
 80020c0:	f00d f8a0 	bl	800f204 <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2209      	movs	r2, #9
 80020c8:	601a      	str	r2, [r3, #0]
  return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20004e88 	.word	0x20004e88

080020dc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db08      	blt.n	80020fe <_fstat+0x22>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	dc05      	bgt.n	80020fe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f8:	605a      	str	r2, [r3, #4]
    return 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e005      	b.n	800210a <_fstat+0x2e>
  }

  errno = EBADF;
 80020fe:	f00d f881 	bl	800f204 <__errno>
 8002102:	4603      	mov	r3, r0
 8002104:	2209      	movs	r2, #9
 8002106:	601a      	str	r2, [r3, #0]
  return 0;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_MspInit+0x54>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_MspInit+0x54>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_MspInit+0x54>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_MspInit+0x54>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_MspInit+0x54>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_MspInit+0x54>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	210f      	movs	r1, #15
 8002156:	f06f 0001 	mvn.w	r0, #1
 800215a:	f000 ff87 	bl	800306c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800217c:	2200      	movs	r2, #0
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	2036      	movs	r0, #54	; 0x36
 8002182:	f000 ff73 	bl	800306c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002186:	2036      	movs	r0, #54	; 0x36
 8002188:	f000 ff8c 	bl	80030a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <HAL_InitTick+0xa4>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_InitTick+0xa4>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_InitTick+0xa4>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a8:	f107 0210 	add.w	r2, r7, #16
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fad2 	bl	800675c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021b8:	f004 faa8 	bl	800670c <HAL_RCC_GetPCLK1Freq>
 80021bc:	4603      	mov	r3, r0
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_InitTick+0xa8>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	3b01      	subs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_InitTick+0xac>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_InitTick+0xb0>)
 80021d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_InitTick+0xac>)
 80021d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_InitTick+0xac>)
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_InitTick+0xac>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_InitTick+0xac>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021f0:	4809      	ldr	r0, [pc, #36]	; (8002218 <HAL_InitTick+0xac>)
 80021f2:	f004 fae5 	bl	80067c0 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d104      	bne.n	8002206 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <HAL_InitTick+0xac>)
 80021fe:	f004 fb97 	bl	8006930 <HAL_TIM_Base_Start_IT>
 8002202:	4603      	mov	r3, r0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3730      	adds	r7, #48	; 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	431bde83 	.word	0x431bde83
 8002218:	20004e8c 	.word	0x20004e8c
 800221c:	40001000 	.word	0x40001000

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <NMI_Handler+0x4>

08002226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <HardFault_Handler+0x4>

0800222c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <MemManage_Handler+0x4>

08002232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <UsageFault_Handler+0x4>

0800223e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002250:	2001      	movs	r0, #1
 8002252:	f001 fc51 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}

0800225a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800225e:	2002      	movs	r0, #2
 8002260:	f001 fc4a 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM6_DAC_IRQHandler+0x10>)
 800226e:	f004 fc28 	bl	8006ac2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20004e8c 	.word	0x20004e8c

0800227c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <DMA2_Stream0_IRQHandler+0x10>)
 8002282:	f001 f823 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20004d3c 	.word	0x20004d3c

08002290 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <OTG_FS_IRQHandler+0x10>)
 8002296:	f002 fdd1 	bl	8004e3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20005474 	.word	0x20005474

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f00c ff96 	bl	800f204 <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20030000 	.word	0x20030000
 8002304:	00000600 	.word	0x00000600
 8002308:	200003b8 	.word	0x200003b8
 800230c:	20005890 	.word	0x20005890

08002310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <SystemInit+0x20>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <SystemInit+0x20>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b096      	sub	sp, #88	; 0x58
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2220      	movs	r2, #32
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f00c ff81 	bl	800f274 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <MX_TIM8_Init+0x134>)
 8002374:	4a3d      	ldr	r2, [pc, #244]	; (800246c <MX_TIM8_Init+0x138>)
 8002376:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 8002378:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <MX_TIM8_Init+0x134>)
 800237a:	22a7      	movs	r2, #167	; 0xa7
 800237c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <MX_TIM8_Init+0x134>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <MX_TIM8_Init+0x134>)
 8002386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <MX_TIM8_Init+0x134>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002392:	4b35      	ldr	r3, [pc, #212]	; (8002468 <MX_TIM8_Init+0x134>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b33      	ldr	r3, [pc, #204]	; (8002468 <MX_TIM8_Init+0x134>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800239e:	4832      	ldr	r0, [pc, #200]	; (8002468 <MX_TIM8_Init+0x134>)
 80023a0:	f004 fa0e 	bl	80067c0 <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80023aa:	f7ff fde7 	bl	8001f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023b8:	4619      	mov	r1, r3
 80023ba:	482b      	ldr	r0, [pc, #172]	; (8002468 <MX_TIM8_Init+0x134>)
 80023bc:	f004 fce2 	bl	8006d84 <HAL_TIM_ConfigClockSource>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80023c6:	f7ff fdd9 	bl	8001f7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80023ca:	4827      	ldr	r0, [pc, #156]	; (8002468 <MX_TIM8_Init+0x134>)
 80023cc:	f004 fb20 	bl	8006a10 <HAL_TIM_OC_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80023d6:	f7ff fdd1 	bl	8001f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023da:	2320      	movs	r3, #32
 80023dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023e6:	4619      	mov	r1, r3
 80023e8:	481f      	ldr	r0, [pc, #124]	; (8002468 <MX_TIM8_Init+0x134>)
 80023ea:	f005 f8a1 	bl	8007530 <HAL_TIMEx_MasterConfigSynchronization>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80023f4:	f7ff fdc2 	bl	8001f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002404:	2300      	movs	r3, #0
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	2200      	movs	r2, #0
 800241a:	4619      	mov	r1, r3
 800241c:	4812      	ldr	r0, [pc, #72]	; (8002468 <MX_TIM8_Init+0x134>)
 800241e:	f004 fc59 	bl	8006cd4 <HAL_TIM_OC_ConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002428:	f7ff fda8 	bl	8001f7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4619      	mov	r1, r3
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <MX_TIM8_Init+0x134>)
 8002450:	f005 f8ea 	bl	8007628 <HAL_TIMEx_ConfigBreakDeadTime>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800245a:	f7ff fd8f 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	3758      	adds	r7, #88	; 0x58
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20004ed4 	.word	0x20004ed4
 800246c:	40010400 	.word	0x40010400

08002470 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <HAL_TIM_Base_MspInit+0x3c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10d      	bne.n	800249e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_TIM_Base_MspInit+0x40>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_TIM_Base_MspInit+0x40>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_TIM_Base_MspInit+0x40>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40010400 	.word	0x40010400
 80024b0:	40023800 	.word	0x40023800

080024b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <MX_USART1_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024ec:	f005 f902 	bl	80076f4 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024f6:	f7ff fd41 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20004f1c 	.word	0x20004f1c
 8002504:	40011000 	.word	0x40011000

08002508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a19      	ldr	r2, [pc, #100]	; (800258c <HAL_UART_MspInit+0x84>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d12c      	bne.n	8002584 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_UART_MspInit+0x88>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_UART_MspInit+0x88>)
 8002534:	f043 0310 	orr.w	r3, r3, #16
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_UART_MspInit+0x88>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_UART_MspInit+0x88>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <HAL_UART_MspInit+0x88>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <HAL_UART_MspInit+0x88>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002562:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002574:	2307      	movs	r3, #7
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4619      	mov	r1, r3
 800257e:	4805      	ldr	r0, [pc, #20]	; (8002594 <HAL_UART_MspInit+0x8c>)
 8002580:	f001 f90e 	bl	80037a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002584:	bf00      	nop
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40011000 	.word	0x40011000
 8002590:	40023800 	.word	0x40023800
 8002594:	40020000 	.word	0x40020000

08002598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800259e:	490e      	ldr	r1, [pc, #56]	; (80025d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025a0:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a4:	e002      	b.n	80025ac <LoopCopyDataInit>

080025a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025aa:	3304      	adds	r3, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b0:	d3f9      	bcc.n	80025a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025b4:	4c0b      	ldr	r4, [pc, #44]	; (80025e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b8:	e001      	b.n	80025be <LoopFillZerobss>

080025ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025bc:	3204      	adds	r2, #4

080025be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c0:	d3fb      	bcc.n	80025ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025c2:	f7ff fea5 	bl	8002310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c6:	f00c fe23 	bl	800f210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ca:	f7ff fa89 	bl	8001ae0 <main>
  bx  lr    
 80025ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 80025dc:	08015ba8 	.word	0x08015ba8
  ldr r2, =_sbss
 80025e0:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 80025e4:	2000588c 	.word	0x2000588c

080025e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC_IRQHandler>
	...

080025ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <HAL_Init+0x40>)
 80025f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_Init+0x40>)
 8002602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_Init+0x40>)
 800260e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002614:	2003      	movs	r0, #3
 8002616:	f000 fd1e 	bl	8003056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff fda6 	bl	800216c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002620:	f7ff fd78 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_IncTick+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x24>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_IncTick+0x24>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000010 	.word	0x20000010
 8002654:	20004f60 	.word	0x20004f60

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_GetTick+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20004f60 	.word	0x20004f60

08002670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff ffee 	bl	8002658 <HAL_GetTick>
 800267c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d005      	beq.n	8002696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_Delay+0x44>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002696:	bf00      	nop
 8002698:	f7ff ffde 	bl	8002658 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d8f7      	bhi.n	8002698 <HAL_Delay+0x28>
  {
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000010 	.word	0x20000010

080026b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e033      	b.n	8002736 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff f840 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d118      	bne.n	8002728 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026fe:	f023 0302 	bic.w	r3, r3, #2
 8002702:	f043 0202 	orr.w	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa78 	bl	8002c00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
 8002726:	e001      	b.n	800272c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_ADC_Start_DMA+0x1e>
 800275a:	2302      	movs	r3, #2
 800275c:	e0e9      	b.n	8002932 <HAL_ADC_Start_DMA+0x1f2>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d018      	beq.n	80027a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002784:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_ADC_Start_DMA+0x1fc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6d      	ldr	r2, [pc, #436]	; (8002940 <HAL_ADC_Start_DMA+0x200>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0c9a      	lsrs	r2, r3, #18
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002798:	e002      	b.n	80027a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	3b01      	subs	r3, #1
 800279e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f9      	bne.n	800279a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d107      	bne.n	80027c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	f040 80a1 	bne.w	8002918 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002800:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002814:	d106      	bne.n	8002824 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f023 0206 	bic.w	r2, r3, #6
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
 8002822:	e002      	b.n	800282a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002832:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_ADC_Start_DMA+0x204>)
 8002834:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	4a43      	ldr	r2, [pc, #268]	; (8002948 <HAL_ADC_Start_DMA+0x208>)
 800283c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	4a42      	ldr	r2, [pc, #264]	; (800294c <HAL_ADC_Start_DMA+0x20c>)
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	4a41      	ldr	r2, [pc, #260]	; (8002950 <HAL_ADC_Start_DMA+0x210>)
 800284c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002856:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002866:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002876:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	334c      	adds	r3, #76	; 0x4c
 8002882:	4619      	mov	r1, r3
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f000 fcc8 	bl	800321c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	2b00      	cmp	r3, #0
 8002896:	d12a      	bne.n	80028ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_ADC_Start_DMA+0x214>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d015      	beq.n	80028ce <HAL_ADC_Start_DMA+0x18e>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2c      	ldr	r2, [pc, #176]	; (8002958 <HAL_ADC_Start_DMA+0x218>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_Start_DMA+0x178>
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_ADC_Start_DMA+0x204>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a27      	ldr	r2, [pc, #156]	; (800295c <HAL_ADC_Start_DMA+0x21c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d136      	bne.n	8002930 <HAL_ADC_Start_DMA+0x1f0>
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_ADC_Start_DMA+0x204>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d130      	bne.n	8002930 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d129      	bne.n	8002930 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	e020      	b.n	8002930 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_ADC_Start_DMA+0x214>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d11b      	bne.n	8002930 <HAL_ADC_Start_DMA+0x1f0>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d114      	bne.n	8002930 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	e00b      	b.n	8002930 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f043 0210 	orr.w	r2, r3, #16
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000008 	.word	0x20000008
 8002940:	431bde83 	.word	0x431bde83
 8002944:	40012300 	.word	0x40012300
 8002948:	08002df9 	.word	0x08002df9
 800294c:	08002eb3 	.word	0x08002eb3
 8002950:	08002ecf 	.word	0x08002ecf
 8002954:	40012000 	.word	0x40012000
 8002958:	40012100 	.word	0x40012100
 800295c:	40012200 	.word	0x40012200

08002960 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1c>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e113      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x244>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b09      	cmp	r3, #9
 80029c6:	d925      	bls.n	8002a14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68d9      	ldr	r1, [r3, #12]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	3b1e      	subs	r3, #30
 80029de:	2207      	movs	r2, #7
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43da      	mvns	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	400a      	ands	r2, r1
 80029ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68d9      	ldr	r1, [r3, #12]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4403      	add	r3, r0
 8002a06:	3b1e      	subs	r3, #30
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	e022      	b.n	8002a5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6919      	ldr	r1, [r3, #16]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	2207      	movs	r2, #7
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	400a      	ands	r2, r1
 8002a36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6919      	ldr	r1, [r3, #16]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4403      	add	r3, r0
 8002a50:	409a      	lsls	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d824      	bhi.n	8002aac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b05      	subs	r3, #5
 8002a74:	221f      	movs	r2, #31
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	400a      	ands	r2, r1
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	4618      	mov	r0, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b05      	subs	r3, #5
 8002a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8002aaa:	e04c      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	d824      	bhi.n	8002afe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b23      	subs	r3, #35	; 0x23
 8002ac6:	221f      	movs	r2, #31
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b23      	subs	r3, #35	; 0x23
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
 8002afc:	e023      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b41      	subs	r3, #65	; 0x41
 8002b10:	221f      	movs	r2, #31
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	3b41      	subs	r3, #65	; 0x41
 8002b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_ADC_ConfigChannel+0x250>)
 8002b48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <HAL_ADC_ConfigChannel+0x254>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10f      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d8>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b12      	cmp	r3, #18
 8002b5a:	d10b      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <HAL_ADC_ConfigChannel+0x254>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d12b      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x23a>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_ADC_ConfigChannel+0x258>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x1f4>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b11      	cmp	r3, #17
 8002b8e:	d122      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a11      	ldr	r2, [pc, #68]	; (8002bf4 <HAL_ADC_ConfigChannel+0x258>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d111      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_ADC_ConfigChannel+0x25c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <HAL_ADC_ConfigChannel+0x260>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9a      	lsrs	r2, r3, #18
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bc8:	e002      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f9      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	40012000 	.word	0x40012000
 8002bf4:	10000012 	.word	0x10000012
 8002bf8:	20000008 	.word	0x20000008
 8002bfc:	431bde83 	.word	0x431bde83

08002c00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c08:	4b79      	ldr	r3, [pc, #484]	; (8002df0 <ADC_Init+0x1f0>)
 8002c0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	021a      	lsls	r2, r3, #8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6859      	ldr	r1, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <ADC_Init+0x1f4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ca6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	e00f      	b.n	8002cfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0202 	bic.w	r2, r2, #2
 8002d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7e1b      	ldrb	r3, [r3, #24]
 8002d18:	005a      	lsls	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01b      	beq.n	8002d64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	3b01      	subs	r3, #1
 8002d58:	035a      	lsls	r2, r3, #13
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	e007      	b.n	8002d74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	051a      	lsls	r2, r3, #20
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002db6:	025a      	lsls	r2, r3, #9
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6899      	ldr	r1, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	029a      	lsls	r2, r3, #10
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40012300 	.word	0x40012300
 8002df4:	0f000001 	.word	0x0f000001

08002df8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d13c      	bne.n	8002e8c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d12b      	bne.n	8002e84 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d127      	bne.n	8002e84 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d006      	beq.n	8002e50 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d119      	bne.n	8002e84 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0220 	bic.w	r2, r2, #32
 8002e5e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7ff fd6b 	bl	8002960 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e8a:	e00e      	b.n	8002eaa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7ff fd75 	bl	8002988 <HAL_ADC_ErrorCallback>
}
 8002e9e:	e004      	b.n	8002eaa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff fd57 	bl	8002974 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff fd4a 	bl	8002988 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4907      	ldr	r1, [pc, #28]	; (8002f98 <__NVIC_EnableIRQ+0x38>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db0a      	blt.n	8002fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <__NVIC_SetPriority+0x4c>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc4:	e00a      	b.n	8002fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4908      	ldr	r1, [pc, #32]	; (8002fec <__NVIC_SetPriority+0x50>)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	440b      	add	r3, r1
 8002fda:	761a      	strb	r2, [r3, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f1c3 0307 	rsb	r3, r3, #7
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf28      	it	cs
 800300e:	2304      	movcs	r3, #4
 8003010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3304      	adds	r3, #4
 8003016:	2b06      	cmp	r3, #6
 8003018:	d902      	bls.n	8003020 <NVIC_EncodePriority+0x30>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3b03      	subs	r3, #3
 800301e:	e000      	b.n	8003022 <NVIC_EncodePriority+0x32>
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43d9      	mvns	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	4313      	orrs	r3, r2
         );
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff4c 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800307e:	f7ff ff61 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 8003082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	6978      	ldr	r0, [r7, #20]
 800308a:	f7ff ffb1 	bl	8002ff0 <NVIC_EncodePriority>
 800308e:	4602      	mov	r2, r0
 8003090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff80 	bl	8002f9c <__NVIC_SetPriority>
}
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff54 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff fac4 	bl	8002658 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e099      	b.n	8003210 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030fc:	e00f      	b.n	800311e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030fe:	f7ff faab 	bl	8002658 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b05      	cmp	r3, #5
 800310a:	d908      	bls.n	800311e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2203      	movs	r2, #3
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e078      	b.n	8003210 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e8      	bne.n	80030fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4b38      	ldr	r3, [pc, #224]	; (8003218 <HAL_DMA_Init+0x158>)
 8003138:	4013      	ands	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800314a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	2b04      	cmp	r3, #4
 8003176:	d107      	bne.n	8003188 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	4313      	orrs	r3, r2
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0307 	bic.w	r3, r3, #7
 800319e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d117      	bne.n	80031e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fa6f 	bl	80036a8 <DMA_CheckFifoParam>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031de:	2301      	movs	r3, #1
 80031e0:	e016      	b.n	8003210 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fa26 	bl	800363c <DMA_CalcBaseAndBitshift>
 80031f0:	4603      	mov	r3, r0
 80031f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f8:	223f      	movs	r2, #63	; 0x3f
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	f010803f 	.word	0xf010803f

0800321c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_DMA_Start_IT+0x26>
 800323e:	2302      	movs	r3, #2
 8003240:	e040      	b.n	80032c4 <HAL_DMA_Start_IT+0xa8>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d12f      	bne.n	80032b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f9b8 	bl	80035e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	223f      	movs	r2, #63	; 0x3f
 8003276:	409a      	lsls	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0216 	orr.w	r2, r2, #22
 800328a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e005      	b.n	80032c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032d8:	4b92      	ldr	r3, [pc, #584]	; (8003524 <HAL_DMA_IRQHandler+0x258>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a92      	ldr	r2, [pc, #584]	; (8003528 <HAL_DMA_IRQHandler+0x25c>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0a9b      	lsrs	r3, r3, #10
 80032e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2208      	movs	r2, #8
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01a      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	2208      	movs	r2, #8
 8003326:	409a      	lsls	r2, r3
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2201      	movs	r2, #1
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	2204      	movs	r2, #4
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2204      	movs	r2, #4
 8003392:	409a      	lsls	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	2210      	movs	r2, #16
 80033aa:	409a      	lsls	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d043      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d03c      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2210      	movs	r2, #16
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d024      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
 80033fa:	e01f      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	4798      	blx	r3
 800340c:	e016      	b.n	800343c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0208 	bic.w	r2, r2, #8
 800342a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	2220      	movs	r2, #32
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 808e 	beq.w	800356a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8086 	beq.w	800356a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2220      	movs	r2, #32
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b05      	cmp	r3, #5
 8003474:	d136      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0216 	bic.w	r2, r2, #22
 8003484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_DMA_IRQHandler+0x1da>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	223f      	movs	r2, #63	; 0x3f
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d07d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
        }
        return;
 80034e2:	e078      	b.n	80035d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01c      	beq.n	800352c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d108      	bne.n	8003512 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	2b00      	cmp	r3, #0
 8003506:	d030      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
 8003510:	e02b      	b.n	800356a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d027      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
 8003522:	e022      	b.n	800356a <HAL_DMA_IRQHandler+0x29e>
 8003524:	20000008 	.word	0x20000008
 8003528:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0210 	bic.w	r2, r2, #16
 8003548:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d032      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d022      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2205      	movs	r2, #5
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d307      	bcc.n	80035b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f2      	bne.n	8003596 <HAL_DMA_IRQHandler+0x2ca>
 80035b0:	e000      	b.n	80035b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80035b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
 80035d4:	e000      	b.n	80035d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80035d6:	bf00      	nop
    }
  }
}
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d108      	bne.n	8003620 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800361e:	e007      	b.n	8003630 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	60da      	str	r2, [r3, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	3b10      	subs	r3, #16
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <DMA_CalcBaseAndBitshift+0x64>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d909      	bls.n	800367e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	659a      	str	r2, [r3, #88]	; 0x58
 800367c:	e007      	b.n	800368e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	aaaaaaab 	.word	0xaaaaaaab
 80036a4:	08015500 	.word	0x08015500

080036a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11f      	bne.n	8003702 <DMA_CheckFifoParam+0x5a>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d856      	bhi.n	8003776 <DMA_CheckFifoParam+0xce>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <DMA_CheckFifoParam+0x28>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	080036e1 	.word	0x080036e1
 80036d4:	080036f3 	.word	0x080036f3
 80036d8:	080036e1 	.word	0x080036e1
 80036dc:	08003777 	.word	0x08003777
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d046      	beq.n	800377a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e043      	b.n	800377a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036fa:	d140      	bne.n	800377e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003700:	e03d      	b.n	800377e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370a:	d121      	bne.n	8003750 <DMA_CheckFifoParam+0xa8>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d837      	bhi.n	8003782 <DMA_CheckFifoParam+0xda>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <DMA_CheckFifoParam+0x70>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003729 	.word	0x08003729
 800371c:	0800372f 	.word	0x0800372f
 8003720:	08003729 	.word	0x08003729
 8003724:	08003741 	.word	0x08003741
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e030      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d025      	beq.n	8003786 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373e:	e022      	b.n	8003786 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003748:	d11f      	bne.n	800378a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800374e:	e01c      	b.n	800378a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d903      	bls.n	800375e <DMA_CheckFifoParam+0xb6>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d003      	beq.n	8003764 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800375c:	e018      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      break;
 8003762:	e015      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00e      	beq.n	800378e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e00b      	b.n	800378e <DMA_CheckFifoParam+0xe6>
      break;
 8003776:	bf00      	nop
 8003778:	e00a      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
 800377c:	e008      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800377e:	bf00      	nop
 8003780:	e006      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;   
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
    }
  } 
  
  return status; 
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e177      	b.n	8003aac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f040 8166 	bne.w	8003aa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d005      	beq.n	80037f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d130      	bne.n	8003854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003828:	2201      	movs	r2, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 0201 	and.w	r2, r3, #1
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d017      	beq.n	8003890 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4013      	ands	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80c0 	beq.w	8003aa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <HAL_GPIO_Init+0x324>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a65      	ldr	r2, [pc, #404]	; (8003ac4 <HAL_GPIO_Init+0x324>)
 8003930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <HAL_GPIO_Init+0x324>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003942:	4a61      	ldr	r2, [pc, #388]	; (8003ac8 <HAL_GPIO_Init+0x328>)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a58      	ldr	r2, [pc, #352]	; (8003acc <HAL_GPIO_Init+0x32c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d037      	beq.n	80039de <HAL_GPIO_Init+0x23e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a57      	ldr	r2, [pc, #348]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d031      	beq.n	80039da <HAL_GPIO_Init+0x23a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a56      	ldr	r2, [pc, #344]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d02b      	beq.n	80039d6 <HAL_GPIO_Init+0x236>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a55      	ldr	r2, [pc, #340]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d025      	beq.n	80039d2 <HAL_GPIO_Init+0x232>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a54      	ldr	r2, [pc, #336]	; (8003adc <HAL_GPIO_Init+0x33c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01f      	beq.n	80039ce <HAL_GPIO_Init+0x22e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a53      	ldr	r2, [pc, #332]	; (8003ae0 <HAL_GPIO_Init+0x340>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d019      	beq.n	80039ca <HAL_GPIO_Init+0x22a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <HAL_GPIO_Init+0x344>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_GPIO_Init+0x226>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a51      	ldr	r2, [pc, #324]	; (8003ae8 <HAL_GPIO_Init+0x348>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00d      	beq.n	80039c2 <HAL_GPIO_Init+0x222>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a50      	ldr	r2, [pc, #320]	; (8003aec <HAL_GPIO_Init+0x34c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <HAL_GPIO_Init+0x21e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4f      	ldr	r2, [pc, #316]	; (8003af0 <HAL_GPIO_Init+0x350>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_GPIO_Init+0x21a>
 80039b6:	2309      	movs	r3, #9
 80039b8:	e012      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039ba:	230a      	movs	r3, #10
 80039bc:	e010      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039be:	2308      	movs	r3, #8
 80039c0:	e00e      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039c2:	2307      	movs	r3, #7
 80039c4:	e00c      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039c6:	2306      	movs	r3, #6
 80039c8:	e00a      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039ca:	2305      	movs	r3, #5
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039ce:	2304      	movs	r3, #4
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x240>
 80039de:	2300      	movs	r3, #0
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f0:	4935      	ldr	r1, [pc, #212]	; (8003ac8 <HAL_GPIO_Init+0x328>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039fe:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a22:	4a34      	ldr	r2, [pc, #208]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a28:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4c:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a52:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <HAL_GPIO_Init+0x354>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f ae84 	bls.w	80037bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40013800 	.word	0x40013800
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020c00 	.word	0x40020c00
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	40021400 	.word	0x40021400
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	40021c00 	.word	0x40021c00
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40022400 	.word	0x40022400
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe f8f6 	bl	8001d08 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e12b      	b.n	8003d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd ff7e 	bl	8001a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	; 0x24
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f002 fdbe 	bl	800670c <HAL_RCC_GetPCLK1Freq>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a81      	ldr	r2, [pc, #516]	; (8003d9c <HAL_I2C_Init+0x274>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d807      	bhi.n	8003bac <HAL_I2C_Init+0x84>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a80      	ldr	r2, [pc, #512]	; (8003da0 <HAL_I2C_Init+0x278>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bf94      	ite	ls
 8003ba4:	2301      	movls	r3, #1
 8003ba6:	2300      	movhi	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e006      	b.n	8003bba <HAL_I2C_Init+0x92>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a7d      	ldr	r2, [pc, #500]	; (8003da4 <HAL_I2C_Init+0x27c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	bf94      	ite	ls
 8003bb4:	2301      	movls	r3, #1
 8003bb6:	2300      	movhi	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0e7      	b.n	8003d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a78      	ldr	r2, [pc, #480]	; (8003da8 <HAL_I2C_Init+0x280>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9b      	lsrs	r3, r3, #18
 8003bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a6a      	ldr	r2, [pc, #424]	; (8003d9c <HAL_I2C_Init+0x274>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d802      	bhi.n	8003bfc <HAL_I2C_Init+0xd4>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	e009      	b.n	8003c10 <HAL_I2C_Init+0xe8>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_I2C_Init+0x284>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	099b      	lsrs	r3, r3, #6
 8003c0e:	3301      	adds	r3, #1
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	495c      	ldr	r1, [pc, #368]	; (8003d9c <HAL_I2C_Init+0x274>)
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	d819      	bhi.n	8003c64 <HAL_I2C_Init+0x13c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e59      	subs	r1, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c3e:	1c59      	adds	r1, r3, #1
 8003c40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c44:	400b      	ands	r3, r1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_I2C_Init+0x138>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1e59      	subs	r1, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5e:	e051      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003c60:	2304      	movs	r3, #4
 8003c62:	e04f      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d111      	bne.n	8003c90 <HAL_I2C_Init+0x168>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	440b      	add	r3, r1
 8003c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e012      	b.n	8003cb6 <HAL_I2C_Init+0x18e>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	0099      	lsls	r1, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Init+0x196>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e022      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_I2C_Init+0x1bc>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1e58      	subs	r0, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	440b      	add	r3, r1
 8003cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce2:	e00f      	b.n	8003d04 <HAL_I2C_Init+0x1dc>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1e58      	subs	r0, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	0099      	lsls	r1, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	6809      	ldr	r1, [r1, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6911      	ldr	r1, [r2, #16]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68d2      	ldr	r2, [r2, #12]
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	000186a0 	.word	0x000186a0
 8003da0:	001e847f 	.word	0x001e847f
 8003da4:	003d08ff 	.word	0x003d08ff
 8003da8:	431bde83 	.word	0x431bde83
 8003dac:	10624dd3 	.word	0x10624dd3

08003db0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	4608      	mov	r0, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	817b      	strh	r3, [r7, #10]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	813b      	strh	r3, [r7, #8]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dca:	f7fe fc45 	bl	8002658 <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	f040 80d9 	bne.w	8003f90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2319      	movs	r3, #25
 8003de4:	2201      	movs	r2, #1
 8003de6:	496d      	ldr	r1, [pc, #436]	; (8003f9c <HAL_I2C_Mem_Write+0x1ec>)
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fc7f 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0cc      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Mem_Write+0x56>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e0c5      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d007      	beq.n	8003e2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2221      	movs	r2, #33	; 0x21
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a4d      	ldr	r2, [pc, #308]	; (8003fa0 <HAL_I2C_Mem_Write+0x1f0>)
 8003e6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6e:	88f8      	ldrh	r0, [r7, #6]
 8003e70:	893a      	ldrh	r2, [r7, #8]
 8003e72:	8979      	ldrh	r1, [r7, #10]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fab6 	bl	80043f0 <I2C_RequestMemoryWrite>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d052      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e081      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fd00 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06b      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d11b      	bne.n	8003f30 <HAL_I2C_Mem_Write+0x180>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d017      	beq.n	8003f30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1aa      	bne.n	8003e8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fcec 	bl	800491a <I2C_WaitOnBTFFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d107      	bne.n	8003f60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e016      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000

08003fa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	4608      	mov	r0, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	813b      	strh	r3, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbe:	f7fe fb4b 	bl	8002658 <HAL_GetTick>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	f040 8208 	bne.w	80043e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2319      	movs	r3, #25
 8003fd8:	2201      	movs	r2, #1
 8003fda:	497b      	ldr	r1, [pc, #492]	; (80041c8 <HAL_I2C_Mem_Read+0x224>)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fb85 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e1fb      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x56>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e1f4      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d007      	beq.n	8004020 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2222      	movs	r2, #34	; 0x22
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a5b      	ldr	r2, [pc, #364]	; (80041cc <HAL_I2C_Mem_Read+0x228>)
 8004060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004062:	88f8      	ldrh	r0, [r7, #6]
 8004064:	893a      	ldrh	r2, [r7, #8]
 8004066:	8979      	ldrh	r1, [r7, #10]
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fa52 	bl	800451c <I2C_RequestMemoryRead>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e1b0      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d113      	bne.n	80040b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e184      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d11b      	bne.n	80040f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e164      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d11b      	bne.n	8004132 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004108:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	e144      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004148:	e138      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	2b03      	cmp	r3, #3
 8004150:	f200 80f1 	bhi.w	8004336 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	2b01      	cmp	r3, #1
 800415a:	d123      	bne.n	80041a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fc1b 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e139      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a2:	e10b      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d14e      	bne.n	800424a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	2200      	movs	r2, #0
 80041b4:	4906      	ldr	r1, [pc, #24]	; (80041d0 <HAL_I2C_Mem_Read+0x22c>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fa98 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e10e      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
 80041c6:	bf00      	nop
 80041c8:	00100002 	.word	0x00100002
 80041cc:	ffff0000 	.word	0xffff0000
 80041d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004248:	e0b8      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2200      	movs	r2, #0
 8004252:	4966      	ldr	r1, [pc, #408]	; (80043ec <HAL_I2C_Mem_Read+0x448>)
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fa49 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0bf      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2200      	movs	r2, #0
 80042ae:	494f      	ldr	r1, [pc, #316]	; (80043ec <HAL_I2C_Mem_Read+0x448>)
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fa1b 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e091      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004334:	e042      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fb2e 	bl	800499c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e04c      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d118      	bne.n	80043bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f aec2 	bne.w	800414a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	00010004 	.word	0x00010004

080043f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2200      	movs	r2, #0
 8004422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f960 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004440:	d103      	bne.n	800444a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e05f      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800445c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	6a3a      	ldr	r2, [r7, #32]
 8004462:	492d      	ldr	r1, [pc, #180]	; (8004518 <I2C_RequestMemoryWrite+0x128>)
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f998 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e04c      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	6a39      	ldr	r1, [r7, #32]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fa02 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d107      	bne.n	80044b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e02b      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]
 80044c6:	e021      	b.n	800450c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044c8:	893b      	ldrh	r3, [r7, #8]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	6a39      	ldr	r1, [r7, #32]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f9dc 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d107      	bne.n	80044fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e005      	b.n	800450e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	00010002 	.word	0x00010002

0800451c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	817b      	strh	r3, [r7, #10]
 800452e:	460b      	mov	r3, r1
 8004530:	813b      	strh	r3, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2200      	movs	r2, #0
 800455e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f8c2 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	d103      	bne.n	8004586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e0aa      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800458a:	897b      	ldrh	r3, [r7, #10]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	4952      	ldr	r1, [pc, #328]	; (80046e8 <I2C_RequestMemoryRead+0x1cc>)
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f8fa 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e097      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6a39      	ldr	r1, [r7, #32]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f964 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d107      	bne.n	80045ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e076      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045f8:	893b      	ldrh	r3, [r7, #8]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]
 8004602:	e021      	b.n	8004648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004604:	893b      	ldrh	r3, [r7, #8]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	b29b      	uxth	r3, r3
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	6a39      	ldr	r1, [r7, #32]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f93e 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b04      	cmp	r3, #4
 8004628:	d107      	bne.n	800463a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e050      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800463e:	893b      	ldrh	r3, [r7, #8]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	6a39      	ldr	r1, [r7, #32]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f923 	bl	8004898 <I2C_WaitOnTXEFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2b04      	cmp	r3, #4
 800465e:	d107      	bne.n	8004670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e035      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	2200      	movs	r2, #0
 800468c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f82b 	bl	80046ec <I2C_WaitOnFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046aa:	d103      	bne.n	80046b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e013      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046b8:	897b      	ldrh	r3, [r7, #10]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	4906      	ldr	r1, [pc, #24]	; (80046e8 <I2C_RequestMemoryRead+0x1cc>)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f863 	bl	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	00010002 	.word	0x00010002

080046ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046fc:	e025      	b.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d021      	beq.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fd ffa7 	bl	8002658 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d116      	bne.n	800474a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e023      	b.n	8004792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d10d      	bne.n	8004770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	e00c      	b.n	800478a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	429a      	cmp	r2, r3
 800478e:	d0b6      	beq.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a8:	e051      	b.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	d123      	bne.n	8004802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e046      	b.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d021      	beq.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fd ff25 	bl	8002658 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d116      	bne.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f043 0220 	orr.w	r2, r3, #32
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e020      	b.n	8004890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10c      	bne.n	8004872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	43da      	mvns	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	bf14      	ite	ne
 800486a:	2301      	movne	r3, #1
 800486c:	2300      	moveq	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	e00b      	b.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d18d      	bne.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a4:	e02d      	b.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f8ce 	bl	8004a48 <I2C_IsAcknowledgeFailed>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02d      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d021      	beq.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fd fecb 	bl	8002658 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e007      	b.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d1ca      	bne.n	80048a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004926:	e02d      	b.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f88d 	bl	8004a48 <I2C_IsAcknowledgeFailed>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e02d      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d021      	beq.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004940:	f7fd fe8a 	bl	8002658 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d302      	bcc.n	8004956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d116      	bne.n	8004984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e007      	b.n	8004994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b04      	cmp	r3, #4
 8004990:	d1ca      	bne.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a8:	e042      	b.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d119      	bne.n	80049ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0210 	mvn.w	r2, #16
 80049c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e029      	b.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ec:	f7fd fe34 	bl	8002658 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e007      	b.n	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d1b5      	bne.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d11b      	bne.n	8004a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f043 0204 	orr.w	r2, r3, #4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d129      	bne.n	8004b10 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0210 	bic.w	r2, r2, #16
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d12a      	bne.n	8004b8e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2224      	movs	r2, #36	; 0x24
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b58:	89fb      	ldrh	r3, [r7, #14]
 8004b5a:	f023 030f 	bic.w	r3, r3, #15
 8004b5e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	89fb      	ldrh	r3, [r7, #14]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	89fa      	ldrh	r2, [r7, #14]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0201 	orr.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e000      	b.n	8004b90 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9e:	b08f      	sub	sp, #60	; 0x3c
 8004ba0:	af0a      	add	r7, sp, #40	; 0x28
 8004ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e10f      	b.n	8004dce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f00a f819 	bl	800ec00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f003 fa2a 	bl	8008046 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	687e      	ldr	r6, [r7, #4]
 8004bfa:	466d      	mov	r5, sp
 8004bfc:	f106 0410 	add.w	r4, r6, #16
 8004c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c10:	1d33      	adds	r3, r6, #4
 8004c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c14:	6838      	ldr	r0, [r7, #0]
 8004c16:	f003 f901 	bl	8007e1c <USB_CoreInit>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0d0      	b.n	8004dce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2100      	movs	r1, #0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 fa18 	bl	8008068 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	73fb      	strb	r3, [r7, #15]
 8004c3c:	e04a      	b.n	8004cd4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	333d      	adds	r3, #61	; 0x3d
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	333c      	adds	r3, #60	; 0x3c
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c66:	7bfa      	ldrb	r2, [r7, #15]
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	b298      	uxth	r0, r3
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3342      	adds	r3, #66	; 0x42
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	333f      	adds	r3, #63	; 0x3f
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3344      	adds	r3, #68	; 0x44
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ca6:	7bfa      	ldrb	r2, [r7, #15]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	1a9b      	subs	r3, r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3348      	adds	r3, #72	; 0x48
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3350      	adds	r3, #80	; 0x50
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d3af      	bcc.n	8004c3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
 8004ce2:	e044      	b.n	8004d6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ce4:	7bfa      	ldrb	r2, [r7, #15]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cfa:	7bfa      	ldrb	r2, [r7, #15]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d3c:	7bfa      	ldrb	r2, [r7, #15]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d3b5      	bcc.n	8004ce4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	687e      	ldr	r6, [r7, #4]
 8004d80:	466d      	mov	r5, sp
 8004d82:	f106 0410 	add.w	r4, r6, #16
 8004d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d92:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d96:	1d33      	adds	r3, r6, #4
 8004d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d9a:	6838      	ldr	r0, [r7, #0]
 8004d9c:	f003 f98e 	bl	80080bc <USB_DevInit>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e00d      	b.n	8004dce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f004 f9d6 	bl	8009178 <USB_DevDisconnect>

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_PCD_Start+0x1c>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e020      	b.n	8004e34 <HAL_PCD_Start+0x5e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d109      	bne.n	8004e16 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d005      	beq.n	8004e16 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f003 f902 	bl	8008024 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 f986 	bl	8009136 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b08d      	sub	sp, #52	; 0x34
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f004 fa44 	bl	80092e0 <USB_GetMode>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 839d 	bne.w	800559a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 f9a8 	bl	80091ba <USB_ReadInterrupts>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8393 	beq.w	8005598 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f004 f99f 	bl	80091ba <USB_ReadInterrupts>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d107      	bne.n	8004e96 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f002 0202 	and.w	r2, r2, #2
 8004e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 f98d 	bl	80091ba <USB_ReadInterrupts>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d161      	bne.n	8004f6e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0210 	bic.w	r2, r2, #16
 8004eb8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	0c5b      	lsrs	r3, r3, #17
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d124      	bne.n	8004f30 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d035      	beq.n	8004f5e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	6a38      	ldr	r0, [r7, #32]
 8004f06:	f003 fff3 	bl	8008ef0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f16:	441a      	add	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f28:	441a      	add	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	619a      	str	r2, [r3, #24]
 8004f2e:	e016      	b.n	8004f5e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	0c5b      	lsrs	r3, r3, #17
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	2b06      	cmp	r3, #6
 8004f3a:	d110      	bne.n	8004f5e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f42:	2208      	movs	r2, #8
 8004f44:	4619      	mov	r1, r3
 8004f46:	6a38      	ldr	r0, [r7, #32]
 8004f48:	f003 ffd2 	bl	8008ef0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f58:	441a      	add	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0210 	orr.w	r2, r2, #16
 8004f6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f004 f921 	bl	80091ba <USB_ReadInterrupts>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f82:	d16e      	bne.n	8005062 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f004 f927 	bl	80091e0 <USB_ReadDevAllOutEpInterrupt>
 8004f92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f94:	e062      	b.n	800505c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d057      	beq.n	8005050 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f004 f94c 	bl	8009248 <USB_ReadDevOutEPInterrupt>
 8004fb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2301      	movs	r3, #1
 8004fcc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fd99 	bl	8005b08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	2308      	movs	r3, #8
 8004ff0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fe93 	bl	8005d20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	2310      	movs	r3, #16
 8005014:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	461a      	mov	r2, r3
 800502e:	2320      	movs	r3, #32
 8005030:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800504e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	3301      	adds	r3, #1
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	2b00      	cmp	r3, #0
 8005060:	d199      	bne.n	8004f96 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f004 f8a7 	bl	80091ba <USB_ReadInterrupts>
 800506c:	4603      	mov	r3, r0
 800506e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005076:	f040 80c0 	bne.w	80051fa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f004 f8c8 	bl	8009214 <USB_ReadDevAllInEpInterrupt>
 8005084:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800508a:	e0b2      	b.n	80051f2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80a7 	beq.w	80051e6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 f8ee 	bl	8009284 <USB_ReadDevInEPInterrupt>
 80050a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d057      	beq.n	8005164 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	2201      	movs	r2, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69f9      	ldr	r1, [r7, #28]
 80050d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d4:	4013      	ands	r3, r2
 80050d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	461a      	mov	r2, r3
 80050e6:	2301      	movs	r3, #1
 80050e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d132      	bne.n	8005158 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3348      	adds	r3, #72	; 0x48
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4403      	add	r3, r0
 8005112:	3344      	adds	r3, #68	; 0x44
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4419      	add	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	4613      	mov	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4403      	add	r3, r0
 8005126:	3348      	adds	r3, #72	; 0x48
 8005128:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d113      	bne.n	8005158 <HAL_PCD_IRQHandler+0x31c>
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3350      	adds	r3, #80	; 0x50
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d108      	bne.n	8005158 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005150:	461a      	mov	r2, r3
 8005152:	2101      	movs	r1, #1
 8005154:	f004 f8f6 	bl	8009344 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	b2db      	uxtb	r3, r3
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f009 fdcf 	bl	800ed02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	461a      	mov	r2, r3
 800517c:	2308      	movs	r3, #8
 800517e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	461a      	mov	r2, r3
 8005198:	2310      	movs	r3, #16
 800519a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	461a      	mov	r2, r3
 80051b4:	2340      	movs	r3, #64	; 0x40
 80051b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	461a      	mov	r2, r3
 80051d0:	2302      	movs	r3, #2
 80051d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fc03 	bl	80059ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	3301      	adds	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	085b      	lsrs	r3, r3, #1
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f47f af49 	bne.w	800508c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f003 ffdb 	bl	80091ba <USB_ReadInterrupts>
 8005204:	4603      	mov	r3, r0
 8005206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520e:	d122      	bne.n	8005256 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521e:	f023 0301 	bic.w	r3, r3, #1
 8005222:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800522a:	2b01      	cmp	r3, #1
 800522c:	d108      	bne.n	8005240 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005236:	2100      	movs	r1, #0
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fe0f 	bl	8005e5c <HAL_PCDEx_LPM_Callback>
 800523e:	e002      	b.n	8005246 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f009 fdd5 	bl	800edf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005254:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f003 ffad 	bl	80091ba <USB_ReadInterrupts>
 8005260:	4603      	mov	r3, r0
 8005262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526a:	d112      	bne.n	8005292 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d102      	bne.n	8005282 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f009 fd91 	bl	800eda4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005290:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f003 ff8f 	bl	80091ba <USB_ReadInterrupts>
 800529c:	4603      	mov	r3, r0
 800529e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	f040 80c7 	bne.w	8005438 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2110      	movs	r1, #16
 80052c4:	4618      	mov	r0, r3
 80052c6:	f003 f85d 	bl	8008384 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ce:	e056      	b.n	800537e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	461a      	mov	r2, r3
 80052de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005302:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005322:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005330:	461a      	mov	r2, r3
 8005332:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005336:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005356:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005376:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	3301      	adds	r3, #1
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005384:	429a      	cmp	r2, r3
 8005386:	d3a3      	bcc.n	80052d0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005396:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800539a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d016      	beq.n	80053d2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b4:	f043 030b 	orr.w	r3, r3, #11
 80053b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f043 030b 	orr.w	r3, r3, #11
 80053ce:	6453      	str	r3, [r2, #68]	; 0x44
 80053d0:	e015      	b.n	80053fe <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053e4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80053e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f8:	f043 030b 	orr.w	r3, r3, #11
 80053fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800540c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005410:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005422:	461a      	mov	r2, r3
 8005424:	f003 ff8e 	bl	8009344 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695a      	ldr	r2, [r3, #20]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005436:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f003 febc 	bl	80091ba <USB_ReadInterrupts>
 8005442:	4603      	mov	r3, r0
 8005444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544c:	d124      	bne.n	8005498 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f003 ff52 	bl	80092fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f002 fff2 	bl	8008446 <USB_GetDevSpeed>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681c      	ldr	r4, [r3, #0]
 800546e:	f001 f941 	bl	80066f4 <HAL_RCC_GetHCLKFreq>
 8005472:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	4620      	mov	r0, r4
 800547e:	f002 fd2f 	bl	8007ee0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f009 fc65 	bl	800ed52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005496:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f003 fe8c 	bl	80091ba <USB_ReadInterrupts>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d10a      	bne.n	80054c2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f009 fc42 	bl	800ed36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f002 0208 	and.w	r2, r2, #8
 80054c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 fe77 	bl	80091ba <USB_ReadInterrupts>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d6:	d10f      	bne.n	80054f8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f009 fca4 	bl	800ee30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80054f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f003 fe5c 	bl	80091ba <USB_ReadInterrupts>
 8005502:	4603      	mov	r3, r0
 8005504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800550c:	d10f      	bne.n	800552e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	b2db      	uxtb	r3, r3
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f009 fc77 	bl	800ee0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800552c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f003 fe41 	bl	80091ba <USB_ReadInterrupts>
 8005538:	4603      	mov	r3, r0
 800553a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800553e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005542:	d10a      	bne.n	800555a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f009 fc85 	bl	800ee54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f003 fe2b 	bl	80091ba <USB_ReadInterrupts>
 8005564:	4603      	mov	r3, r0
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b04      	cmp	r3, #4
 800556c:	d115      	bne.n	800559a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f009 fc75 	bl	800ee70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	e000      	b.n	800559a <HAL_PCD_IRQHandler+0x75e>
      return;
 8005598:	bf00      	nop
    }
  }
}
 800559a:	3734      	adds	r7, #52	; 0x34
 800559c:	46bd      	mov	sp, r7
 800559e:	bd90      	pop	{r4, r7, pc}

080055a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_PCD_SetAddress+0x1a>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e013      	b.n	80055e2 <HAL_PCD_SetAddress+0x42>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f003 fd89 	bl	80090ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	4608      	mov	r0, r1
 80055f4:	4611      	mov	r1, r2
 80055f6:	461a      	mov	r2, r3
 80055f8:	4603      	mov	r3, r0
 80055fa:	70fb      	strb	r3, [r7, #3]
 80055fc:	460b      	mov	r3, r1
 80055fe:	803b      	strh	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800560c:	2b00      	cmp	r3, #0
 800560e:	da0f      	bge.n	8005630 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	3338      	adds	r3, #56	; 0x38
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	4413      	add	r3, r2
 8005624:	3304      	adds	r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	705a      	strb	r2, [r3, #1]
 800562e:	e00f      	b.n	8005650 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 020f 	and.w	r2, r3, #15
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	b2da      	uxtb	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800565c:	883a      	ldrh	r2, [r7, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	78ba      	ldrb	r2, [r7, #2]
 8005666:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800567a:	78bb      	ldrb	r3, [r7, #2]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d102      	bne.n	8005686 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_PCD_EP_Open+0xaa>
 8005690:	2302      	movs	r3, #2
 8005692:	e00e      	b.n	80056b2 <HAL_PCD_EP_Open+0xc8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f002 fef4 	bl	8008490 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80056b0:	7afb      	ldrb	r3, [r7, #11]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	da0f      	bge.n	80056ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	f003 020f 	and.w	r2, r3, #15
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	3338      	adds	r3, #56	; 0x38
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	3304      	adds	r3, #4
 80056e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	705a      	strb	r2, [r3, #1]
 80056ec:	e00f      	b.n	800570e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	f003 020f 	and.w	r2, r3, #15
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	3304      	adds	r3, #4
 8005706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_PCD_EP_Close+0x6e>
 8005724:	2302      	movs	r3, #2
 8005726:	e00e      	b.n	8005746 <HAL_PCD_EP_Close+0x8c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	4618      	mov	r0, r3
 8005738:	f002 ff32 	bl	80085a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b086      	sub	sp, #24
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	460b      	mov	r3, r1
 800575c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800575e:	7afb      	ldrb	r3, [r7, #11]
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	3304      	adds	r3, #4
 8005776:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2200      	movs	r2, #0
 8005788:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2200      	movs	r2, #0
 800578e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005790:	7afb      	ldrb	r3, [r7, #11]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	b2da      	uxtb	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d102      	bne.n	80057aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057aa:	7afb      	ldrb	r3, [r7, #11]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	6979      	ldr	r1, [r7, #20]
 80057c2:	f003 fa0d 	bl	8008be0 <USB_EP0StartXfer>
 80057c6:	e008      	b.n	80057da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	f002 ffbf 	bl	8008758 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	460b      	mov	r3, r1
 80057f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	f003 020f 	and.w	r2, r3, #15
 80057fa:	4613      	mov	r3, r2
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	3338      	adds	r3, #56	; 0x38
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	3304      	adds	r3, #4
 800580a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2200      	movs	r2, #0
 800581c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2201      	movs	r2, #1
 8005822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005824:	7afb      	ldrb	r3, [r7, #11]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	b2da      	uxtb	r2, r3
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d102      	bne.n	800583e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	461a      	mov	r2, r3
 8005854:	6979      	ldr	r1, [r7, #20]
 8005856:	f003 f9c3 	bl	8008be0 <USB_EP0StartXfer>
 800585a:	e008      	b.n	800586e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	6979      	ldr	r1, [r7, #20]
 800586a:	f002 ff75 	bl	8008758 <USB_EPStartXfer>
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	f003 020f 	and.w	r2, r3, #15
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	429a      	cmp	r2, r3
 8005890:	d901      	bls.n	8005896 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e050      	b.n	8005938 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800589a:	2b00      	cmp	r3, #0
 800589c:	da0f      	bge.n	80058be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	f003 020f 	and.w	r2, r3, #15
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	3338      	adds	r3, #56	; 0x38
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	3304      	adds	r3, #4
 80058b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	705a      	strb	r2, [r3, #1]
 80058bc:	e00d      	b.n	80058da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058be:	78fa      	ldrb	r2, [r7, #3]
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_PCD_EP_SetStall+0x82>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e01e      	b.n	8005938 <HAL_PCD_EP_SetStall+0xc0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fb1a 	bl	8008f42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	b2d9      	uxtb	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005928:	461a      	mov	r2, r3
 800592a:	f003 fd0b 	bl	8009344 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d901      	bls.n	800595e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e042      	b.n	80059e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800595e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da0f      	bge.n	8005986 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	f003 020f 	and.w	r2, r3, #15
 800596c:	4613      	mov	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	3338      	adds	r3, #56	; 0x38
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	3304      	adds	r3, #4
 800597c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	705a      	strb	r2, [r3, #1]
 8005984:	e00f      	b.n	80059a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	f003 020f 	and.w	r2, r3, #15
 800598c:	4613      	mov	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	4413      	add	r3, r2
 800599c:	3304      	adds	r3, #4
 800599e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_PCD_EP_ClrStall+0x86>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e00e      	b.n	80059e4 <HAL_PCD_EP_ClrStall+0xa4>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f003 fb22 	bl	800901e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	; 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	3338      	adds	r3, #56	; 0x38
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d901      	bls.n	8005a24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e06c      	b.n	8005afe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	695a      	ldr	r2, [r3, #20]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d902      	bls.n	8005a40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3303      	adds	r3, #3
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a48:	e02b      	b.n	8005aa2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d902      	bls.n	8005a66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3303      	adds	r3, #3
 8005a6a:	089b      	lsrs	r3, r3, #2
 8005a6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68d9      	ldr	r1, [r3, #12]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4603      	mov	r3, r0
 8005a84:	6978      	ldr	r0, [r7, #20]
 8005a86:	f003 f9fe 	bl	8008e86 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	441a      	add	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	441a      	add	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d809      	bhi.n	8005acc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	699a      	ldr	r2, [r3, #24]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d203      	bcs.n	8005acc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1be      	bne.n	8005a4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d811      	bhi.n	8005afc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	2201      	movs	r2, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	6939      	ldr	r1, [r7, #16]
 8005af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af8:	4013      	ands	r3, r2
 8005afa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	333c      	adds	r3, #60	; 0x3c
 8005b20:	3304      	adds	r3, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	f040 80a0 	bne.w	8005c80 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d015      	beq.n	8005b76 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4a72      	ldr	r2, [pc, #456]	; (8005d18 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	f240 80dd 	bls.w	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80d7 	beq.w	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b72:	6093      	str	r3, [r2, #8]
 8005b74:	e0cb      	b.n	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2320      	movs	r3, #32
 8005b90:	6093      	str	r3, [r2, #8]
 8005b92:	e0bc      	b.n	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 80b7 	bne.w	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a5d      	ldr	r2, [pc, #372]	; (8005d18 <PCD_EP_OutXfrComplete_int+0x210>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d90f      	bls.n	8005bc8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc4:	6093      	str	r3, [r2, #8]
 8005bc6:	e0a2      	b.n	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bda:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	0159      	lsls	r1, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	440b      	add	r3, r1
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005bee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4403      	add	r3, r0
 8005bfe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005c02:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4403      	add	r3, r0
 8005c26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4419      	add	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4403      	add	r3, r0
 8005c3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c40:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d114      	bne.n	8005c72 <PCD_EP_OutXfrComplete_int+0x16a>
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d108      	bne.n	8005c72 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	f003 fb69 	bl	8009344 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f009 f827 	bl	800eccc <HAL_PCD_DataOutStageCallback>
 8005c7e:	e046      	b.n	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a26      	ldr	r2, [pc, #152]	; (8005d1c <PCD_EP_OutXfrComplete_int+0x214>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d124      	bne.n	8005cd2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ca4:	6093      	str	r3, [r2, #8]
 8005ca6:	e032      	b.n	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f008 fffe 	bl	800eccc <HAL_PCD_DataOutStageCallback>
 8005cd0:	e01d      	b.n	8005d0e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d114      	bne.n	8005d02 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d108      	bne.n	8005d02 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	f003 fb21 	bl	8009344 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f008 ffdf 	bl	800eccc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	4f54300a 	.word	0x4f54300a
 8005d1c:	4f54310a 	.word	0x4f54310a

08005d20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	333c      	adds	r3, #60	; 0x3c
 8005d38:	3304      	adds	r3, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d90e      	bls.n	8005d74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f008 ff97 	bl	800eca8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d90c      	bls.n	8005d9c <PCD_EP_OutSetupPacket_int+0x7c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d108      	bne.n	8005d9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d94:	461a      	mov	r2, r3
 8005d96:	2101      	movs	r1, #1
 8005d98:	f003 fad4 	bl	8009344 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	4f54300a 	.word	0x4f54300a

08005dac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
 8005db8:	4613      	mov	r3, r2
 8005dba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d107      	bne.n	8005dda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005dca:	883b      	ldrh	r3, [r7, #0]
 8005dcc:	0419      	lsls	r1, r3, #16
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8005dd8:	e028      	b.n	8005e2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4413      	add	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e00d      	b.n	8005e0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	3340      	adds	r3, #64	; 0x40
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4413      	add	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	3301      	adds	r3, #1
 8005e08:	73fb      	strb	r3, [r7, #15]
 8005e0a:	7bfa      	ldrb	r2, [r7, #15]
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d3ec      	bcc.n	8005dee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e14:	883b      	ldrh	r3, [r7, #0]
 8005e16:	0418      	lsls	r0, r3, #16
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	4302      	orrs	r2, r0
 8005e24:	3340      	adds	r3, #64	; 0x40
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	887a      	ldrh	r2, [r7, #2]
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e264      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d075      	beq.n	8005f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e92:	4ba3      	ldr	r3, [pc, #652]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 030c 	and.w	r3, r3, #12
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d00c      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e9e:	4ba0      	ldr	r3, [pc, #640]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d112      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eaa:	4b9d      	ldr	r3, [pc, #628]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eb6:	d10b      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	4b99      	ldr	r3, [pc, #612]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d05b      	beq.n	8005f7c <HAL_RCC_OscConfig+0x108>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d157      	bne.n	8005f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e23f      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed8:	d106      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x74>
 8005eda:	4b91      	ldr	r3, [pc, #580]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a90      	ldr	r2, [pc, #576]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e01d      	b.n	8005f24 <HAL_RCC_OscConfig+0xb0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef0:	d10c      	bne.n	8005f0c <HAL_RCC_OscConfig+0x98>
 8005ef2:	4b8b      	ldr	r3, [pc, #556]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a8a      	ldr	r2, [pc, #552]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	4b88      	ldr	r3, [pc, #544]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a87      	ldr	r2, [pc, #540]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	e00b      	b.n	8005f24 <HAL_RCC_OscConfig+0xb0>
 8005f0c:	4b84      	ldr	r3, [pc, #528]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a83      	ldr	r2, [pc, #524]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	4b81      	ldr	r3, [pc, #516]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a80      	ldr	r2, [pc, #512]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d013      	beq.n	8005f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2c:	f7fc fb94 	bl	8002658 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f34:	f7fc fb90 	bl	8002658 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b64      	cmp	r3, #100	; 0x64
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e204      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f46:	4b76      	ldr	r3, [pc, #472]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0f0      	beq.n	8005f34 <HAL_RCC_OscConfig+0xc0>
 8005f52:	e014      	b.n	8005f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f54:	f7fc fb80 	bl	8002658 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fc fb7c 	bl	8002658 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e1f0      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f6e:	4b6c      	ldr	r3, [pc, #432]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f0      	bne.n	8005f5c <HAL_RCC_OscConfig+0xe8>
 8005f7a:	e000      	b.n	8005f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d063      	beq.n	8006052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f8a:	4b65      	ldr	r3, [pc, #404]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 030c 	and.w	r3, r3, #12
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f96:	4b62      	ldr	r3, [pc, #392]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d11c      	bne.n	8005fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fa2:	4b5f      	ldr	r3, [pc, #380]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d116      	bne.n	8005fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fae:	4b5c      	ldr	r3, [pc, #368]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x152>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e1c4      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc6:	4b56      	ldr	r3, [pc, #344]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4952      	ldr	r1, [pc, #328]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fda:	e03a      	b.n	8006052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d020      	beq.n	8006026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe4:	4b4f      	ldr	r3, [pc, #316]	; (8006124 <HAL_RCC_OscConfig+0x2b0>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fea:	f7fc fb35 	bl	8002658 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff2:	f7fc fb31 	bl	8002658 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e1a5      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006004:	4b46      	ldr	r3, [pc, #280]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006010:	4b43      	ldr	r3, [pc, #268]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4940      	ldr	r1, [pc, #256]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8006020:	4313      	orrs	r3, r2
 8006022:	600b      	str	r3, [r1, #0]
 8006024:	e015      	b.n	8006052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006026:	4b3f      	ldr	r3, [pc, #252]	; (8006124 <HAL_RCC_OscConfig+0x2b0>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602c:	f7fc fb14 	bl	8002658 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006034:	f7fc fb10 	bl	8002658 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e184      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006046:	4b36      	ldr	r3, [pc, #216]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d030      	beq.n	80060c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d016      	beq.n	8006094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006066:	4b30      	ldr	r3, [pc, #192]	; (8006128 <HAL_RCC_OscConfig+0x2b4>)
 8006068:	2201      	movs	r2, #1
 800606a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606c:	f7fc faf4 	bl	8002658 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006074:	f7fc faf0 	bl	8002658 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e164      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006086:	4b26      	ldr	r3, [pc, #152]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCC_OscConfig+0x200>
 8006092:	e015      	b.n	80060c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <HAL_RCC_OscConfig+0x2b4>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609a:	f7fc fadd 	bl	8002658 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a2:	f7fc fad9 	bl	8002658 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e14d      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 80060b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f0      	bne.n	80060a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80a0 	beq.w	800620e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ce:	2300      	movs	r3, #0
 80060d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060d2:	4b13      	ldr	r3, [pc, #76]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10f      	bne.n	80060fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 80060e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ec:	6413      	str	r3, [r2, #64]	; 0x40
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f6:	60bb      	str	r3, [r7, #8]
 80060f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060fa:	2301      	movs	r3, #1
 80060fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <HAL_RCC_OscConfig+0x2b8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d121      	bne.n	800614e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800610a:	4b08      	ldr	r3, [pc, #32]	; (800612c <HAL_RCC_OscConfig+0x2b8>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a07      	ldr	r2, [pc, #28]	; (800612c <HAL_RCC_OscConfig+0x2b8>)
 8006110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006116:	f7fc fa9f 	bl	8002658 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611c:	e011      	b.n	8006142 <HAL_RCC_OscConfig+0x2ce>
 800611e:	bf00      	nop
 8006120:	40023800 	.word	0x40023800
 8006124:	42470000 	.word	0x42470000
 8006128:	42470e80 	.word	0x42470e80
 800612c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006130:	f7fc fa92 	bl	8002658 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e106      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006142:	4b85      	ldr	r3, [pc, #532]	; (8006358 <HAL_RCC_OscConfig+0x4e4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0f0      	beq.n	8006130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d106      	bne.n	8006164 <HAL_RCC_OscConfig+0x2f0>
 8006156:	4b81      	ldr	r3, [pc, #516]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	4a80      	ldr	r2, [pc, #512]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6713      	str	r3, [r2, #112]	; 0x70
 8006162:	e01c      	b.n	800619e <HAL_RCC_OscConfig+0x32a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2b05      	cmp	r3, #5
 800616a:	d10c      	bne.n	8006186 <HAL_RCC_OscConfig+0x312>
 800616c:	4b7b      	ldr	r3, [pc, #492]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	4a7a      	ldr	r2, [pc, #488]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 8006172:	f043 0304 	orr.w	r3, r3, #4
 8006176:	6713      	str	r3, [r2, #112]	; 0x70
 8006178:	4b78      	ldr	r3, [pc, #480]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	4a77      	ldr	r2, [pc, #476]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6713      	str	r3, [r2, #112]	; 0x70
 8006184:	e00b      	b.n	800619e <HAL_RCC_OscConfig+0x32a>
 8006186:	4b75      	ldr	r3, [pc, #468]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	4a74      	ldr	r2, [pc, #464]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	6713      	str	r3, [r2, #112]	; 0x70
 8006192:	4b72      	ldr	r3, [pc, #456]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4a71      	ldr	r2, [pc, #452]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 8006198:	f023 0304 	bic.w	r3, r3, #4
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d015      	beq.n	80061d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a6:	f7fc fa57 	bl	8002658 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ac:	e00a      	b.n	80061c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ae:	f7fc fa53 	bl	8002658 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e0c5      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c4:	4b65      	ldr	r3, [pc, #404]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0ee      	beq.n	80061ae <HAL_RCC_OscConfig+0x33a>
 80061d0:	e014      	b.n	80061fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d2:	f7fc fa41 	bl	8002658 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fc fa3d 	bl	8002658 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0af      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061f0:	4b5a      	ldr	r3, [pc, #360]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ee      	bne.n	80061da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d105      	bne.n	800620e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006202:	4b56      	ldr	r3, [pc, #344]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	4a55      	ldr	r2, [pc, #340]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 8006208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 809b 	beq.w	800634e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006218:	4b50      	ldr	r3, [pc, #320]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b08      	cmp	r3, #8
 8006222:	d05c      	beq.n	80062de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d141      	bne.n	80062b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622c:	4b4c      	ldr	r3, [pc, #304]	; (8006360 <HAL_RCC_OscConfig+0x4ec>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006232:	f7fc fa11 	bl	8002658 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800623a:	f7fc fa0d 	bl	8002658 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e081      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624c:	4b43      	ldr	r3, [pc, #268]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f0      	bne.n	800623a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	019b      	lsls	r3, r3, #6
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	3b01      	subs	r3, #1
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	061b      	lsls	r3, r3, #24
 800627c:	4937      	ldr	r1, [pc, #220]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006282:	4b37      	ldr	r3, [pc, #220]	; (8006360 <HAL_RCC_OscConfig+0x4ec>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fc f9e6 	bl	8002658 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006290:	f7fc f9e2 	bl	8002658 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e056      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a2:	4b2e      	ldr	r3, [pc, #184]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0x41c>
 80062ae:	e04e      	b.n	800634e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b0:	4b2b      	ldr	r3, [pc, #172]	; (8006360 <HAL_RCC_OscConfig+0x4ec>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b6:	f7fc f9cf 	bl	8002658 <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062be:	f7fc f9cb 	bl	8002658 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e03f      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d0:	4b22      	ldr	r3, [pc, #136]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f0      	bne.n	80062be <HAL_RCC_OscConfig+0x44a>
 80062dc:	e037      	b.n	800634e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e032      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062ea:	4b1c      	ldr	r3, [pc, #112]	; (800635c <HAL_RCC_OscConfig+0x4e8>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d028      	beq.n	800634a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006302:	429a      	cmp	r2, r3
 8006304:	d121      	bne.n	800634a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006310:	429a      	cmp	r2, r3
 8006312:	d11a      	bne.n	800634a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800631a:	4013      	ands	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006320:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006322:	4293      	cmp	r3, r2
 8006324:	d111      	bne.n	800634a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	085b      	lsrs	r3, r3, #1
 8006332:	3b01      	subs	r3, #1
 8006334:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d107      	bne.n	800634a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006346:	429a      	cmp	r2, r3
 8006348:	d001      	beq.n	800634e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40007000 	.word	0x40007000
 800635c:	40023800 	.word	0x40023800
 8006360:	42470060 	.word	0x42470060

08006364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0cc      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006378:	4b68      	ldr	r3, [pc, #416]	; (800651c <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d90c      	bls.n	80063a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b65      	ldr	r3, [pc, #404]	; (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b63      	ldr	r3, [pc, #396]	; (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0b8      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d020      	beq.n	80063ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063b8:	4b59      	ldr	r3, [pc, #356]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4a58      	ldr	r2, [pc, #352]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063d0:	4b53      	ldr	r3, [pc, #332]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	4a52      	ldr	r2, [pc, #328]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063dc:	4b50      	ldr	r3, [pc, #320]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	494d      	ldr	r1, [pc, #308]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d044      	beq.n	8006484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d107      	bne.n	8006412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	4b47      	ldr	r3, [pc, #284]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d119      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e07f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d003      	beq.n	8006422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800641e:	2b03      	cmp	r3, #3
 8006420:	d107      	bne.n	8006432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006422:	4b3f      	ldr	r3, [pc, #252]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e06f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006432:	4b3b      	ldr	r3, [pc, #236]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e067      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006442:	4b37      	ldr	r3, [pc, #220]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f023 0203 	bic.w	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4934      	ldr	r1, [pc, #208]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	4313      	orrs	r3, r2
 8006452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006454:	f7fc f900 	bl	8002658 <HAL_GetTick>
 8006458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645a:	e00a      	b.n	8006472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800645c:	f7fc f8fc 	bl	8002658 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	f241 3288 	movw	r2, #5000	; 0x1388
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e04f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006472:	4b2b      	ldr	r3, [pc, #172]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 020c 	and.w	r2, r3, #12
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	429a      	cmp	r2, r3
 8006482:	d1eb      	bne.n	800645c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d20c      	bcs.n	80064ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <HAL_RCC_ClockConfig+0x1b8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e032      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064b8:	4b19      	ldr	r3, [pc, #100]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4916      	ldr	r1, [pc, #88]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064d6:	4b12      	ldr	r3, [pc, #72]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	490e      	ldr	r1, [pc, #56]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064ea:	f000 f821 	bl	8006530 <HAL_RCC_GetSysClockFreq>
 80064ee:	4602      	mov	r2, r0
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	091b      	lsrs	r3, r3, #4
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	490a      	ldr	r1, [pc, #40]	; (8006524 <HAL_RCC_ClockConfig+0x1c0>)
 80064fc:	5ccb      	ldrb	r3, [r1, r3]
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <HAL_RCC_ClockConfig+0x1c4>)
 8006504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <HAL_RCC_ClockConfig+0x1c8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fb fe2e 	bl	800216c <HAL_InitTick>

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40023c00 	.word	0x40023c00
 8006520:	40023800 	.word	0x40023800
 8006524:	080154e8 	.word	0x080154e8
 8006528:	20000008 	.word	0x20000008
 800652c:	2000000c 	.word	0x2000000c

08006530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	607b      	str	r3, [r7, #4]
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	2300      	movs	r3, #0
 8006542:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006548:	4b67      	ldr	r3, [pc, #412]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	2b08      	cmp	r3, #8
 8006552:	d00d      	beq.n	8006570 <HAL_RCC_GetSysClockFreq+0x40>
 8006554:	2b08      	cmp	r3, #8
 8006556:	f200 80bd 	bhi.w	80066d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <HAL_RCC_GetSysClockFreq+0x34>
 800655e:	2b04      	cmp	r3, #4
 8006560:	d003      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x3a>
 8006562:	e0b7      	b.n	80066d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006564:	4b61      	ldr	r3, [pc, #388]	; (80066ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006566:	60bb      	str	r3, [r7, #8]
       break;
 8006568:	e0b7      	b.n	80066da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800656a:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800656c:	60bb      	str	r3, [r7, #8]
      break;
 800656e:	e0b4      	b.n	80066da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006570:	4b5d      	ldr	r3, [pc, #372]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006578:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800657a:	4b5b      	ldr	r3, [pc, #364]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d04d      	beq.n	8006622 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006586:	4b58      	ldr	r3, [pc, #352]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	099b      	lsrs	r3, r3, #6
 800658c:	461a      	mov	r2, r3
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006596:	f04f 0100 	mov.w	r1, #0
 800659a:	ea02 0800 	and.w	r8, r2, r0
 800659e:	ea03 0901 	and.w	r9, r3, r1
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	014b      	lsls	r3, r1, #5
 80065b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065b4:	0142      	lsls	r2, r0, #5
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	ebb0 0008 	subs.w	r0, r0, r8
 80065be:	eb61 0109 	sbc.w	r1, r1, r9
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	018b      	lsls	r3, r1, #6
 80065cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065d0:	0182      	lsls	r2, r0, #6
 80065d2:	1a12      	subs	r2, r2, r0
 80065d4:	eb63 0301 	sbc.w	r3, r3, r1
 80065d8:	f04f 0000 	mov.w	r0, #0
 80065dc:	f04f 0100 	mov.w	r1, #0
 80065e0:	00d9      	lsls	r1, r3, #3
 80065e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065e6:	00d0      	lsls	r0, r2, #3
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	eb12 0208 	adds.w	r2, r2, r8
 80065f0:	eb43 0309 	adc.w	r3, r3, r9
 80065f4:	f04f 0000 	mov.w	r0, #0
 80065f8:	f04f 0100 	mov.w	r1, #0
 80065fc:	0259      	lsls	r1, r3, #9
 80065fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006602:	0250      	lsls	r0, r2, #9
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4610      	mov	r0, r2
 800660a:	4619      	mov	r1, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	461a      	mov	r2, r3
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	f7fa fb48 	bl	8000ca8 <__aeabi_uldivmod>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4613      	mov	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e04a      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006622:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	099b      	lsrs	r3, r3, #6
 8006628:	461a      	mov	r2, r3
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006632:	f04f 0100 	mov.w	r1, #0
 8006636:	ea02 0400 	and.w	r4, r2, r0
 800663a:	ea03 0501 	and.w	r5, r3, r1
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	014b      	lsls	r3, r1, #5
 800664c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006650:	0142      	lsls	r2, r0, #5
 8006652:	4610      	mov	r0, r2
 8006654:	4619      	mov	r1, r3
 8006656:	1b00      	subs	r0, r0, r4
 8006658:	eb61 0105 	sbc.w	r1, r1, r5
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	018b      	lsls	r3, r1, #6
 8006666:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800666a:	0182      	lsls	r2, r0, #6
 800666c:	1a12      	subs	r2, r2, r0
 800666e:	eb63 0301 	sbc.w	r3, r3, r1
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f04f 0100 	mov.w	r1, #0
 800667a:	00d9      	lsls	r1, r3, #3
 800667c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006680:	00d0      	lsls	r0, r2, #3
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	1912      	adds	r2, r2, r4
 8006688:	eb45 0303 	adc.w	r3, r5, r3
 800668c:	f04f 0000 	mov.w	r0, #0
 8006690:	f04f 0100 	mov.w	r1, #0
 8006694:	0299      	lsls	r1, r3, #10
 8006696:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800669a:	0290      	lsls	r0, r2, #10
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4610      	mov	r0, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	f7fa fafc 	bl	8000ca8 <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4613      	mov	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	0c1b      	lsrs	r3, r3, #16
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	3301      	adds	r3, #1
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	60bb      	str	r3, [r7, #8]
      break;
 80066d2:	e002      	b.n	80066da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066d4:	4b05      	ldr	r3, [pc, #20]	; (80066ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066d6:	60bb      	str	r3, [r7, #8]
      break;
 80066d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066da:	68bb      	ldr	r3, [r7, #8]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80066e6:	bf00      	nop
 80066e8:	40023800 	.word	0x40023800
 80066ec:	00f42400 	.word	0x00f42400
 80066f0:	007a1200 	.word	0x007a1200

080066f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f8:	4b03      	ldr	r3, [pc, #12]	; (8006708 <HAL_RCC_GetHCLKFreq+0x14>)
 80066fa:	681b      	ldr	r3, [r3, #0]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000008 	.word	0x20000008

0800670c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006710:	f7ff fff0 	bl	80066f4 <HAL_RCC_GetHCLKFreq>
 8006714:	4602      	mov	r2, r0
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	0a9b      	lsrs	r3, r3, #10
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	4903      	ldr	r1, [pc, #12]	; (8006730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006722:	5ccb      	ldrb	r3, [r1, r3]
 8006724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006728:	4618      	mov	r0, r3
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40023800 	.word	0x40023800
 8006730:	080154f8 	.word	0x080154f8

08006734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006738:	f7ff ffdc 	bl	80066f4 <HAL_RCC_GetHCLKFreq>
 800673c:	4602      	mov	r2, r0
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	0b5b      	lsrs	r3, r3, #13
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	4903      	ldr	r1, [pc, #12]	; (8006758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800674a:	5ccb      	ldrb	r3, [r1, r3]
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40023800 	.word	0x40023800
 8006758:	080154f8 	.word	0x080154f8

0800675c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	220f      	movs	r2, #15
 800676a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800676c:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <HAL_RCC_GetClockConfig+0x5c>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0203 	and.w	r2, r3, #3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <HAL_RCC_GetClockConfig+0x5c>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_RCC_GetClockConfig+0x5c>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	08db      	lsrs	r3, r3, #3
 8006796:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <HAL_RCC_GetClockConfig+0x60>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 020f 	and.w	r2, r3, #15
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	601a      	str	r2, [r3, #0]
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800
 80067bc:	40023c00 	.word	0x40023c00

080067c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e041      	b.n	8006856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fb fe42 	bl	8002470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 fbac 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	d001      	beq.n	8006878 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e046      	b.n	8006906 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a23      	ldr	r2, [pc, #140]	; (8006914 <HAL_TIM_Base_Start+0xb4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d022      	beq.n	80068d0 <HAL_TIM_Base_Start+0x70>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d01d      	beq.n	80068d0 <HAL_TIM_Base_Start+0x70>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1f      	ldr	r2, [pc, #124]	; (8006918 <HAL_TIM_Base_Start+0xb8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d018      	beq.n	80068d0 <HAL_TIM_Base_Start+0x70>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1e      	ldr	r2, [pc, #120]	; (800691c <HAL_TIM_Base_Start+0xbc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <HAL_TIM_Base_Start+0x70>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1c      	ldr	r2, [pc, #112]	; (8006920 <HAL_TIM_Base_Start+0xc0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <HAL_TIM_Base_Start+0x70>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <HAL_TIM_Base_Start+0xc4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <HAL_TIM_Base_Start+0x70>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a19      	ldr	r2, [pc, #100]	; (8006928 <HAL_TIM_Base_Start+0xc8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_TIM_Base_Start+0x70>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a18      	ldr	r2, [pc, #96]	; (800692c <HAL_TIM_Base_Start+0xcc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d111      	bne.n	80068f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b06      	cmp	r3, #6
 80068e0:	d010      	beq.n	8006904 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0201 	orr.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	e007      	b.n	8006904 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40010000 	.word	0x40010000
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00
 8006924:	40010400 	.word	0x40010400
 8006928:	40014000 	.word	0x40014000
 800692c:	40001800 	.word	0x40001800

08006930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b01      	cmp	r3, #1
 8006942:	d001      	beq.n	8006948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e04e      	b.n	80069e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d022      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006972:	d01d      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d018      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <HAL_TIM_Base_Start_IT+0xcc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d013      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <HAL_TIM_Base_Start_IT+0xd0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00e      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1b      	ldr	r2, [pc, #108]	; (8006a04 <HAL_TIM_Base_Start_IT+0xd4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d009      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a19      	ldr	r2, [pc, #100]	; (8006a08 <HAL_TIM_Base_Start_IT+0xd8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_TIM_Base_Start_IT+0x80>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <HAL_TIM_Base_Start_IT+0xdc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d111      	bne.n	80069d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b06      	cmp	r3, #6
 80069c0:	d010      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0201 	orr.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d2:	e007      	b.n	80069e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40000c00 	.word	0x40000c00
 8006a04:	40010400 	.word	0x40010400
 8006a08:	40014000 	.word	0x40014000
 8006a0c:	40001800 	.word	0x40001800

08006a10 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e041      	b.n	8006aa6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f839 	bl	8006aae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f000 fa84 	bl	8006f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d122      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d11b      	bne.n	8006b1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f06f 0202 	mvn.w	r2, #2
 8006aee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fa0b 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006b0a:	e005      	b.n	8006b18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f9fd 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa0e 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d122      	bne.n	8006b72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d11b      	bne.n	8006b72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f06f 0204 	mvn.w	r2, #4
 8006b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d003      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f9e1 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006b5e:	e005      	b.n	8006b6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f9d3 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f9e4 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b08      	cmp	r3, #8
 8006b7e:	d122      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d11b      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f06f 0208 	mvn.w	r2, #8
 8006b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f9b7 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006bb2:	e005      	b.n	8006bc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f9a9 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9ba 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d122      	bne.n	8006c1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0310 	and.w	r3, r3, #16
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d11b      	bne.n	8006c1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f06f 0210 	mvn.w	r2, #16
 8006bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2208      	movs	r2, #8
 8006bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f98d 	bl	8006f20 <HAL_TIM_IC_CaptureCallback>
 8006c06:	e005      	b.n	8006c14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f97f 	bl	8006f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f990 	bl	8006f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d10e      	bne.n	8006c46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d107      	bne.n	8006c46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f06f 0201 	mvn.w	r2, #1
 8006c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fb f989 	bl	8001f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c50:	2b80      	cmp	r3, #128	; 0x80
 8006c52:	d10e      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d107      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fd37 	bl	80076e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d10e      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d107      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f955 	bl	8006f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d10e      	bne.n	8006cca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d107      	bne.n	8006cca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f06f 0220 	mvn.w	r2, #32
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fd01 	bl	80076cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_OC_ConfigChannel+0x1a>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e046      	b.n	8006d7c <HAL_TIM_OC_ConfigChannel+0xa8>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b0c      	cmp	r3, #12
 8006cfa:	d839      	bhi.n	8006d70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <HAL_TIM_OC_ConfigChannel+0x30>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d39 	.word	0x08006d39
 8006d08:	08006d71 	.word	0x08006d71
 8006d0c:	08006d71 	.word	0x08006d71
 8006d10:	08006d71 	.word	0x08006d71
 8006d14:	08006d47 	.word	0x08006d47
 8006d18:	08006d71 	.word	0x08006d71
 8006d1c:	08006d71 	.word	0x08006d71
 8006d20:	08006d71 	.word	0x08006d71
 8006d24:	08006d55 	.word	0x08006d55
 8006d28:	08006d71 	.word	0x08006d71
 8006d2c:	08006d71 	.word	0x08006d71
 8006d30:	08006d71 	.word	0x08006d71
 8006d34:	08006d63 	.word	0x08006d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f9ac 	bl	800709c <TIM_OC1_SetConfig>
      break;
 8006d44:	e015      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fa15 	bl	800717c <TIM_OC2_SetConfig>
      break;
 8006d52:	e00e      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fa84 	bl	8007268 <TIM_OC3_SetConfig>
      break;
 8006d60:	e007      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 faf1 	bl	8007350 <TIM_OC4_SetConfig>
      break;
 8006d6e:	e000      	b.n	8006d72 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8006d70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_TIM_ConfigClockSource+0x18>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e0b3      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x180>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd4:	d03e      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0xd0>
 8006dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dda:	f200 8087 	bhi.w	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de2:	f000 8085 	beq.w	8006ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8006de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dea:	d87f      	bhi.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006dec:	2b70      	cmp	r3, #112	; 0x70
 8006dee:	d01a      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0xa2>
 8006df0:	2b70      	cmp	r3, #112	; 0x70
 8006df2:	d87b      	bhi.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006df4:	2b60      	cmp	r3, #96	; 0x60
 8006df6:	d050      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x116>
 8006df8:	2b60      	cmp	r3, #96	; 0x60
 8006dfa:	d877      	bhi.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006dfc:	2b50      	cmp	r3, #80	; 0x50
 8006dfe:	d03c      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0xf6>
 8006e00:	2b50      	cmp	r3, #80	; 0x50
 8006e02:	d873      	bhi.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d058      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x136>
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d86f      	bhi.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006e0c:	2b30      	cmp	r3, #48	; 0x30
 8006e0e:	d064      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x156>
 8006e10:	2b30      	cmp	r3, #48	; 0x30
 8006e12:	d86b      	bhi.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d060      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x156>
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d867      	bhi.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d05c      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x156>
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d05a      	beq.n	8006eda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006e24:	e062      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6899      	ldr	r1, [r3, #8]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f000 fb5b 	bl	80074f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	609a      	str	r2, [r3, #8]
      break;
 8006e52:	e04e      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6899      	ldr	r1, [r3, #8]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f000 fb44 	bl	80074f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e76:	609a      	str	r2, [r3, #8]
      break;
 8006e78:	e03b      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6859      	ldr	r1, [r3, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f000 fab8 	bl	80073fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2150      	movs	r1, #80	; 0x50
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fb11 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8006e98:	e02b      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f000 fad7 	bl	800745a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2160      	movs	r1, #96	; 0x60
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fb01 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8006eb8:	e01b      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6859      	ldr	r1, [r3, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f000 fa98 	bl	80073fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2140      	movs	r1, #64	; 0x40
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 faf1 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8006ed8:	e00b      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f000 fae8 	bl	80074ba <TIM_ITRx_SetConfig>
        break;
 8006eea:	e002      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006eec:	bf00      	nop
 8006eee:	e000      	b.n	8006ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a40      	ldr	r2, [pc, #256]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7a:	d00f      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3d      	ldr	r2, [pc, #244]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3c      	ldr	r2, [pc, #240]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3b      	ldr	r2, [pc, #236]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3a      	ldr	r2, [pc, #232]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a2f      	ldr	r2, [pc, #188]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d02b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d027      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <TIM_Base_SetConfig+0x118>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d023      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2b      	ldr	r2, [pc, #172]	; (8007078 <TIM_Base_SetConfig+0x11c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d01f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2a      	ldr	r2, [pc, #168]	; (800707c <TIM_Base_SetConfig+0x120>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a29      	ldr	r2, [pc, #164]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d017      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a28      	ldr	r2, [pc, #160]	; (8007084 <TIM_Base_SetConfig+0x128>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a27      	ldr	r2, [pc, #156]	; (8007088 <TIM_Base_SetConfig+0x12c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00f      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	; (800708c <TIM_Base_SetConfig+0x130>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00b      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a25      	ldr	r2, [pc, #148]	; (8007090 <TIM_Base_SetConfig+0x134>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d007      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a24      	ldr	r2, [pc, #144]	; (8007094 <TIM_Base_SetConfig+0x138>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d003      	beq.n	800700e <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a23      	ldr	r2, [pc, #140]	; (8007098 <TIM_Base_SetConfig+0x13c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d108      	bne.n	8007020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <TIM_Base_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0xf8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <TIM_Base_SetConfig+0x124>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d103      	bne.n	800705c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	615a      	str	r2, [r3, #20]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40010000 	.word	0x40010000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40000c00 	.word	0x40000c00
 8007080:	40010400 	.word	0x40010400
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800
 8007090:	40001800 	.word	0x40001800
 8007094:	40001c00 	.word	0x40001c00
 8007098:	40002000 	.word	0x40002000

0800709c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800709c:	b480      	push	{r7}
 800709e:	b087      	sub	sp, #28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	f023 0201 	bic.w	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f023 0302 	bic.w	r3, r3, #2
 80070e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a20      	ldr	r2, [pc, #128]	; (8007174 <TIM_OC1_SetConfig+0xd8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d003      	beq.n	8007100 <TIM_OC1_SetConfig+0x64>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a1f      	ldr	r2, [pc, #124]	; (8007178 <TIM_OC1_SetConfig+0xdc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d10c      	bne.n	800711a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f023 0308 	bic.w	r3, r3, #8
 8007106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 0304 	bic.w	r3, r3, #4
 8007118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a15      	ldr	r2, [pc, #84]	; (8007174 <TIM_OC1_SetConfig+0xd8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_OC1_SetConfig+0x8e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a14      	ldr	r2, [pc, #80]	; (8007178 <TIM_OC1_SetConfig+0xdc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d111      	bne.n	800714e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	40010000 	.word	0x40010000
 8007178:	40010400 	.word	0x40010400

0800717c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f023 0210 	bic.w	r2, r3, #16
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	021b      	lsls	r3, r3, #8
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f023 0320 	bic.w	r3, r3, #32
 80071c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a22      	ldr	r2, [pc, #136]	; (8007260 <TIM_OC2_SetConfig+0xe4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d003      	beq.n	80071e4 <TIM_OC2_SetConfig+0x68>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a21      	ldr	r2, [pc, #132]	; (8007264 <TIM_OC2_SetConfig+0xe8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d10d      	bne.n	8007200 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a17      	ldr	r2, [pc, #92]	; (8007260 <TIM_OC2_SetConfig+0xe4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC2_SetConfig+0x94>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a16      	ldr	r2, [pc, #88]	; (8007264 <TIM_OC2_SetConfig+0xe8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d113      	bne.n	8007238 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800721e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010000 	.word	0x40010000
 8007264:	40010400 	.word	0x40010400

08007268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	021b      	lsls	r3, r3, #8
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a21      	ldr	r2, [pc, #132]	; (8007348 <TIM_OC3_SetConfig+0xe0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d003      	beq.n	80072ce <TIM_OC3_SetConfig+0x66>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a20      	ldr	r2, [pc, #128]	; (800734c <TIM_OC3_SetConfig+0xe4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d10d      	bne.n	80072ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	021b      	lsls	r3, r3, #8
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a16      	ldr	r2, [pc, #88]	; (8007348 <TIM_OC3_SetConfig+0xe0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC3_SetConfig+0x92>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a15      	ldr	r2, [pc, #84]	; (800734c <TIM_OC3_SetConfig+0xe4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d113      	bne.n	8007322 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	621a      	str	r2, [r3, #32]
}
 800733c:	bf00      	nop
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40010000 	.word	0x40010000
 800734c:	40010400 	.word	0x40010400

08007350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	031b      	lsls	r3, r3, #12
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a12      	ldr	r2, [pc, #72]	; (80073f4 <TIM_OC4_SetConfig+0xa4>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_OC4_SetConfig+0x68>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a11      	ldr	r2, [pc, #68]	; (80073f8 <TIM_OC4_SetConfig+0xa8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d109      	bne.n	80073cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	019b      	lsls	r3, r3, #6
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40010400 	.word	0x40010400

080073fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f023 0201 	bic.w	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f023 030a 	bic.w	r3, r3, #10
 8007438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	621a      	str	r2, [r3, #32]
}
 800744e:	bf00      	nop
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800745a:	b480      	push	{r7}
 800745c:	b087      	sub	sp, #28
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	f023 0210 	bic.w	r2, r3, #16
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	031b      	lsls	r3, r3, #12
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f043 0307 	orr.w	r3, r3, #7
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	609a      	str	r2, [r3, #8]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800750a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	021a      	lsls	r2, r3, #8
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	431a      	orrs	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4313      	orrs	r3, r2
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	609a      	str	r2, [r3, #8]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007544:	2302      	movs	r3, #2
 8007546:	e05a      	b.n	80075fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a21      	ldr	r2, [pc, #132]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d022      	beq.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007594:	d01d      	beq.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d018      	beq.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a18      	ldr	r2, [pc, #96]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d009      	beq.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a17      	ldr	r2, [pc, #92]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a15      	ldr	r2, [pc, #84]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d10c      	bne.n	80075ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	40010000 	.word	0x40010000
 8007610:	40000400 	.word	0x40000400
 8007614:	40000800 	.word	0x40000800
 8007618:	40000c00 	.word	0x40000c00
 800761c:	40010400 	.word	0x40010400
 8007620:	40014000 	.word	0x40014000
 8007624:	40001800 	.word	0x40001800

08007628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007640:	2302      	movs	r3, #2
 8007642:	e03d      	b.n	80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e03f      	b.n	8007786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7fa fef4 	bl	8002508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2224      	movs	r2, #36	; 0x24
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f9a7 	bl	8007a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800774c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695a      	ldr	r2, [r3, #20]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800775c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800776c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b08a      	sub	sp, #40	; 0x28
 8007792:	af02      	add	r7, sp, #8
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d17c      	bne.n	80078a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_UART_Transmit+0x2c>
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e075      	b.n	80078aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_UART_Transmit+0x3e>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e06e      	b.n	80078aa <HAL_UART_Transmit+0x11c>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2221      	movs	r2, #33	; 0x21
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077e2:	f7fa ff39 	bl	8002658 <HAL_GetTick>
 80077e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	88fa      	ldrh	r2, [r7, #6]
 80077f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fc:	d108      	bne.n	8007810 <HAL_UART_Transmit+0x82>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	e003      	b.n	8007818 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007820:	e02a      	b.n	8007878 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2200      	movs	r2, #0
 800782a:	2180      	movs	r1, #128	; 0x80
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f8e2 	bl	80079f6 <UART_WaitOnFlagUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e036      	b.n	80078aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	3302      	adds	r3, #2
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e007      	b.n	800786a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	781a      	ldrb	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	3301      	adds	r3, #1
 8007868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1cf      	bne.n	8007822 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	2140      	movs	r1, #64	; 0x40
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f8b2 	bl	80079f6 <UART_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e006      	b.n	80078aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3720      	adds	r7, #32
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b08a      	sub	sp, #40	; 0x28
 80078b6:	af02      	add	r7, sp, #8
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	f040 808c 	bne.w	80079ec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <HAL_UART_Receive+0x2e>
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e084      	b.n	80079ee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_UART_Receive+0x40>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e07d      	b.n	80079ee <HAL_UART_Receive+0x13c>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2222      	movs	r2, #34	; 0x22
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790e:	f7fa fea3 	bl	8002658 <HAL_GetTick>
 8007912:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d108      	bne.n	800793c <HAL_UART_Receive+0x8a>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d104      	bne.n	800793c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e003      	b.n	8007944 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800794c:	e043      	b.n	80079d6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	2120      	movs	r1, #32
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f84c 	bl	80079f6 <UART_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e042      	b.n	80079ee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10c      	bne.n	8007988 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	b29b      	uxth	r3, r3
 8007976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797a:	b29a      	uxth	r2, r3
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	3302      	adds	r3, #2
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	e01f      	b.n	80079c8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007990:	d007      	beq.n	80079a2 <HAL_UART_Receive+0xf0>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <HAL_UART_Receive+0xfe>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e008      	b.n	80079c2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	3301      	adds	r3, #1
 80079c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1b6      	bne.n	800794e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	e000      	b.n	80079ee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
  }
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	603b      	str	r3, [r7, #0]
 8007a02:	4613      	mov	r3, r2
 8007a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a06:	e02c      	b.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d028      	beq.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a16:	f7fa fe1f 	bl	8002658 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d21d      	bcs.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695a      	ldr	r2, [r3, #20]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e00f      	b.n	8007a82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	bf0c      	ite	eq
 8007a72:	2301      	moveq	r3, #1
 8007a74:	2300      	movne	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	461a      	mov	r2, r3
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d0c3      	beq.n	8007a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	b09f      	sub	sp, #124	; 0x7c
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa2:	68d9      	ldr	r1, [r3, #12]
 8007aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	ea40 0301 	orr.w	r3, r0, r1
 8007aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ad0:	f021 010c 	bic.w	r1, r1, #12
 8007ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ada:	430b      	orrs	r3, r1
 8007adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aea:	6999      	ldr	r1, [r3, #24]
 8007aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	ea40 0301 	orr.w	r3, r0, r1
 8007af4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4bc5      	ldr	r3, [pc, #788]	; (8007e10 <UART_SetConfig+0x384>)
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d004      	beq.n	8007b0a <UART_SetConfig+0x7e>
 8007b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	4bc3      	ldr	r3, [pc, #780]	; (8007e14 <UART_SetConfig+0x388>)
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d103      	bne.n	8007b12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b0a:	f7fe fe13 	bl	8006734 <HAL_RCC_GetPCLK2Freq>
 8007b0e:	6778      	str	r0, [r7, #116]	; 0x74
 8007b10:	e002      	b.n	8007b18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b12:	f7fe fdfb 	bl	800670c <HAL_RCC_GetPCLK1Freq>
 8007b16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b20:	f040 80b6 	bne.w	8007c90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b26:	461c      	mov	r4, r3
 8007b28:	f04f 0500 	mov.w	r5, #0
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	462b      	mov	r3, r5
 8007b30:	1891      	adds	r1, r2, r2
 8007b32:	6439      	str	r1, [r7, #64]	; 0x40
 8007b34:	415b      	adcs	r3, r3
 8007b36:	647b      	str	r3, [r7, #68]	; 0x44
 8007b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b3c:	1912      	adds	r2, r2, r4
 8007b3e:	eb45 0303 	adc.w	r3, r5, r3
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f04f 0100 	mov.w	r1, #0
 8007b4a:	00d9      	lsls	r1, r3, #3
 8007b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b50:	00d0      	lsls	r0, r2, #3
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	1911      	adds	r1, r2, r4
 8007b58:	6639      	str	r1, [r7, #96]	; 0x60
 8007b5a:	416b      	adcs	r3, r5
 8007b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	1891      	adds	r1, r2, r2
 8007b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b6c:	415b      	adcs	r3, r3
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b78:	f7f9 f896 	bl	8000ca8 <__aeabi_uldivmod>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4ba5      	ldr	r3, [pc, #660]	; (8007e18 <UART_SetConfig+0x38c>)
 8007b82:	fba3 2302 	umull	r2, r3, r3, r2
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	011e      	lsls	r6, r3, #4
 8007b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b8c:	461c      	mov	r4, r3
 8007b8e:	f04f 0500 	mov.w	r5, #0
 8007b92:	4622      	mov	r2, r4
 8007b94:	462b      	mov	r3, r5
 8007b96:	1891      	adds	r1, r2, r2
 8007b98:	6339      	str	r1, [r7, #48]	; 0x30
 8007b9a:	415b      	adcs	r3, r3
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007ba2:	1912      	adds	r2, r2, r4
 8007ba4:	eb45 0303 	adc.w	r3, r5, r3
 8007ba8:	f04f 0000 	mov.w	r0, #0
 8007bac:	f04f 0100 	mov.w	r1, #0
 8007bb0:	00d9      	lsls	r1, r3, #3
 8007bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bb6:	00d0      	lsls	r0, r2, #3
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	1911      	adds	r1, r2, r4
 8007bbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bc0:	416b      	adcs	r3, r5
 8007bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	1891      	adds	r1, r2, r2
 8007bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bd2:	415b      	adcs	r3, r3
 8007bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007bde:	f7f9 f863 	bl	8000ca8 <__aeabi_uldivmod>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4b8c      	ldr	r3, [pc, #560]	; (8007e18 <UART_SetConfig+0x38c>)
 8007be8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bec:	095b      	lsrs	r3, r3, #5
 8007bee:	2164      	movs	r1, #100	; 0x64
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	3332      	adds	r3, #50	; 0x32
 8007bfa:	4a87      	ldr	r2, [pc, #540]	; (8007e18 <UART_SetConfig+0x38c>)
 8007bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007c00:	095b      	lsrs	r3, r3, #5
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c08:	441e      	add	r6, r3
 8007c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f04f 0100 	mov.w	r1, #0
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	1894      	adds	r4, r2, r2
 8007c18:	623c      	str	r4, [r7, #32]
 8007c1a:	415b      	adcs	r3, r3
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c22:	1812      	adds	r2, r2, r0
 8007c24:	eb41 0303 	adc.w	r3, r1, r3
 8007c28:	f04f 0400 	mov.w	r4, #0
 8007c2c:	f04f 0500 	mov.w	r5, #0
 8007c30:	00dd      	lsls	r5, r3, #3
 8007c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c36:	00d4      	lsls	r4, r2, #3
 8007c38:	4622      	mov	r2, r4
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	1814      	adds	r4, r2, r0
 8007c3e:	653c      	str	r4, [r7, #80]	; 0x50
 8007c40:	414b      	adcs	r3, r1
 8007c42:	657b      	str	r3, [r7, #84]	; 0x54
 8007c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f04f 0300 	mov.w	r3, #0
 8007c4e:	1891      	adds	r1, r2, r2
 8007c50:	61b9      	str	r1, [r7, #24]
 8007c52:	415b      	adcs	r3, r3
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c5e:	f7f9 f823 	bl	8000ca8 <__aeabi_uldivmod>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4b6c      	ldr	r3, [pc, #432]	; (8007e18 <UART_SetConfig+0x38c>)
 8007c68:	fba3 1302 	umull	r1, r3, r3, r2
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	2164      	movs	r1, #100	; 0x64
 8007c70:	fb01 f303 	mul.w	r3, r1, r3
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	3332      	adds	r3, #50	; 0x32
 8007c7a:	4a67      	ldr	r2, [pc, #412]	; (8007e18 <UART_SetConfig+0x38c>)
 8007c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	f003 0207 	and.w	r2, r3, #7
 8007c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4432      	add	r2, r6
 8007c8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c8e:	e0b9      	b.n	8007e04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c92:	461c      	mov	r4, r3
 8007c94:	f04f 0500 	mov.w	r5, #0
 8007c98:	4622      	mov	r2, r4
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	1891      	adds	r1, r2, r2
 8007c9e:	6139      	str	r1, [r7, #16]
 8007ca0:	415b      	adcs	r3, r3
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ca8:	1912      	adds	r2, r2, r4
 8007caa:	eb45 0303 	adc.w	r3, r5, r3
 8007cae:	f04f 0000 	mov.w	r0, #0
 8007cb2:	f04f 0100 	mov.w	r1, #0
 8007cb6:	00d9      	lsls	r1, r3, #3
 8007cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cbc:	00d0      	lsls	r0, r2, #3
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	eb12 0804 	adds.w	r8, r2, r4
 8007cc6:	eb43 0905 	adc.w	r9, r3, r5
 8007cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f04f 0100 	mov.w	r1, #0
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	008b      	lsls	r3, r1, #2
 8007cde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ce2:	0082      	lsls	r2, r0, #2
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	f7f8 ffde 	bl	8000ca8 <__aeabi_uldivmod>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4b49      	ldr	r3, [pc, #292]	; (8007e18 <UART_SetConfig+0x38c>)
 8007cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8007cf6:	095b      	lsrs	r3, r3, #5
 8007cf8:	011e      	lsls	r6, r3, #4
 8007cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f04f 0100 	mov.w	r1, #0
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	1894      	adds	r4, r2, r2
 8007d08:	60bc      	str	r4, [r7, #8]
 8007d0a:	415b      	adcs	r3, r3
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d12:	1812      	adds	r2, r2, r0
 8007d14:	eb41 0303 	adc.w	r3, r1, r3
 8007d18:	f04f 0400 	mov.w	r4, #0
 8007d1c:	f04f 0500 	mov.w	r5, #0
 8007d20:	00dd      	lsls	r5, r3, #3
 8007d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d26:	00d4      	lsls	r4, r2, #3
 8007d28:	4622      	mov	r2, r4
 8007d2a:	462b      	mov	r3, r5
 8007d2c:	1814      	adds	r4, r2, r0
 8007d2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d30:	414b      	adcs	r3, r1
 8007d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f04f 0100 	mov.w	r1, #0
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	008b      	lsls	r3, r1, #2
 8007d48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d4c:	0082      	lsls	r2, r0, #2
 8007d4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d52:	f7f8 ffa9 	bl	8000ca8 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4b2f      	ldr	r3, [pc, #188]	; (8007e18 <UART_SetConfig+0x38c>)
 8007d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	2164      	movs	r1, #100	; 0x64
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	3332      	adds	r3, #50	; 0x32
 8007d6e:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <UART_SetConfig+0x38c>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d7a:	441e      	add	r6, r3
 8007d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f04f 0100 	mov.w	r1, #0
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	1894      	adds	r4, r2, r2
 8007d8a:	603c      	str	r4, [r7, #0]
 8007d8c:	415b      	adcs	r3, r3
 8007d8e:	607b      	str	r3, [r7, #4]
 8007d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d94:	1812      	adds	r2, r2, r0
 8007d96:	eb41 0303 	adc.w	r3, r1, r3
 8007d9a:	f04f 0400 	mov.w	r4, #0
 8007d9e:	f04f 0500 	mov.w	r5, #0
 8007da2:	00dd      	lsls	r5, r3, #3
 8007da4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007da8:	00d4      	lsls	r4, r2, #3
 8007daa:	4622      	mov	r2, r4
 8007dac:	462b      	mov	r3, r5
 8007dae:	eb12 0a00 	adds.w	sl, r2, r0
 8007db2:	eb43 0b01 	adc.w	fp, r3, r1
 8007db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f04f 0100 	mov.w	r1, #0
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	008b      	lsls	r3, r1, #2
 8007dca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dce:	0082      	lsls	r2, r0, #2
 8007dd0:	4650      	mov	r0, sl
 8007dd2:	4659      	mov	r1, fp
 8007dd4:	f7f8 ff68 	bl	8000ca8 <__aeabi_uldivmod>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4b0e      	ldr	r3, [pc, #56]	; (8007e18 <UART_SetConfig+0x38c>)
 8007dde:	fba3 1302 	umull	r1, r3, r3, r2
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	2164      	movs	r1, #100	; 0x64
 8007de6:	fb01 f303 	mul.w	r3, r1, r3
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	3332      	adds	r3, #50	; 0x32
 8007df0:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <UART_SetConfig+0x38c>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	f003 020f 	and.w	r2, r3, #15
 8007dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4432      	add	r2, r6
 8007e02:	609a      	str	r2, [r3, #8]
}
 8007e04:	bf00      	nop
 8007e06:	377c      	adds	r7, #124	; 0x7c
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0e:	bf00      	nop
 8007e10:	40011000 	.word	0x40011000
 8007e14:	40011400 	.word	0x40011400
 8007e18:	51eb851f 	.word	0x51eb851f

08007e1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	f107 001c 	add.w	r0, r7, #28
 8007e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d122      	bne.n	8007e7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d105      	bne.n	8007e6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fac6 	bl	8009400 <USB_CoreReset>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
 8007e78:	e01a      	b.n	8007eb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 faba 	bl	8009400 <USB_CoreReset>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ea2:	e005      	b.n	8007eb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d10b      	bne.n	8007ece <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f043 0206 	orr.w	r2, r3, #6
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f043 0220 	orr.w	r2, r3, #32
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eda:	b004      	add	sp, #16
 8007edc:	4770      	bx	lr
	...

08007ee0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d165      	bne.n	8007fc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4a41      	ldr	r2, [pc, #260]	; (8007ffc <USB_SetTurnaroundTime+0x11c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d906      	bls.n	8007f0a <USB_SetTurnaroundTime+0x2a>
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4a40      	ldr	r2, [pc, #256]	; (8008000 <USB_SetTurnaroundTime+0x120>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d202      	bcs.n	8007f0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007f04:	230f      	movs	r3, #15
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	e062      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4a3c      	ldr	r2, [pc, #240]	; (8008000 <USB_SetTurnaroundTime+0x120>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d306      	bcc.n	8007f20 <USB_SetTurnaroundTime+0x40>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	4a3b      	ldr	r2, [pc, #236]	; (8008004 <USB_SetTurnaroundTime+0x124>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d202      	bcs.n	8007f20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f1a:	230e      	movs	r3, #14
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e057      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4a38      	ldr	r2, [pc, #224]	; (8008004 <USB_SetTurnaroundTime+0x124>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d306      	bcc.n	8007f36 <USB_SetTurnaroundTime+0x56>
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	4a37      	ldr	r2, [pc, #220]	; (8008008 <USB_SetTurnaroundTime+0x128>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d202      	bcs.n	8007f36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f30:	230d      	movs	r3, #13
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e04c      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	4a33      	ldr	r2, [pc, #204]	; (8008008 <USB_SetTurnaroundTime+0x128>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d306      	bcc.n	8007f4c <USB_SetTurnaroundTime+0x6c>
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	4a32      	ldr	r2, [pc, #200]	; (800800c <USB_SetTurnaroundTime+0x12c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d802      	bhi.n	8007f4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f46:	230c      	movs	r3, #12
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	e041      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	4a2f      	ldr	r2, [pc, #188]	; (800800c <USB_SetTurnaroundTime+0x12c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d906      	bls.n	8007f62 <USB_SetTurnaroundTime+0x82>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4a2e      	ldr	r2, [pc, #184]	; (8008010 <USB_SetTurnaroundTime+0x130>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d802      	bhi.n	8007f62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f5c:	230b      	movs	r3, #11
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e036      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	4a2a      	ldr	r2, [pc, #168]	; (8008010 <USB_SetTurnaroundTime+0x130>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d906      	bls.n	8007f78 <USB_SetTurnaroundTime+0x98>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4a29      	ldr	r2, [pc, #164]	; (8008014 <USB_SetTurnaroundTime+0x134>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d802      	bhi.n	8007f78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f72:	230a      	movs	r3, #10
 8007f74:	617b      	str	r3, [r7, #20]
 8007f76:	e02b      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4a26      	ldr	r2, [pc, #152]	; (8008014 <USB_SetTurnaroundTime+0x134>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d906      	bls.n	8007f8e <USB_SetTurnaroundTime+0xae>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4a25      	ldr	r2, [pc, #148]	; (8008018 <USB_SetTurnaroundTime+0x138>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d202      	bcs.n	8007f8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f88:	2309      	movs	r3, #9
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e020      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4a21      	ldr	r2, [pc, #132]	; (8008018 <USB_SetTurnaroundTime+0x138>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d306      	bcc.n	8007fa4 <USB_SetTurnaroundTime+0xc4>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4a20      	ldr	r2, [pc, #128]	; (800801c <USB_SetTurnaroundTime+0x13c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d802      	bhi.n	8007fa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f9e:	2308      	movs	r3, #8
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	e015      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4a1d      	ldr	r2, [pc, #116]	; (800801c <USB_SetTurnaroundTime+0x13c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d906      	bls.n	8007fba <USB_SetTurnaroundTime+0xda>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <USB_SetTurnaroundTime+0x140>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d202      	bcs.n	8007fba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007fb4:	2307      	movs	r3, #7
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	e00a      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007fba:	2306      	movs	r3, #6
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e007      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007fc6:	2309      	movs	r3, #9
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	e001      	b.n	8007fd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007fcc:	2309      	movs	r3, #9
 8007fce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	029b      	lsls	r3, r3, #10
 8007fe4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	00d8acbf 	.word	0x00d8acbf
 8008000:	00e4e1c0 	.word	0x00e4e1c0
 8008004:	00f42400 	.word	0x00f42400
 8008008:	01067380 	.word	0x01067380
 800800c:	011a499f 	.word	0x011a499f
 8008010:	01312cff 	.word	0x01312cff
 8008014:	014ca43f 	.word	0x014ca43f
 8008018:	016e3600 	.word	0x016e3600
 800801c:	01a6ab1f 	.word	0x01a6ab1f
 8008020:	01e84800 	.word	0x01e84800

08008024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f043 0201 	orr.w	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 0201 	bic.w	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d106      	bne.n	8008094 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	e00b      	b.n	80080ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008094:	78fb      	ldrb	r3, [r7, #3]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	60da      	str	r2, [r3, #12]
 80080a6:	e001      	b.n	80080ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e003      	b.n	80080b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80080ac:	2032      	movs	r0, #50	; 0x32
 80080ae:	f7fa fadf 	bl	8002670 <HAL_Delay>

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080bc:	b084      	sub	sp, #16
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
 80080da:	e009      	b.n	80080f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	3340      	adds	r3, #64	; 0x40
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	2200      	movs	r2, #0
 80080e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	3301      	adds	r3, #1
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	2b0e      	cmp	r3, #14
 80080f4:	d9f2      	bls.n	80080dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d11c      	bne.n	8008136 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800810a:	f043 0302 	orr.w	r3, r3, #2
 800810e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	639a      	str	r2, [r3, #56]	; 0x38
 8008134:	e00b      	b.n	800814e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008160:	4619      	mov	r1, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008168:	461a      	mov	r2, r3
 800816a:	680b      	ldr	r3, [r1, #0]
 800816c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10c      	bne.n	800818e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800817a:	2100      	movs	r1, #0
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f949 	bl	8008414 <USB_SetDevSpeed>
 8008182:	e008      	b.n	8008196 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008184:	2101      	movs	r1, #1
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f944 	bl	8008414 <USB_SetDevSpeed>
 800818c:	e003      	b.n	8008196 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800818e:	2103      	movs	r1, #3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f93f 	bl	8008414 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008196:	2110      	movs	r1, #16
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8f3 	bl	8008384 <USB_FlushTxFifo>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f911 	bl	80083d0 <USB_FlushRxFifo>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081be:	461a      	mov	r2, r3
 80081c0:	2300      	movs	r3, #0
 80081c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	461a      	mov	r2, r3
 80081cc:	2300      	movs	r3, #0
 80081ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d6:	461a      	mov	r2, r3
 80081d8:	2300      	movs	r3, #0
 80081da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	e043      	b.n	800826a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f8:	d118      	bne.n	800822c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	015a      	lsls	r2, r3, #5
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4413      	add	r3, r2
 8008208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820c:	461a      	mov	r2, r3
 800820e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	e013      	b.n	800823e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	461a      	mov	r2, r3
 8008224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	e008      	b.n	800823e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008238:	461a      	mov	r2, r3
 800823a:	2300      	movs	r3, #0
 800823c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824a:	461a      	mov	r2, r3
 800824c:	2300      	movs	r3, #0
 800824e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	461a      	mov	r2, r3
 800825e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	3301      	adds	r3, #1
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	d3b7      	bcc.n	80081e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008272:	2300      	movs	r3, #0
 8008274:	613b      	str	r3, [r7, #16]
 8008276:	e043      	b.n	8008300 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800828a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800828e:	d118      	bne.n	80082c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10a      	bne.n	80082ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a2:	461a      	mov	r2, r3
 80082a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	e013      	b.n	80082d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b8:	461a      	mov	r2, r3
 80082ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e008      	b.n	80082d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	461a      	mov	r2, r3
 80082d0:	2300      	movs	r3, #0
 80082d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e0:	461a      	mov	r2, r3
 80082e2:	2300      	movs	r3, #0
 80082e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f2:	461a      	mov	r2, r3
 80082f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	3301      	adds	r3, #1
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	429a      	cmp	r2, r3
 8008306:	d3b7      	bcc.n	8008278 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008328:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	2b00      	cmp	r3, #0
 800832e:	d105      	bne.n	800833c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f043 0210 	orr.w	r2, r3, #16
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <USB_DevInit+0x2c4>)
 8008342:	4313      	orrs	r3, r2
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f043 0208 	orr.w	r2, r3, #8
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800835a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800835c:	2b01      	cmp	r3, #1
 800835e:	d107      	bne.n	8008370 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008368:	f043 0304 	orr.w	r3, r3, #4
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800837c:	b004      	add	sp, #16
 800837e:	4770      	bx	lr
 8008380:	803c3800 	.word	0x803c3800

08008384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	019b      	lsls	r3, r3, #6
 8008396:	f043 0220 	orr.w	r2, r3, #32
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <USB_FlushTxFifo+0x48>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d901      	bls.n	80083b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e006      	b.n	80083be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d0f0      	beq.n	800839e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	00030d40 	.word	0x00030d40

080083d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2210      	movs	r2, #16
 80083e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4a09      	ldr	r2, [pc, #36]	; (8008410 <USB_FlushRxFifo+0x40>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e006      	b.n	8008402 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d0f0      	beq.n	80083e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	00030d40 	.word	0x00030d40

08008414 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	68f9      	ldr	r1, [r7, #12]
 8008430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008434:	4313      	orrs	r3, r2
 8008436:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008446:	b480      	push	{r7}
 8008448:	b087      	sub	sp, #28
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f003 0306 	and.w	r3, r3, #6
 800845e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008466:	2300      	movs	r3, #0
 8008468:	75fb      	strb	r3, [r7, #23]
 800846a:	e00a      	b.n	8008482 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d002      	beq.n	8008478 <USB_GetDevSpeed+0x32>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b06      	cmp	r3, #6
 8008476:	d102      	bne.n	800847e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008478:	2302      	movs	r3, #2
 800847a:	75fb      	strb	r3, [r7, #23]
 800847c:	e001      	b.n	8008482 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800847e:	230f      	movs	r3, #15
 8008480:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008482:	7dfb      	ldrb	r3, [r7, #23]
}
 8008484:	4618      	mov	r0, r3
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d13a      	bne.n	8008522 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	69da      	ldr	r2, [r3, #28]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	2101      	movs	r1, #1
 80084be:	fa01 f303 	lsl.w	r3, r1, r3
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	68f9      	ldr	r1, [r7, #12]
 80084c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ca:	4313      	orrs	r3, r2
 80084cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d155      	bne.n	8008590 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	78db      	ldrb	r3, [r3, #3]
 80084fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008500:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	059b      	lsls	r3, r3, #22
 8008506:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008508:	4313      	orrs	r3, r2
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	0151      	lsls	r1, r2, #5
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	440a      	add	r2, r1
 8008512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800851a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	e036      	b.n	8008590 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008528:	69da      	ldr	r2, [r3, #28]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	2101      	movs	r1, #1
 8008534:	fa01 f303 	lsl.w	r3, r1, r3
 8008538:	041b      	lsls	r3, r3, #16
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008540:	4313      	orrs	r3, r2
 8008542:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d11a      	bne.n	8008590 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	78db      	ldrb	r3, [r3, #3]
 8008574:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008576:	430b      	orrs	r3, r1
 8008578:	4313      	orrs	r3, r2
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800858a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d161      	bne.n	8008680 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d2:	d11f      	bne.n	8008614 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008612:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	2101      	movs	r1, #1
 8008626:	fa01 f303 	lsl.w	r3, r1, r3
 800862a:	b29b      	uxth	r3, r3
 800862c:	43db      	mvns	r3, r3
 800862e:	68f9      	ldr	r1, [r7, #12]
 8008630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008634:	4013      	ands	r3, r2
 8008636:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863e:	69da      	ldr	r2, [r3, #28]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	2101      	movs	r1, #1
 800864a:	fa01 f303 	lsl.w	r3, r1, r3
 800864e:	b29b      	uxth	r3, r3
 8008650:	43db      	mvns	r3, r3
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008658:	4013      	ands	r3, r2
 800865a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	0159      	lsls	r1, r3, #5
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	440b      	add	r3, r1
 8008672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008676:	4619      	mov	r1, r3
 8008678:	4b35      	ldr	r3, [pc, #212]	; (8008750 <USB_DeactivateEndpoint+0x1b0>)
 800867a:	4013      	ands	r3, r2
 800867c:	600b      	str	r3, [r1, #0]
 800867e:	e060      	b.n	8008742 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008696:	d11f      	bne.n	80086d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	0151      	lsls	r1, r2, #5
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	440a      	add	r2, r1
 80086ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f303 	lsl.w	r3, r1, r3
 80086ee:	041b      	lsls	r3, r3, #16
 80086f0:	43db      	mvns	r3, r3
 80086f2:	68f9      	ldr	r1, [r7, #12]
 80086f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f8:	4013      	ands	r3, r2
 80086fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008702:	69da      	ldr	r2, [r3, #28]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 030f 	and.w	r3, r3, #15
 800870c:	2101      	movs	r1, #1
 800870e:	fa01 f303 	lsl.w	r3, r1, r3
 8008712:	041b      	lsls	r3, r3, #16
 8008714:	43db      	mvns	r3, r3
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800871c:	4013      	ands	r3, r2
 800871e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	0159      	lsls	r1, r3, #5
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	440b      	add	r3, r1
 8008736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873a:	4619      	mov	r1, r3
 800873c:	4b05      	ldr	r3, [pc, #20]	; (8008754 <USB_DeactivateEndpoint+0x1b4>)
 800873e:	4013      	ands	r3, r2
 8008740:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	ec337800 	.word	0xec337800
 8008754:	eff37800 	.word	0xeff37800

08008758 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08a      	sub	sp, #40	; 0x28
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	2b01      	cmp	r3, #1
 8008776:	f040 815c 	bne.w	8008a32 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d132      	bne.n	80087e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	4413      	add	r3, r2
 800878a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800879c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	0151      	lsls	r1, r2, #5
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	440a      	add	r2, r1
 80087bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	015a      	lsls	r2, r3, #5
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	4413      	add	r3, r2
 80087ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	0151      	lsls	r1, r2, #5
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	440a      	add	r2, r1
 80087dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087e0:	0cdb      	lsrs	r3, r3, #19
 80087e2:	04db      	lsls	r3, r3, #19
 80087e4:	6113      	str	r3, [r2, #16]
 80087e6:	e074      	b.n	80088d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008802:	0cdb      	lsrs	r3, r3, #19
 8008804:	04db      	lsls	r3, r3, #19
 8008806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	440a      	add	r2, r1
 800881e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008822:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008826:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800882a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008838:	691a      	ldr	r2, [r3, #16]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6959      	ldr	r1, [r3, #20]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	440b      	add	r3, r1
 8008844:	1e59      	subs	r1, r3, #1
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	fbb1 f3f3 	udiv	r3, r1, r3
 800884e:	04d9      	lsls	r1, r3, #19
 8008850:	4b9d      	ldr	r3, [pc, #628]	; (8008ac8 <USB_EPStartXfer+0x370>)
 8008852:	400b      	ands	r3, r1
 8008854:	69b9      	ldr	r1, [r7, #24]
 8008856:	0148      	lsls	r0, r1, #5
 8008858:	69f9      	ldr	r1, [r7, #28]
 800885a:	4401      	add	r1, r0
 800885c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008860:	4313      	orrs	r3, r2
 8008862:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800887a:	69b9      	ldr	r1, [r7, #24]
 800887c:	0148      	lsls	r0, r1, #5
 800887e:	69f9      	ldr	r1, [r7, #28]
 8008880:	4401      	add	r1, r0
 8008882:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008886:	4313      	orrs	r3, r2
 8008888:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	78db      	ldrb	r3, [r3, #3]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d11f      	bne.n	80088d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	0151      	lsls	r1, r2, #5
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	440a      	add	r2, r1
 80088a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80088b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	0151      	lsls	r1, r2, #5
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	440a      	add	r2, r1
 80088c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d14b      	bne.n	8008970 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ec:	461a      	mov	r2, r3
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	78db      	ldrb	r3, [r3, #3]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d128      	bne.n	800894e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008908:	2b00      	cmp	r3, #0
 800890a:	d110      	bne.n	800892e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	440a      	add	r2, r1
 8008922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	e00f      	b.n	800894e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	69fa      	ldr	r2, [r7, #28]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800894c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008968:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	e12f      	b.n	8008bd0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	0151      	lsls	r1, r2, #5
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	440a      	add	r2, r1
 8008986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800898a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800898e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	78db      	ldrb	r3, [r3, #3]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d015      	beq.n	80089c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8117 	beq.w	8008bd0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	2101      	movs	r1, #1
 80089b4:	fa01 f303 	lsl.w	r3, r1, r3
 80089b8:	69f9      	ldr	r1, [r7, #28]
 80089ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089be:	4313      	orrs	r3, r2
 80089c0:	634b      	str	r3, [r1, #52]	; 0x34
 80089c2:	e105      	b.n	8008bd0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d110      	bne.n	80089f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	e00f      	b.n	8008a16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	0151      	lsls	r1, r2, #5
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	440a      	add	r2, r1
 8008a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	68d9      	ldr	r1, [r3, #12]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	781a      	ldrb	r2, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	b298      	uxth	r0, r3
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4603      	mov	r3, r0
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 fa2b 	bl	8008e86 <USB_WritePacket>
 8008a30:	e0ce      	b.n	8008bd0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	0151      	lsls	r1, r2, #5
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	440a      	add	r2, r1
 8008a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a4c:	0cdb      	lsrs	r3, r3, #19
 8008a4e:	04db      	lsls	r3, r3, #19
 8008a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d126      	bne.n	8008acc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a94:	69b9      	ldr	r1, [r7, #24]
 8008a96:	0148      	lsls	r0, r1, #5
 8008a98:	69f9      	ldr	r1, [r7, #28]
 8008a9a:	4401      	add	r1, r0
 8008a9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ac2:	6113      	str	r3, [r2, #16]
 8008ac4:	e036      	b.n	8008b34 <USB_EPStartXfer+0x3dc>
 8008ac6:	bf00      	nop
 8008ac8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	695a      	ldr	r2, [r3, #20]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	1e5a      	subs	r2, r3, #1
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aee:	691a      	ldr	r2, [r3, #16]
 8008af0:	8afb      	ldrh	r3, [r7, #22]
 8008af2:	04d9      	lsls	r1, r3, #19
 8008af4:	4b39      	ldr	r3, [pc, #228]	; (8008bdc <USB_EPStartXfer+0x484>)
 8008af6:	400b      	ands	r3, r1
 8008af8:	69b9      	ldr	r1, [r7, #24]
 8008afa:	0148      	lsls	r0, r1, #5
 8008afc:	69f9      	ldr	r1, [r7, #28]
 8008afe:	4401      	add	r1, r0
 8008b00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b04:	4313      	orrs	r3, r2
 8008b06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b14:	691a      	ldr	r2, [r3, #16]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	8af9      	ldrh	r1, [r7, #22]
 8008b1c:	fb01 f303 	mul.w	r3, r1, r3
 8008b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b24:	69b9      	ldr	r1, [r7, #24]
 8008b26:	0148      	lsls	r0, r1, #5
 8008b28:	69f9      	ldr	r1, [r7, #28]
 8008b2a:	4401      	add	r1, r0
 8008b2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b30:	4313      	orrs	r3, r2
 8008b32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d10d      	bne.n	8008b56 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d009      	beq.n	8008b56 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	68d9      	ldr	r1, [r3, #12]
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	460a      	mov	r2, r1
 8008b54:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d128      	bne.n	8008bb0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d110      	bne.n	8008b90 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	e00f      	b.n	8008bb0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008bce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3720      	adds	r7, #32
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	1ff80000 	.word	0x1ff80000

08008be0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	785b      	ldrb	r3, [r3, #1]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	f040 80cd 	bne.w	8008d9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d132      	bne.n	8008c70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	0151      	lsls	r1, r2, #5
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	440a      	add	r2, r1
 8008c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	0151      	lsls	r1, r2, #5
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	440a      	add	r2, r1
 8008c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	0151      	lsls	r1, r2, #5
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	440a      	add	r2, r1
 8008c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c68:	0cdb      	lsrs	r3, r3, #19
 8008c6a:	04db      	lsls	r3, r3, #19
 8008c6c:	6113      	str	r3, [r2, #16]
 8008c6e:	e04e      	b.n	8008d0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	0151      	lsls	r1, r2, #5
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	440a      	add	r2, r1
 8008c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8a:	0cdb      	lsrs	r3, r3, #19
 8008c8c:	04db      	lsls	r3, r3, #19
 8008c8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008caa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cb2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	695a      	ldr	r2, [r3, #20]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d903      	bls.n	8008cc8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	0151      	lsls	r1, r2, #5
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	440a      	add	r2, r1
 8008cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	691a      	ldr	r2, [r3, #16]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cfe:	6939      	ldr	r1, [r7, #16]
 8008d00:	0148      	lsls	r0, r1, #5
 8008d02:	6979      	ldr	r1, [r7, #20]
 8008d04:	4401      	add	r1, r0
 8008d06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d11e      	bne.n	8008d52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d009      	beq.n	8008d30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d28:	461a      	mov	r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	e092      	b.n	8008e78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	0151      	lsls	r1, r2, #5
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	440a      	add	r2, r1
 8008d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d07e      	beq.n	8008e78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d90:	6979      	ldr	r1, [r7, #20]
 8008d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d96:	4313      	orrs	r3, r2
 8008d98:	634b      	str	r3, [r1, #52]	; 0x34
 8008d9a:	e06d      	b.n	8008e78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008db6:	0cdb      	lsrs	r3, r3, #19
 8008db8:	04db      	lsls	r3, r3, #19
 8008dba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	0151      	lsls	r1, r2, #5
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008dda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dde:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e26:	6939      	ldr	r1, [r7, #16]
 8008e28:	0148      	lsls	r0, r1, #5
 8008e2a:	6979      	ldr	r1, [r7, #20]
 8008e2c:	4401      	add	r1, r0
 8008e2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e32:	4313      	orrs	r3, r2
 8008e34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d10d      	bne.n	8008e58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	68d9      	ldr	r1, [r3, #12]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e54:	460a      	mov	r2, r1
 8008e56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	0151      	lsls	r1, r2, #5
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	440a      	add	r2, r1
 8008e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e86:	b480      	push	{r7}
 8008e88:	b089      	sub	sp, #36	; 0x24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	4611      	mov	r1, r2
 8008e92:	461a      	mov	r2, r3
 8008e94:	460b      	mov	r3, r1
 8008e96:	71fb      	strb	r3, [r7, #7]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d11a      	bne.n	8008ee2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008eac:	88bb      	ldrh	r3, [r7, #4]
 8008eae:	3303      	adds	r3, #3
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61bb      	str	r3, [r7, #24]
 8008eb8:	e00f      	b.n	8008eda <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	031a      	lsls	r2, r3, #12
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	61bb      	str	r3, [r7, #24]
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d3eb      	bcc.n	8008eba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3724      	adds	r7, #36	; 0x24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b089      	sub	sp, #36	; 0x24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	3303      	adds	r3, #3
 8008f0a:	089b      	lsrs	r3, r3, #2
 8008f0c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	e00b      	b.n	8008f2c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	3304      	adds	r3, #4
 8008f24:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	61bb      	str	r3, [r7, #24]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d3ef      	bcc.n	8008f14 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008f34:	69fb      	ldr	r3, [r7, #28]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3724      	adds	r7, #36	; 0x24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d12c      	bne.n	8008fb8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	db12      	blt.n	8008f96 <USB_EPSetStall+0x54>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00f      	beq.n	8008f96 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f94:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	0151      	lsls	r1, r2, #5
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	440a      	add	r2, r1
 8008fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	e02b      	b.n	8009010 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	db12      	blt.n	8008ff0 <USB_EPSetStall+0xae>
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00f      	beq.n	8008ff0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008fee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	0151      	lsls	r1, r2, #5
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	440a      	add	r2, r1
 8009006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800900a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800900e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d128      	bne.n	800908c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4413      	add	r3, r2
 8009042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	440a      	add	r2, r1
 8009050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009054:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009058:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	78db      	ldrb	r3, [r3, #3]
 800905e:	2b03      	cmp	r3, #3
 8009060:	d003      	beq.n	800906a <USB_EPClearStall+0x4c>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	78db      	ldrb	r3, [r3, #3]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d138      	bne.n	80090dc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	0151      	lsls	r1, r2, #5
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	440a      	add	r2, r1
 8009080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	e027      	b.n	80090dc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	0151      	lsls	r1, r2, #5
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	440a      	add	r2, r1
 80090a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	78db      	ldrb	r3, [r3, #3]
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d003      	beq.n	80090bc <USB_EPClearStall+0x9e>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	78db      	ldrb	r3, [r3, #3]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d10f      	bne.n	80090dc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090da:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b085      	sub	sp, #20
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009108:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800910c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009124:	4313      	orrs	r3, r2
 8009126:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009150:	f023 0303 	bic.w	r3, r3, #3
 8009154:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009164:	f023 0302 	bic.w	r3, r3, #2
 8009168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009192:	f023 0303 	bic.w	r3, r3, #3
 8009196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091a6:	f043 0302 	orr.w	r3, r3, #2
 80091aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b085      	sub	sp, #20
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	4013      	ands	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80091d2:	68fb      	ldr	r3, [r7, #12]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fc:	69db      	ldr	r3, [r3, #28]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4013      	ands	r3, r2
 8009202:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	0c1b      	lsrs	r3, r3, #16
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	4013      	ands	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	b29b      	uxth	r3, r3
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	4013      	ands	r3, r2
 8009274:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009276:	68bb      	ldr	r3, [r7, #8]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	fa22 f303 	lsr.w	r3, r2, r3
 80092b4:	01db      	lsls	r3, r3, #7
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4013      	ands	r3, r2
 80092d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80092d2:	68bb      	ldr	r3, [r7, #8]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	371c      	adds	r7, #28
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	f003 0301 	and.w	r3, r3, #1
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009316:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800931a:	f023 0307 	bic.w	r3, r3, #7
 800931e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800932e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009332:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009344:	b480      	push	{r7}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	460b      	mov	r3, r1
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	333c      	adds	r3, #60	; 0x3c
 800935a:	3304      	adds	r3, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	4a26      	ldr	r2, [pc, #152]	; (80093fc <USB_EP0_OutStart+0xb8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d90a      	bls.n	800937e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009378:	d101      	bne.n	800937e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	e037      	b.n	80093ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009384:	461a      	mov	r2, r3
 8009386:	2300      	movs	r3, #0
 8009388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800939c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ac:	f043 0318 	orr.w	r3, r3, #24
 80093b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80093c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d10f      	bne.n	80093ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d2:	461a      	mov	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80093ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	371c      	adds	r7, #28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	4f54300a 	.word	0x4f54300a

08009400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4a13      	ldr	r2, [pc, #76]	; (8009464 <USB_CoreReset+0x64>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d901      	bls.n	800941e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e01b      	b.n	8009456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	daf2      	bge.n	800940c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f043 0201 	orr.w	r2, r3, #1
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a09      	ldr	r2, [pc, #36]	; (8009464 <USB_CoreReset+0x64>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d901      	bls.n	8009448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e006      	b.n	8009456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b01      	cmp	r3, #1
 8009452:	d0f0      	beq.n	8009436 <USB_CoreReset+0x36>

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	00030d40 	.word	0x00030d40

08009468 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8009474:	2018      	movs	r0, #24
 8009476:	f005 fe81 	bl	800f17c <USBD_static_malloc>
 800947a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d105      	bne.n	800948e <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800948a:	2302      	movs	r3, #2
 800948c:	e038      	b.n	8009500 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	7c1b      	ldrb	r3, [r3, #16]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d107      	bne.n	80094ae <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2205      	movs	r2, #5
 80094a2:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2205      	movs	r2, #5
 80094a8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80094ac:	e006      	b.n	80094bc <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2205      	movs	r2, #5
 80094b2:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2205      	movs	r2, #5
 80094b8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80094bc:	2302      	movs	r3, #2
 80094be:	2203      	movs	r2, #3
 80094c0:	2181      	movs	r1, #129	; 0x81
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f005 fd49 	bl	800ef5a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80094ce:	2302      	movs	r3, #2
 80094d0:	2203      	movs	r2, #3
 80094d2:	2101      	movs	r1, #1
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f005 fd40 	bl	800ef5a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	2302      	movs	r3, #2
 80094f6:	2101      	movs	r1, #1
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f005 fe1d 	bl	800f138 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8009514:	2181      	movs	r1, #129	; 0x81
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f005 fd45 	bl	800efa6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8009528:	2101      	movs	r1, #1
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f005 fd3b 	bl	800efa6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00e      	beq.n	8009568 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800955a:	4618      	mov	r0, r3
 800955c:	f005 fe1c 	bl	800f198 <USBD_static_free>
    pdev->pClassData = NULL;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009584:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800959c:	2303      	movs	r3, #3
 800959e:	e0ed      	b.n	800977c <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d052      	beq.n	8009652 <USBD_CUSTOM_HID_Setup+0xde>
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	f040 80dd 	bne.w	800976c <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	3b02      	subs	r3, #2
 80095b8:	2b09      	cmp	r3, #9
 80095ba:	d842      	bhi.n	8009642 <USBD_CUSTOM_HID_Setup+0xce>
 80095bc:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <USBD_CUSTOM_HID_Setup+0x50>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	080095fb 	.word	0x080095fb
 80095cc:	08009643 	.word	0x08009643
 80095d0:	08009643 	.word	0x08009643
 80095d4:	08009643 	.word	0x08009643
 80095d8:	08009643 	.word	0x08009643
 80095dc:	08009643 	.word	0x08009643
 80095e0:	0800962d 	.word	0x0800962d
 80095e4:	0800960b 	.word	0x0800960b
 80095e8:	080095ed 	.word	0x080095ed
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	885b      	ldrh	r3, [r3, #2]
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	605a      	str	r2, [r3, #4]
          break;
 80095f8:	e02a      	b.n	8009650 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	3304      	adds	r3, #4
 80095fe:	2201      	movs	r2, #1
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 fa9b 	bl	800ab3e <USBD_CtlSendData>
          break;
 8009608:	e022      	b.n	8009650 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	885b      	ldrh	r3, [r3, #2]
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	b29b      	uxth	r3, r3
 8009612:	b2db      	uxtb	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	609a      	str	r2, [r3, #8]
          break;
 800961a:	e019      	b.n	8009650 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3308      	adds	r3, #8
 8009620:	2201      	movs	r2, #1
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 fa8a 	bl	800ab3e <USBD_CtlSendData>
          break;
 800962a:	e011      	b.n	8009650 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2201      	movs	r2, #1
 8009630:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8009632:	6939      	ldr	r1, [r7, #16]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	88db      	ldrh	r3, [r3, #6]
 8009638:	461a      	mov	r2, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 faab 	bl	800ab96 <USBD_CtlPrepareRx>
          break;
 8009640:	e006      	b.n	8009650 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 fa09 	bl	800aa5c <USBD_CtlError>
          ret = USBD_FAIL;
 800964a:	2303      	movs	r3, #3
 800964c:	75fb      	strb	r3, [r7, #23]
          break;
 800964e:	bf00      	nop
      }
      break;
 8009650:	e093      	b.n	800977a <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	2b0b      	cmp	r3, #11
 8009658:	d87f      	bhi.n	800975a <USBD_CUSTOM_HID_Setup+0x1e6>
 800965a:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <USBD_CUSTOM_HID_Setup+0xec>)
 800965c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009660:	08009691 	.word	0x08009691
 8009664:	08009769 	.word	0x08009769
 8009668:	0800975b 	.word	0x0800975b
 800966c:	0800975b 	.word	0x0800975b
 8009670:	0800975b 	.word	0x0800975b
 8009674:	0800975b 	.word	0x0800975b
 8009678:	080096bb 	.word	0x080096bb
 800967c:	0800975b 	.word	0x0800975b
 8009680:	0800975b 	.word	0x0800975b
 8009684:	0800975b 	.word	0x0800975b
 8009688:	08009709 	.word	0x08009709
 800968c:	08009733 	.word	0x08009733
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b03      	cmp	r3, #3
 800969a:	d107      	bne.n	80096ac <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800969c:	f107 030e 	add.w	r3, r7, #14
 80096a0:	2202      	movs	r2, #2
 80096a2:	4619      	mov	r1, r3
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 fa4a 	bl	800ab3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096aa:	e05e      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 f9d4 	bl	800aa5c <USBD_CtlError>
            ret = USBD_FAIL;
 80096b4:	2303      	movs	r3, #3
 80096b6:	75fb      	strb	r3, [r7, #23]
          break;
 80096b8:	e057      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	885b      	ldrh	r3, [r3, #2]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	2b22      	cmp	r3, #34	; 0x22
 80096c4:	d10b      	bne.n	80096de <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	88db      	ldrh	r3, [r3, #6]
 80096ca:	2b4a      	cmp	r3, #74	; 0x4a
 80096cc:	bf28      	it	cs
 80096ce:	234a      	movcs	r3, #74	; 0x4a
 80096d0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	61bb      	str	r3, [r7, #24]
 80096dc:	e00d      	b.n	80096fa <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	885b      	ldrh	r3, [r3, #2]
 80096e2:	0a1b      	lsrs	r3, r3, #8
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b21      	cmp	r3, #33	; 0x21
 80096e8:	d107      	bne.n	80096fa <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80096ea:	4b26      	ldr	r3, [pc, #152]	; (8009784 <USBD_CUSTOM_HID_Setup+0x210>)
 80096ec:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	88db      	ldrh	r3, [r3, #6]
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	bf28      	it	cs
 80096f6:	2309      	movcs	r3, #9
 80096f8:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80096fa:	8bfb      	ldrh	r3, [r7, #30]
 80096fc:	461a      	mov	r2, r3
 80096fe:	69b9      	ldr	r1, [r7, #24]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f001 fa1c 	bl	800ab3e <USBD_CtlSendData>
          break;
 8009706:	e030      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b03      	cmp	r3, #3
 8009712:	d107      	bne.n	8009724 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	330c      	adds	r3, #12
 8009718:	2201      	movs	r2, #1
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 fa0e 	bl	800ab3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009722:	e022      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 f998 	bl	800aa5c <USBD_CtlError>
            ret = USBD_FAIL;
 800972c:	2303      	movs	r3, #3
 800972e:	75fb      	strb	r3, [r7, #23]
          break;
 8009730:	e01b      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b03      	cmp	r3, #3
 800973c:	d106      	bne.n	800974c <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	885b      	ldrh	r3, [r3, #2]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	461a      	mov	r2, r3
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800974a:	e00e      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 f984 	bl	800aa5c <USBD_CtlError>
            ret = USBD_FAIL;
 8009754:	2303      	movs	r3, #3
 8009756:	75fb      	strb	r3, [r7, #23]
          break;
 8009758:	e007      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800975a:	6839      	ldr	r1, [r7, #0]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 f97d 	bl	800aa5c <USBD_CtlError>
          ret = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	75fb      	strb	r3, [r7, #23]
          break;
 8009766:	e000      	b.n	800976a <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8009768:	bf00      	nop
      }
      break;
 800976a:	e006      	b.n	800977a <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f001 f974 	bl	800aa5c <USBD_CtlError>
      ret = USBD_FAIL;
 8009774:	2303      	movs	r3, #3
 8009776:	75fb      	strb	r3, [r7, #23]
      break;
 8009778:	bf00      	nop
  }
  return (uint8_t)ret;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	200000d0 	.word	0x200000d0

08009788 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	4613      	mov	r3, r2
 8009794:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e01a      	b.n	80097da <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097aa:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d10f      	bne.n	80097d8 <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	7d1b      	ldrb	r3, [r3, #20]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d109      	bne.n	80097d4 <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2201      	movs	r2, #1
 80097c4:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80097c6:	88fb      	ldrh	r3, [r7, #6]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	2181      	movs	r1, #129	; 0x81
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f005 fc92 	bl	800f0f6 <USBD_LL_Transmit>
 80097d2:	e001      	b.n	80097d8 <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e000      	b.n	80097da <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2229      	movs	r2, #41	; 0x29
 80097f0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80097f2:	4b03      	ldr	r3, [pc, #12]	; (8009800 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	2000004c 	.word	0x2000004c

08009804 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2229      	movs	r2, #41	; 0x29
 8009810:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8009812:	4b03      	ldr	r3, [pc, #12]	; (8009820 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000078 	.word	0x20000078

08009824 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2229      	movs	r2, #41	; 0x29
 8009830:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8009832:	4b03      	ldr	r3, [pc, #12]	; (8009840 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	200000a4 	.word	0x200000a4

08009844 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009856:	2200      	movs	r2, #0
 8009858:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	460b      	mov	r3, r1
 8009872:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800987a:	2b00      	cmp	r3, #0
 800987c:	d101      	bne.n	8009882 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800987e:	2303      	movs	r3, #3
 8009880:	e00e      	b.n	80098a0 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009888:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	7810      	ldrb	r0, [r2, #0]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	7852      	ldrb	r2, [r2, #1]
 800989a:	4611      	mov	r1, r2
 800989c:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e00a      	b.n	80098d4 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	2302      	movs	r3, #2
 80098ca:	2101      	movs	r1, #1
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f005 fc33 	bl	800f138 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098ea:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d101      	bne.n	80098f6 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e011      	b.n	800991a <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d10c      	bne.n	8009918 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	7810      	ldrb	r0, [r2, #0]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	7852      	ldrb	r2, [r2, #1]
 800990e:	4611      	mov	r1, r2
 8009910:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	220a      	movs	r2, #10
 8009930:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009932:	4b03      	ldr	r3, [pc, #12]	; (8009940 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009934:	4618      	mov	r0, r3
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	200000dc 	.word	0x200000dc

08009944 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009954:	2303      	movs	r3, #3
 8009956:	e004      	b.n	8009962 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	4613      	mov	r3, r2
 800997a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009982:	2303      	movs	r3, #3
 8009984:	e01f      	b.n	80099c6 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	79fa      	ldrb	r2, [r7, #7]
 80099b8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f005 fa66 	bl	800ee8c <USBD_LL_Init>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e016      	b.n	8009a14 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00b      	beq.n	8009a12 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	f107 020e 	add.w	r2, r7, #14
 8009a06:	4610      	mov	r0, r2
 8009a08:	4798      	blx	r3
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f005 fa7d 	bl	800ef24 <USBD_LL_Start>
 8009a2a:	4603      	mov	r3, r0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a56:	2303      	movs	r3, #3
 8009a58:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d009      	beq.n	8009a78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	4798      	blx	r3
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d007      	beq.n	8009aa8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	78fa      	ldrb	r2, [r7, #3]
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	4798      	blx	r3
  }

  return USBD_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 ff8f 	bl	800a9e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ae6:	f003 031f 	and.w	r3, r3, #31
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d01a      	beq.n	8009b24 <USBD_LL_SetupStage+0x72>
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d822      	bhi.n	8009b38 <USBD_LL_SetupStage+0x86>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <USBD_LL_SetupStage+0x4a>
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d00a      	beq.n	8009b10 <USBD_LL_SetupStage+0x5e>
 8009afa:	e01d      	b.n	8009b38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fa61 	bl	8009fcc <USBD_StdDevReq>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b0e:	e020      	b.n	8009b52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fac5 	bl	800a0a8 <USBD_StdItfReq>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
      break;
 8009b22:	e016      	b.n	8009b52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fb04 	bl	800a13a <USBD_StdEPReq>
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]
      break;
 8009b36:	e00c      	b.n	8009b52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f005 fa4c 	bl	800efe4 <USBD_LL_StallEP>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b50:	bf00      	nop
  }

  return ret;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	460b      	mov	r3, r1
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d138      	bne.n	8009be2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d14a      	bne.n	8009c18 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d913      	bls.n	8009bb6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	68da      	ldr	r2, [r3, #12]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf28      	it	cs
 8009ba8:	4613      	movcs	r3, r2
 8009baa:	461a      	mov	r2, r3
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f001 f80e 	bl	800abd0 <USBD_CtlContinueRx>
 8009bb4:	e030      	b.n	8009c18 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d10b      	bne.n	8009bda <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d005      	beq.n	8009bda <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f001 f809 	bl	800abf2 <USBD_CtlSendStatus>
 8009be0:	e01a      	b.n	8009c18 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d114      	bne.n	8009c18 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00e      	beq.n	8009c18 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	7afa      	ldrb	r2, [r7, #11]
 8009c04:	4611      	mov	r1, r2
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	4798      	blx	r3
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
 8009c16:	e000      	b.n	8009c1a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b086      	sub	sp, #24
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009c30:	7afb      	ldrb	r3, [r7, #11]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d16b      	bne.n	8009d0e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3314      	adds	r3, #20
 8009c3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d156      	bne.n	8009cf4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d914      	bls.n	8009c7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	1ad2      	subs	r2, r2, r3
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	461a      	mov	r2, r3
 8009c66:	6879      	ldr	r1, [r7, #4]
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 ff83 	bl	800ab74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2200      	movs	r2, #0
 8009c72:	2100      	movs	r1, #0
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f005 fa5f 	bl	800f138 <USBD_LL_PrepareReceive>
 8009c7a:	e03b      	b.n	8009cf4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d11c      	bne.n	8009cc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d316      	bcc.n	8009cc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d20f      	bcs.n	8009cc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 ff64 	bl	800ab74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2100      	movs	r1, #0
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f005 fa3c 	bl	800f138 <USBD_LL_PrepareReceive>
 8009cc0:	e018      	b.n	8009cf4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d10b      	bne.n	8009ce6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce6:	2180      	movs	r1, #128	; 0x80
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f005 f97b 	bl	800efe4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f000 ff92 	bl	800ac18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d122      	bne.n	8009d44 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff fe98 	bl	8009a34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d0c:	e01a      	b.n	8009d44 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d114      	bne.n	8009d44 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00e      	beq.n	8009d44 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	7afa      	ldrb	r2, [r7, #11]
 8009d30:	4611      	mov	r1, r2
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	4798      	blx	r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
 8009d42:	e000      	b.n	8009d46 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e02f      	b.n	8009de2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00f      	beq.n	8009dac <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d009      	beq.n	8009dac <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6852      	ldr	r2, [r2, #4]
 8009da4:	b2d2      	uxtb	r2, r2
 8009da6:	4611      	mov	r1, r2
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f005 f8d1 	bl	800ef5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2240      	movs	r2, #64	; 0x40
 8009dc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2180      	movs	r1, #128	; 0x80
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f005 f8c3 	bl	800ef5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2240      	movs	r2, #64	; 0x40
 8009dde:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	460b      	mov	r3, r1
 8009df4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	78fa      	ldrb	r2, [r7, #3]
 8009dfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b083      	sub	sp, #12
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2204      	movs	r2, #4
 8009e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	d106      	bne.n	8009e58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e012      	b.n	8009ea2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d10b      	bne.n	8009ea0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e014      	b.n	8009eee <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d10d      	bne.n	8009eec <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed6:	6a1b      	ldr	r3, [r3, #32]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d007      	beq.n	8009eec <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	78fa      	ldrb	r2, [r7, #3]
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e014      	b.n	8009f3a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d10d      	bne.n	8009f38 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d007      	beq.n	8009f38 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	78fa      	ldrb	r2, [r7, #3]
 8009f32:	4611      	mov	r1, r2
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d009      	beq.n	8009f86 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6852      	ldr	r2, [r2, #4]
 8009f7e:	b2d2      	uxtb	r2, r2
 8009f80:	4611      	mov	r1, r2
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	4798      	blx	r3
  }

  return USBD_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b087      	sub	sp, #28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009fae:	8a3b      	ldrh	r3, [r7, #16]
 8009fb0:	021b      	lsls	r3, r3, #8
 8009fb2:	b21a      	sxth	r2, r3
 8009fb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	b21b      	sxth	r3, r3
 8009fbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009fbe:	89fb      	ldrh	r3, [r7, #14]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	371c      	adds	r7, #28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fe2:	2b40      	cmp	r3, #64	; 0x40
 8009fe4:	d005      	beq.n	8009ff2 <USBD_StdDevReq+0x26>
 8009fe6:	2b40      	cmp	r3, #64	; 0x40
 8009fe8:	d853      	bhi.n	800a092 <USBD_StdDevReq+0xc6>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00b      	beq.n	800a006 <USBD_StdDevReq+0x3a>
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	d14f      	bne.n	800a092 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	6839      	ldr	r1, [r7, #0]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	4798      	blx	r3
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]
      break;
 800a004:	e04a      	b.n	800a09c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	785b      	ldrb	r3, [r3, #1]
 800a00a:	2b09      	cmp	r3, #9
 800a00c:	d83b      	bhi.n	800a086 <USBD_StdDevReq+0xba>
 800a00e:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <USBD_StdDevReq+0x48>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a069 	.word	0x0800a069
 800a018:	0800a07d 	.word	0x0800a07d
 800a01c:	0800a087 	.word	0x0800a087
 800a020:	0800a073 	.word	0x0800a073
 800a024:	0800a087 	.word	0x0800a087
 800a028:	0800a047 	.word	0x0800a047
 800a02c:	0800a03d 	.word	0x0800a03d
 800a030:	0800a087 	.word	0x0800a087
 800a034:	0800a05f 	.word	0x0800a05f
 800a038:	0800a051 	.word	0x0800a051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f9de 	bl	800a400 <USBD_GetDescriptor>
          break;
 800a044:	e024      	b.n	800a090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fb43 	bl	800a6d4 <USBD_SetAddress>
          break;
 800a04e:	e01f      	b.n	800a090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fb82 	bl	800a75c <USBD_SetConfig>
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]
          break;
 800a05c:	e018      	b.n	800a090 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fc21 	bl	800a8a8 <USBD_GetConfig>
          break;
 800a066:	e013      	b.n	800a090 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fc52 	bl	800a914 <USBD_GetStatus>
          break;
 800a070:	e00e      	b.n	800a090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fc81 	bl	800a97c <USBD_SetFeature>
          break;
 800a07a:	e009      	b.n	800a090 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fc90 	bl	800a9a4 <USBD_ClrFeature>
          break;
 800a084:	e004      	b.n	800a090 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fce7 	bl	800aa5c <USBD_CtlError>
          break;
 800a08e:	bf00      	nop
      }
      break;
 800a090:	e004      	b.n	800a09c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fce1 	bl	800aa5c <USBD_CtlError>
      break;
 800a09a:	bf00      	nop
  }

  return ret;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop

0800a0a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0be:	2b40      	cmp	r3, #64	; 0x40
 800a0c0:	d005      	beq.n	800a0ce <USBD_StdItfReq+0x26>
 800a0c2:	2b40      	cmp	r3, #64	; 0x40
 800a0c4:	d82f      	bhi.n	800a126 <USBD_StdItfReq+0x7e>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <USBD_StdItfReq+0x26>
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d12b      	bne.n	800a126 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d81d      	bhi.n	800a118 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	889b      	ldrh	r3, [r3, #4]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d813      	bhi.n	800a10e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	88db      	ldrh	r3, [r3, #6]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d110      	bne.n	800a122 <USBD_StdItfReq+0x7a>
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10d      	bne.n	800a122 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fd73 	bl	800abf2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a10c:	e009      	b.n	800a122 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fca3 	bl	800aa5c <USBD_CtlError>
          break;
 800a116:	e004      	b.n	800a122 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fc9e 	bl	800aa5c <USBD_CtlError>
          break;
 800a120:	e000      	b.n	800a124 <USBD_StdItfReq+0x7c>
          break;
 800a122:	bf00      	nop
      }
      break;
 800a124:	e004      	b.n	800a130 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fc97 	bl	800aa5c <USBD_CtlError>
      break;
 800a12e:	bf00      	nop
  }

  return ret;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	889b      	ldrh	r3, [r3, #4]
 800a14c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a156:	2b40      	cmp	r3, #64	; 0x40
 800a158:	d007      	beq.n	800a16a <USBD_StdEPReq+0x30>
 800a15a:	2b40      	cmp	r3, #64	; 0x40
 800a15c:	f200 8145 	bhi.w	800a3ea <USBD_StdEPReq+0x2b0>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00c      	beq.n	800a17e <USBD_StdEPReq+0x44>
 800a164:	2b20      	cmp	r3, #32
 800a166:	f040 8140 	bne.w	800a3ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	4798      	blx	r3
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]
      break;
 800a17c:	e13a      	b.n	800a3f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	785b      	ldrb	r3, [r3, #1]
 800a182:	2b03      	cmp	r3, #3
 800a184:	d007      	beq.n	800a196 <USBD_StdEPReq+0x5c>
 800a186:	2b03      	cmp	r3, #3
 800a188:	f300 8129 	bgt.w	800a3de <USBD_StdEPReq+0x2a4>
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d07f      	beq.n	800a290 <USBD_StdEPReq+0x156>
 800a190:	2b01      	cmp	r3, #1
 800a192:	d03c      	beq.n	800a20e <USBD_StdEPReq+0xd4>
 800a194:	e123      	b.n	800a3de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d002      	beq.n	800a1a8 <USBD_StdEPReq+0x6e>
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d016      	beq.n	800a1d4 <USBD_StdEPReq+0x9a>
 800a1a6:	e02c      	b.n	800a202 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00d      	beq.n	800a1ca <USBD_StdEPReq+0x90>
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	2b80      	cmp	r3, #128	; 0x80
 800a1b2:	d00a      	beq.n	800a1ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f004 ff13 	bl	800efe4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1be:	2180      	movs	r1, #128	; 0x80
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f004 ff0f 	bl	800efe4 <USBD_LL_StallEP>
 800a1c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1c8:	e020      	b.n	800a20c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fc45 	bl	800aa5c <USBD_CtlError>
              break;
 800a1d2:	e01b      	b.n	800a20c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	885b      	ldrh	r3, [r3, #2]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10e      	bne.n	800a1fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00b      	beq.n	800a1fa <USBD_StdEPReq+0xc0>
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	2b80      	cmp	r3, #128	; 0x80
 800a1e6:	d008      	beq.n	800a1fa <USBD_StdEPReq+0xc0>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	88db      	ldrh	r3, [r3, #6]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d104      	bne.n	800a1fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f004 fef5 	bl	800efe4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fcf9 	bl	800abf2 <USBD_CtlSendStatus>

              break;
 800a200:	e004      	b.n	800a20c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fc29 	bl	800aa5c <USBD_CtlError>
              break;
 800a20a:	bf00      	nop
          }
          break;
 800a20c:	e0ec      	b.n	800a3e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d002      	beq.n	800a220 <USBD_StdEPReq+0xe6>
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d016      	beq.n	800a24c <USBD_StdEPReq+0x112>
 800a21e:	e030      	b.n	800a282 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <USBD_StdEPReq+0x108>
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	2b80      	cmp	r3, #128	; 0x80
 800a22a:	d00a      	beq.n	800a242 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f004 fed7 	bl	800efe4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a236:	2180      	movs	r1, #128	; 0x80
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f004 fed3 	bl	800efe4 <USBD_LL_StallEP>
 800a23e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a240:	e025      	b.n	800a28e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fc09 	bl	800aa5c <USBD_CtlError>
              break;
 800a24a:	e020      	b.n	800a28e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	885b      	ldrh	r3, [r3, #2]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d11b      	bne.n	800a28c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	4619      	mov	r1, r3
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f004 fedd 	bl	800f022 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fcc2 	bl	800abf2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	4798      	blx	r3
 800a27c:	4603      	mov	r3, r0
 800a27e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a280:	e004      	b.n	800a28c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fbe9 	bl	800aa5c <USBD_CtlError>
              break;
 800a28a:	e000      	b.n	800a28e <USBD_StdEPReq+0x154>
              break;
 800a28c:	bf00      	nop
          }
          break;
 800a28e:	e0ab      	b.n	800a3e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d002      	beq.n	800a2a2 <USBD_StdEPReq+0x168>
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d032      	beq.n	800a306 <USBD_StdEPReq+0x1cc>
 800a2a0:	e097      	b.n	800a3d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d007      	beq.n	800a2b8 <USBD_StdEPReq+0x17e>
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
 800a2aa:	2b80      	cmp	r3, #128	; 0x80
 800a2ac:	d004      	beq.n	800a2b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fbd3 	bl	800aa5c <USBD_CtlError>
                break;
 800a2b6:	e091      	b.n	800a3dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da0b      	bge.n	800a2d8 <USBD_StdEPReq+0x19e>
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	3310      	adds	r3, #16
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	e00b      	b.n	800a2f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2de:	4613      	mov	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fc1d 	bl	800ab3e <USBD_CtlSendData>
              break;
 800a304:	e06a      	b.n	800a3dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da11      	bge.n	800a332 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a30e:	7bbb      	ldrb	r3, [r7, #14]
 800a310:	f003 020f 	and.w	r2, r3, #15
 800a314:	6879      	ldr	r1, [r7, #4]
 800a316:	4613      	mov	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	440b      	add	r3, r1
 800a320:	3324      	adds	r3, #36	; 0x24
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d117      	bne.n	800a358 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fb96 	bl	800aa5c <USBD_CtlError>
                  break;
 800a330:	e054      	b.n	800a3dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	f003 020f 	and.w	r2, r3, #15
 800a338:	6879      	ldr	r1, [r7, #4]
 800a33a:	4613      	mov	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d104      	bne.n	800a358 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fb83 	bl	800aa5c <USBD_CtlError>
                  break;
 800a356:	e041      	b.n	800a3dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da0b      	bge.n	800a378 <USBD_StdEPReq+0x23e>
 800a360:	7bbb      	ldrb	r3, [r7, #14]
 800a362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	3310      	adds	r3, #16
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	4413      	add	r3, r2
 800a374:	3304      	adds	r3, #4
 800a376:	e00b      	b.n	800a390 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	3304      	adds	r3, #4
 800a390:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a392:	7bbb      	ldrb	r3, [r7, #14]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <USBD_StdEPReq+0x264>
 800a398:	7bbb      	ldrb	r3, [r7, #14]
 800a39a:	2b80      	cmp	r3, #128	; 0x80
 800a39c:	d103      	bne.n	800a3a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	e00e      	b.n	800a3c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f004 fe58 	bl	800f060 <USBD_LL_IsStallEP>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	e002      	b.n	800a3c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fbb7 	bl	800ab3e <USBD_CtlSendData>
              break;
 800a3d0:	e004      	b.n	800a3dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fb41 	bl	800aa5c <USBD_CtlError>
              break;
 800a3da:	bf00      	nop
          }
          break;
 800a3dc:	e004      	b.n	800a3e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fb3b 	bl	800aa5c <USBD_CtlError>
          break;
 800a3e6:	bf00      	nop
      }
      break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fb35 	bl	800aa5c <USBD_CtlError>
      break;
 800a3f2:	bf00      	nop
  }

  return ret;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
	...

0800a400 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a412:	2300      	movs	r3, #0
 800a414:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	0a1b      	lsrs	r3, r3, #8
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	3b01      	subs	r3, #1
 800a420:	2b06      	cmp	r3, #6
 800a422:	f200 8128 	bhi.w	800a676 <USBD_GetDescriptor+0x276>
 800a426:	a201      	add	r2, pc, #4	; (adr r2, 800a42c <USBD_GetDescriptor+0x2c>)
 800a428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42c:	0800a449 	.word	0x0800a449
 800a430:	0800a461 	.word	0x0800a461
 800a434:	0800a4a1 	.word	0x0800a4a1
 800a438:	0800a677 	.word	0x0800a677
 800a43c:	0800a677 	.word	0x0800a677
 800a440:	0800a617 	.word	0x0800a617
 800a444:	0800a643 	.word	0x0800a643
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	7c12      	ldrb	r2, [r2, #16]
 800a454:	f107 0108 	add.w	r1, r7, #8
 800a458:	4610      	mov	r0, r2
 800a45a:	4798      	blx	r3
 800a45c:	60f8      	str	r0, [r7, #12]
      break;
 800a45e:	e112      	b.n	800a686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	7c1b      	ldrb	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10d      	bne.n	800a484 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	f107 0208 	add.w	r2, r7, #8
 800a474:	4610      	mov	r0, r2
 800a476:	4798      	blx	r3
 800a478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	2202      	movs	r2, #2
 800a480:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a482:	e100      	b.n	800a686 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	f107 0208 	add.w	r2, r7, #8
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
 800a494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3301      	adds	r3, #1
 800a49a:	2202      	movs	r2, #2
 800a49c:	701a      	strb	r2, [r3, #0]
      break;
 800a49e:	e0f2      	b.n	800a686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	885b      	ldrh	r3, [r3, #2]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b05      	cmp	r3, #5
 800a4a8:	f200 80ac 	bhi.w	800a604 <USBD_GetDescriptor+0x204>
 800a4ac:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <USBD_GetDescriptor+0xb4>)
 800a4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b2:	bf00      	nop
 800a4b4:	0800a4cd 	.word	0x0800a4cd
 800a4b8:	0800a501 	.word	0x0800a501
 800a4bc:	0800a535 	.word	0x0800a535
 800a4c0:	0800a569 	.word	0x0800a569
 800a4c4:	0800a59d 	.word	0x0800a59d
 800a4c8:	0800a5d1 	.word	0x0800a5d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	7c12      	ldrb	r2, [r2, #16]
 800a4e4:	f107 0108 	add.w	r1, r7, #8
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4798      	blx	r3
 800a4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ee:	e091      	b.n	800a614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fab2 	bl	800aa5c <USBD_CtlError>
            err++;
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fe:	e089      	b.n	800a614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a522:	e077      	b.n	800a614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa98 	bl	800aa5c <USBD_CtlError>
            err++;
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	3301      	adds	r3, #1
 800a530:	72fb      	strb	r3, [r7, #11]
          break;
 800a532:	e06f      	b.n	800a614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	7c12      	ldrb	r2, [r2, #16]
 800a54c:	f107 0108 	add.w	r1, r7, #8
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a556:	e05d      	b.n	800a614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa7e 	bl	800aa5c <USBD_CtlError>
            err++;
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	3301      	adds	r3, #1
 800a564:	72fb      	strb	r3, [r7, #11]
          break;
 800a566:	e055      	b.n	800a614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	7c12      	ldrb	r2, [r2, #16]
 800a580:	f107 0108 	add.w	r1, r7, #8
 800a584:	4610      	mov	r0, r2
 800a586:	4798      	blx	r3
 800a588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58a:	e043      	b.n	800a614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fa64 	bl	800aa5c <USBD_CtlError>
            err++;
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	3301      	adds	r3, #1
 800a598:	72fb      	strb	r3, [r7, #11]
          break;
 800a59a:	e03b      	b.n	800a614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00b      	beq.n	800a5c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	7c12      	ldrb	r2, [r2, #16]
 800a5b4:	f107 0108 	add.w	r1, r7, #8
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	4798      	blx	r3
 800a5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5be:	e029      	b.n	800a614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fa4a 	bl	800aa5c <USBD_CtlError>
            err++;
 800a5c8:	7afb      	ldrb	r3, [r7, #11]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a5ce:	e021      	b.n	800a614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	7c12      	ldrb	r2, [r2, #16]
 800a5e8:	f107 0108 	add.w	r1, r7, #8
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	4798      	blx	r3
 800a5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5f2:	e00f      	b.n	800a614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fa30 	bl	800aa5c <USBD_CtlError>
            err++;
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	3301      	adds	r3, #1
 800a600:	72fb      	strb	r3, [r7, #11]
          break;
 800a602:	e007      	b.n	800a614 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fa28 	bl	800aa5c <USBD_CtlError>
          err++;
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	3301      	adds	r3, #1
 800a610:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a612:	bf00      	nop
      }
      break;
 800a614:	e037      	b.n	800a686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	7c1b      	ldrb	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d109      	bne.n	800a632 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a626:	f107 0208 	add.w	r2, r7, #8
 800a62a:	4610      	mov	r0, r2
 800a62c:	4798      	blx	r3
 800a62e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a630:	e029      	b.n	800a686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fa11 	bl	800aa5c <USBD_CtlError>
        err++;
 800a63a:	7afb      	ldrb	r3, [r7, #11]
 800a63c:	3301      	adds	r3, #1
 800a63e:	72fb      	strb	r3, [r7, #11]
      break;
 800a640:	e021      	b.n	800a686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	7c1b      	ldrb	r3, [r3, #16]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10d      	bne.n	800a666 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	f107 0208 	add.w	r2, r7, #8
 800a656:	4610      	mov	r0, r2
 800a658:	4798      	blx	r3
 800a65a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	2207      	movs	r2, #7
 800a662:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a664:	e00f      	b.n	800a686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f9f7 	bl	800aa5c <USBD_CtlError>
        err++;
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	3301      	adds	r3, #1
 800a672:	72fb      	strb	r3, [r7, #11]
      break;
 800a674:	e007      	b.n	800a686 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f9ef 	bl	800aa5c <USBD_CtlError>
      err++;
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	3301      	adds	r3, #1
 800a682:	72fb      	strb	r3, [r7, #11]
      break;
 800a684:	bf00      	nop
  }

  if (err != 0U)
 800a686:	7afb      	ldrb	r3, [r7, #11]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d11e      	bne.n	800a6ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	88db      	ldrh	r3, [r3, #6]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d016      	beq.n	800a6c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a694:	893b      	ldrh	r3, [r7, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00e      	beq.n	800a6b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	88da      	ldrh	r2, [r3, #6]
 800a69e:	893b      	ldrh	r3, [r7, #8]
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	bf28      	it	cs
 800a6a4:	4613      	movcs	r3, r2
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6aa:	893b      	ldrh	r3, [r7, #8]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	68f9      	ldr	r1, [r7, #12]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fa44 	bl	800ab3e <USBD_CtlSendData>
 800a6b6:	e009      	b.n	800a6cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f9ce 	bl	800aa5c <USBD_CtlError>
 800a6c0:	e004      	b.n	800a6cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa95 	bl	800abf2 <USBD_CtlSendStatus>
 800a6c8:	e000      	b.n	800a6cc <USBD_GetDescriptor+0x2cc>
    return;
 800a6ca:	bf00      	nop
  }
}
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop

0800a6d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	889b      	ldrh	r3, [r3, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d131      	bne.n	800a74a <USBD_SetAddress+0x76>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	88db      	ldrh	r3, [r3, #6]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d12d      	bne.n	800a74a <USBD_SetAddress+0x76>
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	885b      	ldrh	r3, [r3, #2]
 800a6f2:	2b7f      	cmp	r3, #127	; 0x7f
 800a6f4:	d829      	bhi.n	800a74a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	885b      	ldrh	r3, [r3, #2]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a700:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d104      	bne.n	800a718 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f9a3 	bl	800aa5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a716:	e01d      	b.n	800a754 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	7bfa      	ldrb	r2, [r7, #15]
 800a71c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f004 fcc7 	bl	800f0b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fa61 	bl	800abf2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d004      	beq.n	800a740 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2202      	movs	r2, #2
 800a73a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73e:	e009      	b.n	800a754 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a748:	e004      	b.n	800a754 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f985 	bl	800aa5c <USBD_CtlError>
  }
}
 800a752:	bf00      	nop
 800a754:	bf00      	nop
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	885b      	ldrh	r3, [r3, #2]
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	4b4c      	ldr	r3, [pc, #304]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a772:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a774:	4b4b      	ldr	r3, [pc, #300]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d905      	bls.n	800a788 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f96c 	bl	800aa5c <USBD_CtlError>
    return USBD_FAIL;
 800a784:	2303      	movs	r3, #3
 800a786:	e088      	b.n	800a89a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	2b02      	cmp	r3, #2
 800a792:	d002      	beq.n	800a79a <USBD_SetConfig+0x3e>
 800a794:	2b03      	cmp	r3, #3
 800a796:	d025      	beq.n	800a7e4 <USBD_SetConfig+0x88>
 800a798:	e071      	b.n	800a87e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a79a:	4b42      	ldr	r3, [pc, #264]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d01c      	beq.n	800a7dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a7a2:	4b40      	ldr	r3, [pc, #256]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7ac:	4b3d      	ldr	r3, [pc, #244]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff f949 	bl	8009a4a <USBD_SetClassConfig>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d004      	beq.n	800a7cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f949 	bl	800aa5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7ca:	e065      	b.n	800a898 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fa10 	bl	800abf2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2203      	movs	r2, #3
 800a7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7da:	e05d      	b.n	800a898 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fa08 	bl	800abf2 <USBD_CtlSendStatus>
      break;
 800a7e2:	e059      	b.n	800a898 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a7e4:	4b2f      	ldr	r3, [pc, #188]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d112      	bne.n	800a812 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a7f4:	4b2b      	ldr	r3, [pc, #172]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7fe:	4b29      	ldr	r3, [pc, #164]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff f93c 	bl	8009a82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f9f1 	bl	800abf2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a810:	e042      	b.n	800a898 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a812:	4b24      	ldr	r3, [pc, #144]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d02a      	beq.n	800a876 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	b2db      	uxtb	r3, r3
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7ff f92a 	bl	8009a82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a82e:	4b1d      	ldr	r3, [pc, #116]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a838:	4b1a      	ldr	r3, [pc, #104]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff f903 	bl	8009a4a <USBD_SetClassConfig>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00f      	beq.n	800a86e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f903 	bl	800aa5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7ff f90f 	bl	8009a82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a86c:	e014      	b.n	800a898 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f9bf 	bl	800abf2 <USBD_CtlSendStatus>
      break;
 800a874:	e010      	b.n	800a898 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f9bb 	bl	800abf2 <USBD_CtlSendStatus>
      break;
 800a87c:	e00c      	b.n	800a898 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f8eb 	bl	800aa5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a886:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <USBD_SetConfig+0x148>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff f8f8 	bl	8009a82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a892:	2303      	movs	r3, #3
 800a894:	73fb      	strb	r3, [r7, #15]
      break;
 800a896:	bf00      	nop
  }

  return ret;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200003bc 	.word	0x200003bc

0800a8a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	88db      	ldrh	r3, [r3, #6]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d004      	beq.n	800a8c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f8cd 	bl	800aa5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a8c2:	e023      	b.n	800a90c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	dc02      	bgt.n	800a8d6 <USBD_GetConfig+0x2e>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dc03      	bgt.n	800a8dc <USBD_GetConfig+0x34>
 800a8d4:	e015      	b.n	800a902 <USBD_GetConfig+0x5a>
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d00b      	beq.n	800a8f2 <USBD_GetConfig+0x4a>
 800a8da:	e012      	b.n	800a902 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3308      	adds	r3, #8
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f927 	bl	800ab3e <USBD_CtlSendData>
        break;
 800a8f0:	e00c      	b.n	800a90c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f91f 	bl	800ab3e <USBD_CtlSendData>
        break;
 800a900:	e004      	b.n	800a90c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f8a9 	bl	800aa5c <USBD_CtlError>
        break;
 800a90a:	bf00      	nop
}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a924:	b2db      	uxtb	r3, r3
 800a926:	3b01      	subs	r3, #1
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d81e      	bhi.n	800a96a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	88db      	ldrh	r3, [r3, #6]
 800a930:	2b02      	cmp	r3, #2
 800a932:	d004      	beq.n	800a93e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f890 	bl	800aa5c <USBD_CtlError>
        break;
 800a93c:	e01a      	b.n	800a974 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d005      	beq.n	800a95a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	f043 0202 	orr.w	r2, r3, #2
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	330c      	adds	r3, #12
 800a95e:	2202      	movs	r2, #2
 800a960:	4619      	mov	r1, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f8eb 	bl	800ab3e <USBD_CtlSendData>
      break;
 800a968:	e004      	b.n	800a974 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a96a:	6839      	ldr	r1, [r7, #0]
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f875 	bl	800aa5c <USBD_CtlError>
      break;
 800a972:	bf00      	nop
  }
}
 800a974:	bf00      	nop
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	885b      	ldrh	r3, [r3, #2]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d106      	bne.n	800a99c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f92b 	bl	800abf2 <USBD_CtlSendStatus>
  }
}
 800a99c:	bf00      	nop
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d80b      	bhi.n	800a9d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	885b      	ldrh	r3, [r3, #2]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d10c      	bne.n	800a9de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f910 	bl	800abf2 <USBD_CtlSendStatus>
      }
      break;
 800a9d2:	e004      	b.n	800a9de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f840 	bl	800aa5c <USBD_CtlError>
      break;
 800a9dc:	e000      	b.n	800a9e0 <USBD_ClrFeature+0x3c>
      break;
 800a9de:	bf00      	nop
  }
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	3301      	adds	r3, #1
 800aa02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	781a      	ldrb	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f7ff fabc 	bl	8009f90 <SWAPBYTE>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3301      	adds	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7ff faaf 	bl	8009f90 <SWAPBYTE>
 800aa32:	4603      	mov	r3, r0
 800aa34:	461a      	mov	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3301      	adds	r3, #1
 800aa44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7ff faa2 	bl	8009f90 <SWAPBYTE>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	80da      	strh	r2, [r3, #6]
}
 800aa54:	bf00      	nop
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa66:	2180      	movs	r1, #128	; 0x80
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f004 fabb 	bl	800efe4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa6e:	2100      	movs	r1, #0
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f004 fab7 	bl	800efe4 <USBD_LL_StallEP>
}
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b086      	sub	sp, #24
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d036      	beq.n	800ab02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aa98:	6938      	ldr	r0, [r7, #16]
 800aa9a:	f000 f836 	bl	800ab0a <USBD_GetLen>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	4413      	add	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	7812      	ldrb	r2, [r2, #0]
 800aab6:	701a      	strb	r2, [r3, #0]
  idx++;
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	3301      	adds	r3, #1
 800aabc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aabe:	7dfb      	ldrb	r3, [r7, #23]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	4413      	add	r3, r2
 800aac4:	2203      	movs	r2, #3
 800aac6:	701a      	strb	r2, [r3, #0]
  idx++;
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	3301      	adds	r3, #1
 800aacc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aace:	e013      	b.n	800aaf8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	4413      	add	r3, r2
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	7812      	ldrb	r2, [r2, #0]
 800aada:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	3301      	adds	r3, #1
 800aae0:	613b      	str	r3, [r7, #16]
    idx++;
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	3301      	adds	r3, #1
 800aae6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	4413      	add	r3, r2
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
    idx++;
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e7      	bne.n	800aad0 <USBD_GetString+0x52>
 800ab00:	e000      	b.n	800ab04 <USBD_GetString+0x86>
    return;
 800ab02:	bf00      	nop
  }
}
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ab1a:	e005      	b.n	800ab28 <USBD_GetLen+0x1e>
  {
    len++;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	3301      	adds	r3, #1
 800ab26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1f5      	bne.n	800ab1c <USBD_GetLen+0x12>
  }

  return len;
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	60b9      	str	r1, [r7, #8]
 800ab48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	2100      	movs	r1, #0
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f004 fac6 	bl	800f0f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	2100      	movs	r1, #0
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f004 fab5 	bl	800f0f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2203      	movs	r2, #3
 800aba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	2100      	movs	r1, #0
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f004 fab9 	bl	800f138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	2100      	movs	r1, #0
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f004 faa8 	bl	800f138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2204      	movs	r2, #4
 800abfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac02:	2300      	movs	r3, #0
 800ac04:	2200      	movs	r2, #0
 800ac06:	2100      	movs	r1, #0
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f004 fa74 	bl	800f0f6 <USBD_LL_Transmit>

  return USBD_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2205      	movs	r2, #5
 800ac24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac28:	2300      	movs	r3, #0
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f004 fa82 	bl	800f138 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
	...

0800ac40 <__NVIC_SetPriority>:
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	4603      	mov	r3, r0
 800ac48:	6039      	str	r1, [r7, #0]
 800ac4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	db0a      	blt.n	800ac6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	490c      	ldr	r1, [pc, #48]	; (800ac8c <__NVIC_SetPriority+0x4c>)
 800ac5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac5e:	0112      	lsls	r2, r2, #4
 800ac60:	b2d2      	uxtb	r2, r2
 800ac62:	440b      	add	r3, r1
 800ac64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac68:	e00a      	b.n	800ac80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	4908      	ldr	r1, [pc, #32]	; (800ac90 <__NVIC_SetPriority+0x50>)
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	3b04      	subs	r3, #4
 800ac78:	0112      	lsls	r2, r2, #4
 800ac7a:	b2d2      	uxtb	r2, r2
 800ac7c:	440b      	add	r3, r1
 800ac7e:	761a      	strb	r2, [r3, #24]
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	e000e100 	.word	0xe000e100
 800ac90:	e000ed00 	.word	0xe000ed00

0800ac94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac94:	b580      	push	{r7, lr}
 800ac96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <SysTick_Handler+0x1c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac9c:	f002 fcb4 	bl	800d608 <xTaskGetSchedulerState>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d001      	beq.n	800acaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aca6:	f003 fbcf 	bl	800e448 <xPortSysTickHandler>
  }
}
 800acaa:	bf00      	nop
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	e000e010 	.word	0xe000e010

0800acb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800acb4:	b580      	push	{r7, lr}
 800acb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800acb8:	2100      	movs	r1, #0
 800acba:	f06f 0004 	mvn.w	r0, #4
 800acbe:	f7ff ffbf 	bl	800ac40 <__NVIC_SetPriority>
#endif
}
 800acc2:	bf00      	nop
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acce:	f3ef 8305 	mrs	r3, IPSR
 800acd2:	603b      	str	r3, [r7, #0]
  return(result);
 800acd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800acda:	f06f 0305 	mvn.w	r3, #5
 800acde:	607b      	str	r3, [r7, #4]
 800ace0:	e00c      	b.n	800acfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ace2:	4b0a      	ldr	r3, [pc, #40]	; (800ad0c <osKernelInitialize+0x44>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d105      	bne.n	800acf6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800acea:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <osKernelInitialize+0x44>)
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	607b      	str	r3, [r7, #4]
 800acf4:	e002      	b.n	800acfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295
 800acfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800acfc:	687b      	ldr	r3, [r7, #4]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	200003c0 	.word	0x200003c0

0800ad10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad16:	f3ef 8305 	mrs	r3, IPSR
 800ad1a:	603b      	str	r3, [r7, #0]
  return(result);
 800ad1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ad22:	f06f 0305 	mvn.w	r3, #5
 800ad26:	607b      	str	r3, [r7, #4]
 800ad28:	e010      	b.n	800ad4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <osKernelStart+0x48>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d109      	bne.n	800ad46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad32:	f7ff ffbf 	bl	800acb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad36:	4b08      	ldr	r3, [pc, #32]	; (800ad58 <osKernelStart+0x48>)
 800ad38:	2202      	movs	r2, #2
 800ad3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad3c:	f001 ff7e 	bl	800cc3c <vTaskStartScheduler>
      stat = osOK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	607b      	str	r3, [r7, #4]
 800ad44:	e002      	b.n	800ad4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad46:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad4c:	687b      	ldr	r3, [r7, #4]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200003c0 	.word	0x200003c0

0800ad5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08e      	sub	sp, #56	; 0x38
 800ad60:	af04      	add	r7, sp, #16
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad6c:	f3ef 8305 	mrs	r3, IPSR
 800ad70:	617b      	str	r3, [r7, #20]
  return(result);
 800ad72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d17e      	bne.n	800ae76 <osThreadNew+0x11a>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d07b      	beq.n	800ae76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad7e:	2380      	movs	r3, #128	; 0x80
 800ad80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad82:	2318      	movs	r3, #24
 800ad84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d045      	beq.n	800ae22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <osThreadNew+0x48>
        name = attr->name;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d008      	beq.n	800adca <osThreadNew+0x6e>
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	2b38      	cmp	r3, #56	; 0x38
 800adbc:	d805      	bhi.n	800adca <osThreadNew+0x6e>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <osThreadNew+0x72>
        return (NULL);
 800adca:	2300      	movs	r3, #0
 800adcc:	e054      	b.n	800ae78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	089b      	lsrs	r3, r3, #2
 800addc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00e      	beq.n	800ae04 <osThreadNew+0xa8>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	2b5b      	cmp	r3, #91	; 0x5b
 800adec:	d90a      	bls.n	800ae04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d006      	beq.n	800ae04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <osThreadNew+0xa8>
        mem = 1;
 800adfe:	2301      	movs	r3, #1
 800ae00:	61bb      	str	r3, [r7, #24]
 800ae02:	e010      	b.n	800ae26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10c      	bne.n	800ae26 <osThreadNew+0xca>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d108      	bne.n	800ae26 <osThreadNew+0xca>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d104      	bne.n	800ae26 <osThreadNew+0xca>
          mem = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61bb      	str	r3, [r7, #24]
 800ae20:	e001      	b.n	800ae26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d110      	bne.n	800ae4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae34:	9202      	str	r2, [sp, #8]
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	6a3a      	ldr	r2, [r7, #32]
 800ae40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f001 fd24 	bl	800c890 <xTaskCreateStatic>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	613b      	str	r3, [r7, #16]
 800ae4c:	e013      	b.n	800ae76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d110      	bne.n	800ae76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f107 0310 	add.w	r3, r7, #16
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f001 fd6f 	bl	800c94a <xTaskCreate>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d001      	beq.n	800ae76 <osThreadNew+0x11a>
            hTask = NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae76:	693b      	ldr	r3, [r7, #16]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3728      	adds	r7, #40	; 0x28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae88:	f3ef 8305 	mrs	r3, IPSR
 800ae8c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <osDelay+0x1c>
    stat = osErrorISR;
 800ae94:	f06f 0305 	mvn.w	r3, #5
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	e007      	b.n	800aeac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <osDelay+0x2c>
      vTaskDelay(ticks);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 fe94 	bl	800cbd4 <vTaskDelay>
    }
  }

  return (stat);
 800aeac:	68fb      	ldr	r3, [r7, #12]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b086      	sub	sp, #24
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aec2:	f3ef 8305 	mrs	r3, IPSR
 800aec6:	60fb      	str	r3, [r7, #12]
  return(result);
 800aec8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d12d      	bne.n	800af2a <osEventFlagsNew+0x74>
    mem = -1;
 800aece:	f04f 33ff 	mov.w	r3, #4294967295
 800aed2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d015      	beq.n	800af06 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d006      	beq.n	800aef0 <osEventFlagsNew+0x3a>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	2b1f      	cmp	r3, #31
 800aee8:	d902      	bls.n	800aef0 <osEventFlagsNew+0x3a>
        mem = 1;
 800aeea:	2301      	movs	r3, #1
 800aeec:	613b      	str	r3, [r7, #16]
 800aeee:	e00c      	b.n	800af0a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d108      	bne.n	800af0a <osEventFlagsNew+0x54>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d104      	bne.n	800af0a <osEventFlagsNew+0x54>
          mem = 0;
 800af00:	2300      	movs	r3, #0
 800af02:	613b      	str	r3, [r7, #16]
 800af04:	e001      	b.n	800af0a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d106      	bne.n	800af1e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	4618      	mov	r0, r3
 800af16:	f000 fa0b 	bl	800b330 <xEventGroupCreateStatic>
 800af1a:	6178      	str	r0, [r7, #20]
 800af1c:	e005      	b.n	800af2a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800af24:	f000 fa3b 	bl	800b39e <xEventGroupCreate>
 800af28:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800af2a:	697b      	ldr	r3, [r7, #20]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <osEventFlagsSet+0x1e>
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800af52:	f06f 0303 	mvn.w	r3, #3
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	e028      	b.n	800afac <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af5a:	f3ef 8305 	mrs	r3, IPSR
 800af5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800af60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800af62:	2b00      	cmp	r3, #0
 800af64:	d01d      	beq.n	800afa2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800af6a:	f107 0308 	add.w	r3, r7, #8
 800af6e:	461a      	mov	r2, r3
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6938      	ldr	r0, [r7, #16]
 800af74:	f000 fbb6 	bl	800b6e4 <xEventGroupSetBitsFromISR>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d103      	bne.n	800af86 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800af7e:	f06f 0302 	mvn.w	r3, #2
 800af82:	617b      	str	r3, [r7, #20]
 800af84:	e012      	b.n	800afac <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00d      	beq.n	800afac <osEventFlagsSet+0x78>
 800af90:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <osEventFlagsSet+0x84>)
 800af92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af96:	601a      	str	r2, [r3, #0]
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	e004      	b.n	800afac <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6938      	ldr	r0, [r7, #16]
 800afa6:	f000 fae3 	bl	800b570 <xEventGroupSetBits>
 800afaa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800afac:	697b      	ldr	r3, [r7, #20]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	e000ed04 	.word	0xe000ed04

0800afbc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08c      	sub	sp, #48	; 0x30
 800afc0:	af02      	add	r7, sp, #8
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
 800afc8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d004      	beq.n	800afde <osEventFlagsWait+0x22>
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d003      	beq.n	800afe6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800afde:	f06f 0303 	mvn.w	r3, #3
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e04b      	b.n	800b07e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afe6:	f3ef 8305 	mrs	r3, IPSR
 800afea:	617b      	str	r3, [r7, #20]
  return(result);
 800afec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800aff2:	f06f 0305 	mvn.w	r3, #5
 800aff6:	61fb      	str	r3, [r7, #28]
 800aff8:	e041      	b.n	800b07e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800b004:	2301      	movs	r3, #1
 800b006:	627b      	str	r3, [r7, #36]	; 0x24
 800b008:	e001      	b.n	800b00e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800b00a:	2300      	movs	r3, #0
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f003 0302 	and.w	r3, r3, #2
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800b018:	2300      	movs	r3, #0
 800b01a:	623b      	str	r3, [r7, #32]
 800b01c:	e001      	b.n	800b022 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800b01e:	2301      	movs	r3, #1
 800b020:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	6a3a      	ldr	r2, [r7, #32]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	69b8      	ldr	r0, [r7, #24]
 800b02e:	f000 f9d1 	bl	800b3d4 <xEventGroupWaitBits>
 800b032:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d010      	beq.n	800b060 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4013      	ands	r3, r2
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	429a      	cmp	r2, r3
 800b048:	d019      	beq.n	800b07e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800b050:	f06f 0301 	mvn.w	r3, #1
 800b054:	61fb      	str	r3, [r7, #28]
 800b056:	e012      	b.n	800b07e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b058:	f06f 0302 	mvn.w	r3, #2
 800b05c:	61fb      	str	r3, [r7, #28]
 800b05e:	e00e      	b.n	800b07e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	4013      	ands	r3, r2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d109      	bne.n	800b07e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800b070:	f06f 0301 	mvn.w	r3, #1
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	e002      	b.n	800b07e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b078:	f06f 0302 	mvn.w	r3, #2
 800b07c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800b07e:	69fb      	ldr	r3, [r7, #28]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3728      	adds	r7, #40	; 0x28
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08a      	sub	sp, #40	; 0x28
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b094:	2300      	movs	r3, #0
 800b096:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b098:	f3ef 8305 	mrs	r3, IPSR
 800b09c:	613b      	str	r3, [r7, #16]
  return(result);
 800b09e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d175      	bne.n	800b190 <osSemaphoreNew+0x108>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d072      	beq.n	800b190 <osSemaphoreNew+0x108>
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d86e      	bhi.n	800b190 <osSemaphoreNew+0x108>
    mem = -1;
 800b0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d015      	beq.n	800b0ea <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d006      	beq.n	800b0d4 <osSemaphoreNew+0x4c>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	2b4f      	cmp	r3, #79	; 0x4f
 800b0cc:	d902      	bls.n	800b0d4 <osSemaphoreNew+0x4c>
        mem = 1;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	61bb      	str	r3, [r7, #24]
 800b0d2:	e00c      	b.n	800b0ee <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d108      	bne.n	800b0ee <osSemaphoreNew+0x66>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d104      	bne.n	800b0ee <osSemaphoreNew+0x66>
          mem = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	61bb      	str	r3, [r7, #24]
 800b0e8:	e001      	b.n	800b0ee <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f4:	d04c      	beq.n	800b190 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d128      	bne.n	800b14e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d10a      	bne.n	800b118 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	2203      	movs	r2, #3
 800b108:	9200      	str	r2, [sp, #0]
 800b10a:	2200      	movs	r2, #0
 800b10c:	2100      	movs	r1, #0
 800b10e:	2001      	movs	r0, #1
 800b110:	f000 fc18 	bl	800b944 <xQueueGenericCreateStatic>
 800b114:	61f8      	str	r0, [r7, #28]
 800b116:	e005      	b.n	800b124 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b118:	2203      	movs	r2, #3
 800b11a:	2100      	movs	r1, #0
 800b11c:	2001      	movs	r0, #1
 800b11e:	f000 fc89 	bl	800ba34 <xQueueGenericCreate>
 800b122:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d022      	beq.n	800b170 <osSemaphoreNew+0xe8>
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01f      	beq.n	800b170 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b130:	2300      	movs	r3, #0
 800b132:	2200      	movs	r2, #0
 800b134:	2100      	movs	r1, #0
 800b136:	69f8      	ldr	r0, [r7, #28]
 800b138:	f000 fd44 	bl	800bbc4 <xQueueGenericSend>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d016      	beq.n	800b170 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b142:	69f8      	ldr	r0, [r7, #28]
 800b144:	f001 f9d0 	bl	800c4e8 <vQueueDelete>
            hSemaphore = NULL;
 800b148:	2300      	movs	r3, #0
 800b14a:	61fb      	str	r3, [r7, #28]
 800b14c:	e010      	b.n	800b170 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d108      	bne.n	800b166 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	461a      	mov	r2, r3
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fcc6 	bl	800baee <xQueueCreateCountingSemaphoreStatic>
 800b162:	61f8      	str	r0, [r7, #28]
 800b164:	e004      	b.n	800b170 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 fcf7 	bl	800bb5c <xQueueCreateCountingSemaphore>
 800b16e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00c      	beq.n	800b190 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	617b      	str	r3, [r7, #20]
 800b182:	e001      	b.n	800b188 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b188:	6979      	ldr	r1, [r7, #20]
 800b18a:	69f8      	ldr	r0, [r7, #28]
 800b18c:	f001 faf8 	bl	800c780 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b190:	69fb      	ldr	r3, [r7, #28]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b1b4:	f06f 0303 	mvn.w	r3, #3
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	e039      	b.n	800b230 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1bc:	f3ef 8305 	mrs	r3, IPSR
 800b1c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d022      	beq.n	800b20e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b1ce:	f06f 0303 	mvn.w	r3, #3
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	e02c      	b.n	800b230 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b1da:	f107 0308 	add.w	r3, r7, #8
 800b1de:	461a      	mov	r2, r3
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	6938      	ldr	r0, [r7, #16]
 800b1e4:	f001 f900 	bl	800c3e8 <xQueueReceiveFromISR>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d003      	beq.n	800b1f6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b1ee:	f06f 0302 	mvn.w	r3, #2
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	e01c      	b.n	800b230 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d019      	beq.n	800b230 <osSemaphoreAcquire+0x94>
 800b1fc:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <osSemaphoreAcquire+0xa0>)
 800b1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	e010      	b.n	800b230 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6938      	ldr	r0, [r7, #16]
 800b212:	f000 ffdd 	bl	800c1d0 <xQueueSemaphoreTake>
 800b216:	4603      	mov	r3, r0
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d009      	beq.n	800b230 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b222:	f06f 0301 	mvn.w	r3, #1
 800b226:	617b      	str	r3, [r7, #20]
 800b228:	e002      	b.n	800b230 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b22a:	f06f 0302 	mvn.w	r3, #2
 800b22e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b230:	697b      	ldr	r3, [r7, #20]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3718      	adds	r7, #24
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	e000ed04 	.word	0xe000ed04

0800b240 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d103      	bne.n	800b25e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b256:	f06f 0303 	mvn.w	r3, #3
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e02c      	b.n	800b2b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b25e:	f3ef 8305 	mrs	r3, IPSR
 800b262:	60fb      	str	r3, [r7, #12]
  return(result);
 800b264:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b266:	2b00      	cmp	r3, #0
 800b268:	d01a      	beq.n	800b2a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b26e:	f107 0308 	add.w	r3, r7, #8
 800b272:	4619      	mov	r1, r3
 800b274:	6938      	ldr	r0, [r7, #16]
 800b276:	f000 fe3e 	bl	800bef6 <xQueueGiveFromISR>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d003      	beq.n	800b288 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b280:	f06f 0302 	mvn.w	r3, #2
 800b284:	617b      	str	r3, [r7, #20]
 800b286:	e017      	b.n	800b2b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d014      	beq.n	800b2b8 <osSemaphoreRelease+0x78>
 800b28e:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <osSemaphoreRelease+0x84>)
 800b290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	e00b      	b.n	800b2b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	6938      	ldr	r0, [r7, #16]
 800b2a8:	f000 fc8c 	bl	800bbc4 <xQueueGenericSend>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d002      	beq.n	800b2b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b2b2:	f06f 0302 	mvn.w	r3, #2
 800b2b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b2b8:	697b      	ldr	r3, [r7, #20]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	4a07      	ldr	r2, [pc, #28]	; (800b2f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b2d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4a06      	ldr	r2, [pc, #24]	; (800b2f8 <vApplicationGetIdleTaskMemory+0x30>)
 800b2de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2280      	movs	r2, #128	; 0x80
 800b2e4:	601a      	str	r2, [r3, #0]
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	200003c4 	.word	0x200003c4
 800b2f8:	20000420 	.word	0x20000420

0800b2fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4a07      	ldr	r2, [pc, #28]	; (800b328 <vApplicationGetTimerTaskMemory+0x2c>)
 800b30c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	4a06      	ldr	r2, [pc, #24]	; (800b32c <vApplicationGetTimerTaskMemory+0x30>)
 800b312:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b31a:	601a      	str	r2, [r3, #0]
}
 800b31c:	bf00      	nop
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	20000620 	.word	0x20000620
 800b32c:	2000067c 	.word	0x2000067c

0800b330 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10a      	bne.n	800b354 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800b354:	2320      	movs	r3, #32
 800b356:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d00a      	beq.n	800b374 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	60fb      	str	r3, [r7, #12]
}
 800b370:	bf00      	nop
 800b372:	e7fe      	b.n	800b372 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	3304      	adds	r3, #4
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 f9bf 	bl	800b70c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2201      	movs	r2, #1
 800b392:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800b394:	697b      	ldr	r3, [r7, #20]
	}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b3a4:	2020      	movs	r0, #32
 800b3a6:	f003 f8df 	bl	800e568 <pvPortMalloc>
 800b3aa:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00a      	beq.n	800b3c8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 f9a5 	bl	800b70c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b3c8:	687b      	ldr	r3, [r7, #4]
	}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3708      	adds	r7, #8
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b090      	sub	sp, #64	; 0x40
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <xEventGroupWaitBits+0x36>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	623b      	str	r3, [r7, #32]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00a      	beq.n	800b42a <xEventGroupWaitBits+0x56>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	61fb      	str	r3, [r7, #28]
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <xEventGroupWaitBits+0x72>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	61bb      	str	r3, [r7, #24]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b446:	f002 f8df 	bl	800d608 <xTaskGetSchedulerState>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d102      	bne.n	800b456 <xEventGroupWaitBits+0x82>
 800b450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <xEventGroupWaitBits+0x86>
 800b456:	2301      	movs	r3, #1
 800b458:	e000      	b.n	800b45c <xEventGroupWaitBits+0x88>
 800b45a:	2300      	movs	r3, #0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	617b      	str	r3, [r7, #20]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800b476:	f001 fc47 	bl	800cd08 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b486:	f000 f90b 	bl	800b6a0 <prvTestWaitCondition>
 800b48a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00e      	beq.n	800b4b0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b496:	2300      	movs	r3, #0
 800b498:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d028      	beq.n	800b4f2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	43db      	mvns	r3, r3
 800b4a8:	401a      	ands	r2, r3
 800b4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	e020      	b.n	800b4f2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d104      	bne.n	800b4c0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	633b      	str	r3, [r7, #48]	; 0x30
 800b4be:	e018      	b.n	800b4f2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4cc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4da:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	1d18      	adds	r0, r3, #4
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f001 fe05 	bl	800d0f8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b4f2:	f001 fc17 	bl	800cd24 <xTaskResumeAll>
 800b4f6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b4f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d031      	beq.n	800b562 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	2b00      	cmp	r3, #0
 800b502:	d107      	bne.n	800b514 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800b504:	4b19      	ldr	r3, [pc, #100]	; (800b56c <xEventGroupWaitBits+0x198>)
 800b506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b514:	f002 f9ee 	bl	800d8f4 <uxTaskResetEventItemValue>
 800b518:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b520:	2b00      	cmp	r3, #0
 800b522:	d11a      	bne.n	800b55a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800b524:	f002 fefe 	bl	800e324 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	68b9      	ldr	r1, [r7, #8]
 800b532:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b534:	f000 f8b4 	bl	800b6a0 <prvTestWaitCondition>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d006      	beq.n	800b552 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	43db      	mvns	r3, r3
 800b54c:	401a      	ands	r2, r3
 800b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b550:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800b552:	2301      	movs	r3, #1
 800b554:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800b556:	f002 ff15 	bl	800e384 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b560:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800b562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b564:	4618      	mov	r0, r3
 800b566:	3740      	adds	r7, #64	; 0x40
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	e000ed04 	.word	0xe000ed04

0800b570 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b08e      	sub	sp, #56	; 0x38
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800b57a:	2300      	movs	r3, #0
 800b57c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800b582:	2300      	movs	r3, #0
 800b584:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <xEventGroupSetBits+0x32>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	613b      	str	r3, [r7, #16]
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00a      	beq.n	800b5c2 <xEventGroupSetBits+0x52>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	60fb      	str	r3, [r7, #12]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800b5ce:	f001 fb9b 	bl	800cd08 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800b5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800b5e4:	e03c      	b.n	800b660 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800b5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b5fc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b604:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d108      	bne.n	800b622 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	4013      	ands	r3, r2
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800b61c:	2301      	movs	r3, #1
 800b61e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b620:	e008      	b.n	800b634 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	4013      	ands	r3, r2
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d101      	bne.n	800b634 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800b630:	2301      	movs	r3, #1
 800b632:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d010      	beq.n	800b65c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d003      	beq.n	800b64c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800b644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	4313      	orrs	r3, r2
 800b64a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b654:	4619      	mov	r1, r3
 800b656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b658:	f001 fe1a 	bl	800d290 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800b660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	429a      	cmp	r2, r3
 800b666:	d1be      	bne.n	800b5e6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	43db      	mvns	r3, r3
 800b670:	401a      	ands	r2, r3
 800b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b674:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800b676:	f001 fb55 	bl	800cd24 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	681b      	ldr	r3, [r3, #0]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3738      	adds	r7, #56	; 0x38
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7ff ff6c 	bl	800b570 <xEventGroupSetBits>
}
 800b698:	bf00      	nop
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d107      	bne.n	800b6c6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00a      	beq.n	800b6d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]
 800b6c4:	e007      	b.n	800b6d6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d101      	bne.n	800b6d6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800b6d6:	697b      	ldr	r3, [r7, #20]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	371c      	adds	r7, #28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b086      	sub	sp, #24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	68f9      	ldr	r1, [r7, #12]
 800b6f6:	4804      	ldr	r0, [pc, #16]	; (800b708 <xEventGroupSetBitsFromISR+0x24>)
 800b6f8:	f002 fcca 	bl	800e090 <xTimerPendFunctionCallFromISR>
 800b6fc:	6178      	str	r0, [r7, #20]

		return xReturn;
 800b6fe:	697b      	ldr	r3, [r7, #20]
	}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	0800b687 	.word	0x0800b687

0800b70c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f103 0208 	add.w	r2, r3, #8
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f04f 32ff 	mov.w	r2, #4294967295
 800b724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f103 0208 	add.w	r2, r3, #8
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f103 0208 	add.w	r2, r3, #8
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b75a:	bf00      	nop
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	601a      	str	r2, [r3, #0]
}
 800b7a2:	bf00      	nop
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c4:	d103      	bne.n	800b7ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	e00c      	b.n	800b7e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3308      	adds	r3, #8
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e002      	b.n	800b7dc <vListInsert+0x2e>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	60fb      	str	r3, [r7, #12]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d2f6      	bcs.n	800b7d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	6892      	ldr	r2, [r2, #8]
 800b836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6852      	ldr	r2, [r2, #4]
 800b840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d103      	bne.n	800b854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689a      	ldr	r2, [r3, #8]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	1e5a      	subs	r2, r3, #1
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10a      	bne.n	800b89e <xQueueGenericReset+0x2a>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	60bb      	str	r3, [r7, #8]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b89e:	f002 fd41 	bl	800e324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8aa:	68f9      	ldr	r1, [r7, #12]
 800b8ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8ae:	fb01 f303 	mul.w	r3, r1, r3
 800b8b2:	441a      	add	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ce:	3b01      	subs	r3, #1
 800b8d0:	68f9      	ldr	r1, [r7, #12]
 800b8d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8d4:	fb01 f303 	mul.w	r3, r1, r3
 800b8d8:	441a      	add	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	22ff      	movs	r2, #255	; 0xff
 800b8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	22ff      	movs	r2, #255	; 0xff
 800b8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d114      	bne.n	800b91e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d01a      	beq.n	800b932 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3310      	adds	r3, #16
 800b900:	4618      	mov	r0, r3
 800b902:	f001 fc61 	bl	800d1c8 <xTaskRemoveFromEventList>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d012      	beq.n	800b932 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b90c:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <xQueueGenericReset+0xcc>)
 800b90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	e009      	b.n	800b932 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3310      	adds	r3, #16
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fef2 	bl	800b70c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3324      	adds	r3, #36	; 0x24
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff feed 	bl	800b70c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b932:	f002 fd27 	bl	800e384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b936:	2301      	movs	r3, #1
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08e      	sub	sp, #56	; 0x38
 800b948:	af02      	add	r7, sp, #8
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <xQueueGenericCreateStatic+0x52>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <xQueueGenericCreateStatic+0x56>
 800b996:	2301      	movs	r3, #1
 800b998:	e000      	b.n	800b99c <xQueueGenericCreateStatic+0x58>
 800b99a:	2300      	movs	r3, #0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10a      	bne.n	800b9b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	623b      	str	r3, [r7, #32]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <xQueueGenericCreateStatic+0x7e>
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <xQueueGenericCreateStatic+0x82>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <xQueueGenericCreateStatic+0x84>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	61fb      	str	r3, [r7, #28]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9e2:	2350      	movs	r3, #80	; 0x50
 800b9e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b50      	cmp	r3, #80	; 0x50
 800b9ea:	d00a      	beq.n	800ba02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	61bb      	str	r3, [r7, #24]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba02:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00d      	beq.n	800ba2a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f000 f83f 	bl	800baa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3730      	adds	r7, #48	; 0x30
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08a      	sub	sp, #40	; 0x28
 800ba38:	af02      	add	r7, sp, #8
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10a      	bne.n	800ba5e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	613b      	str	r3, [r7, #16]
}
 800ba5a:	bf00      	nop
 800ba5c:	e7fe      	b.n	800ba5c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	3350      	adds	r3, #80	; 0x50
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f002 fd7b 	bl	800e568 <pvPortMalloc>
 800ba72:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d011      	beq.n	800ba9e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	3350      	adds	r3, #80	; 0x50
 800ba82:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba8c:	79fa      	ldrb	r2, [r7, #7]
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	4613      	mov	r3, r2
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 f805 	bl	800baa8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba9e:	69bb      	ldr	r3, [r7, #24]
	}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d103      	bne.n	800bac4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	69ba      	ldr	r2, [r7, #24]
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	e002      	b.n	800baca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bad6:	2101      	movs	r1, #1
 800bad8:	69b8      	ldr	r0, [r7, #24]
 800bada:	f7ff fecb 	bl	800b874 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	78fa      	ldrb	r2, [r7, #3]
 800bae2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b08a      	sub	sp, #40	; 0x28
 800baf2:	af02      	add	r7, sp, #8
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	61bb      	str	r3, [r7, #24]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d90a      	bls.n	800bb34 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	617b      	str	r3, [r7, #20]
}
 800bb30:	bf00      	nop
 800bb32:	e7fe      	b.n	800bb32 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb34:	2302      	movs	r3, #2
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7ff ff00 	bl	800b944 <xQueueGenericCreateStatic>
 800bb44:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bb52:	69fb      	ldr	r3, [r7, #28]
	}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3720      	adds	r7, #32
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	613b      	str	r3, [r7, #16]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d90a      	bls.n	800bba0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	60fb      	str	r3, [r7, #12]
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bba0:	2202      	movs	r2, #2
 800bba2:	2100      	movs	r1, #0
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f7ff ff45 	bl	800ba34 <xQueueGenericCreate>
 800bbaa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bbb8:	697b      	ldr	r3, [r7, #20]
	}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08e      	sub	sp, #56	; 0x38
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
 800bbd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <xQueueGenericSend+0x32>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d103      	bne.n	800bc04 <xQueueGenericSend+0x40>
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <xQueueGenericSend+0x44>
 800bc04:	2301      	movs	r3, #1
 800bc06:	e000      	b.n	800bc0a <xQueueGenericSend+0x46>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10a      	bne.n	800bc24 <xQueueGenericSend+0x60>
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc20:	bf00      	nop
 800bc22:	e7fe      	b.n	800bc22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d103      	bne.n	800bc32 <xQueueGenericSend+0x6e>
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d101      	bne.n	800bc36 <xQueueGenericSend+0x72>
 800bc32:	2301      	movs	r3, #1
 800bc34:	e000      	b.n	800bc38 <xQueueGenericSend+0x74>
 800bc36:	2300      	movs	r3, #0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <xQueueGenericSend+0x8e>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	623b      	str	r3, [r7, #32]
}
 800bc4e:	bf00      	nop
 800bc50:	e7fe      	b.n	800bc50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc52:	f001 fcd9 	bl	800d608 <xTaskGetSchedulerState>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <xQueueGenericSend+0x9e>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <xQueueGenericSend+0xa2>
 800bc62:	2301      	movs	r3, #1
 800bc64:	e000      	b.n	800bc68 <xQueueGenericSend+0xa4>
 800bc66:	2300      	movs	r3, #0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <xQueueGenericSend+0xbe>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	61fb      	str	r3, [r7, #28]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc82:	f002 fb4f 	bl	800e324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d302      	bcc.n	800bc98 <xQueueGenericSend+0xd4>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d129      	bne.n	800bcec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	68b9      	ldr	r1, [r7, #8]
 800bc9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc9e:	f000 fc5e 	bl	800c55e <prvCopyDataToQueue>
 800bca2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d010      	beq.n	800bcce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	3324      	adds	r3, #36	; 0x24
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f001 fa89 	bl	800d1c8 <xTaskRemoveFromEventList>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d013      	beq.n	800bce4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bcbc:	4b3f      	ldr	r3, [pc, #252]	; (800bdbc <xQueueGenericSend+0x1f8>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	e00a      	b.n	800bce4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d007      	beq.n	800bce4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bcd4:	4b39      	ldr	r3, [pc, #228]	; (800bdbc <xQueueGenericSend+0x1f8>)
 800bcd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bce4:	f002 fb4e 	bl	800e384 <vPortExitCritical>
				return pdPASS;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e063      	b.n	800bdb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d103      	bne.n	800bcfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcf2:	f002 fb47 	bl	800e384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	e05c      	b.n	800bdb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d106      	bne.n	800bd0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd00:	f107 0314 	add.w	r3, r7, #20
 800bd04:	4618      	mov	r0, r3
 800bd06:	f001 fb25 	bl	800d354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd0e:	f002 fb39 	bl	800e384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd12:	f000 fff9 	bl	800cd08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd16:	f002 fb05 	bl	800e324 <vPortEnterCritical>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd20:	b25b      	sxtb	r3, r3
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd26:	d103      	bne.n	800bd30 <xQueueGenericSend+0x16c>
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3c:	d103      	bne.n	800bd46 <xQueueGenericSend+0x182>
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd46:	f002 fb1d 	bl	800e384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd4a:	1d3a      	adds	r2, r7, #4
 800bd4c:	f107 0314 	add.w	r3, r7, #20
 800bd50:	4611      	mov	r1, r2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f001 fb14 	bl	800d380 <xTaskCheckForTimeOut>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d124      	bne.n	800bda8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd60:	f000 fcf5 	bl	800c74e <prvIsQueueFull>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d018      	beq.n	800bd9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	3310      	adds	r3, #16
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4611      	mov	r1, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 f99c 	bl	800d0b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd7a:	f000 fc80 	bl	800c67e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd7e:	f000 ffd1 	bl	800cd24 <xTaskResumeAll>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f47f af7c 	bne.w	800bc82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <xQueueGenericSend+0x1f8>)
 800bd8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	e772      	b.n	800bc82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd9e:	f000 fc6e 	bl	800c67e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bda2:	f000 ffbf 	bl	800cd24 <xTaskResumeAll>
 800bda6:	e76c      	b.n	800bc82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bda8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdaa:	f000 fc68 	bl	800c67e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdae:	f000 ffb9 	bl	800cd24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bdb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3738      	adds	r7, #56	; 0x38
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	e000ed04 	.word	0xe000ed04

0800bdc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b090      	sub	sp, #64	; 0x40
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10a      	bne.n	800bdee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bdea:	bf00      	nop
 800bdec:	e7fe      	b.n	800bdec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d103      	bne.n	800bdfc <xQueueGenericSendFromISR+0x3c>
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <xQueueGenericSendFromISR+0x40>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e000      	b.n	800be02 <xQueueGenericSendFromISR+0x42>
 800be00:	2300      	movs	r3, #0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d10a      	bne.n	800be1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be18:	bf00      	nop
 800be1a:	e7fe      	b.n	800be1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d103      	bne.n	800be2a <xQueueGenericSendFromISR+0x6a>
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be26:	2b01      	cmp	r3, #1
 800be28:	d101      	bne.n	800be2e <xQueueGenericSendFromISR+0x6e>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <xQueueGenericSendFromISR+0x70>
 800be2e:	2300      	movs	r3, #0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	623b      	str	r3, [r7, #32]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be4a:	f002 fb4d 	bl	800e4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800be4e:	f3ef 8211 	mrs	r2, BASEPRI
 800be52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	61fa      	str	r2, [r7, #28]
 800be64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800be66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be72:	429a      	cmp	r2, r3
 800be74:	d302      	bcc.n	800be7c <xQueueGenericSendFromISR+0xbc>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d12f      	bne.n	800bedc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	68b9      	ldr	r1, [r7, #8]
 800be90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be92:	f000 fb64 	bl	800c55e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9e:	d112      	bne.n	800bec6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d016      	beq.n	800bed6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	3324      	adds	r3, #36	; 0x24
 800beac:	4618      	mov	r0, r3
 800beae:	f001 f98b 	bl	800d1c8 <xTaskRemoveFromEventList>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00e      	beq.n	800bed6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00b      	beq.n	800bed6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	e007      	b.n	800bed6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bec6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800beca:	3301      	adds	r3, #1
 800becc:	b2db      	uxtb	r3, r3
 800bece:	b25a      	sxtb	r2, r3
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bed6:	2301      	movs	r3, #1
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800beda:	e001      	b.n	800bee0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800beea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3740      	adds	r7, #64	; 0x40
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b08e      	sub	sp, #56	; 0x38
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10a      	bne.n	800bf20 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	623b      	str	r3, [r7, #32]
}
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00a      	beq.n	800bf3e <xQueueGiveFromISR+0x48>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	61fb      	str	r3, [r7, #28]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d103      	bne.n	800bf4e <xQueueGiveFromISR+0x58>
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <xQueueGiveFromISR+0x5c>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e000      	b.n	800bf54 <xQueueGiveFromISR+0x5e>
 800bf52:	2300      	movs	r3, #0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <xQueueGiveFromISR+0x78>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	61bb      	str	r3, [r7, #24]
}
 800bf6a:	bf00      	nop
 800bf6c:	e7fe      	b.n	800bf6c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf6e:	f002 fabb 	bl	800e4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800bf72:	f3ef 8211 	mrs	r2, BASEPRI
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	617a      	str	r2, [r7, #20]
 800bf88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bf8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d22b      	bcs.n	800bff6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bfb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb8:	d112      	bne.n	800bfe0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d016      	beq.n	800bff0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc4:	3324      	adds	r3, #36	; 0x24
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 f8fe 	bl	800d1c8 <xTaskRemoveFromEventList>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00e      	beq.n	800bff0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00b      	beq.n	800bff0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	e007      	b.n	800bff0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	b25a      	sxtb	r2, r3
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bff0:	2301      	movs	r3, #1
 800bff2:	637b      	str	r3, [r7, #52]	; 0x34
 800bff4:	e001      	b.n	800bffa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	637b      	str	r3, [r7, #52]	; 0x34
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f383 8811 	msr	BASEPRI, r3
}
 800c004:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3738      	adds	r7, #56	; 0x38
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b08c      	sub	sp, #48	; 0x30
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10a      	bne.n	800c040 <xQueueReceive+0x30>
	__asm volatile
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	623b      	str	r3, [r7, #32]
}
 800c03c:	bf00      	nop
 800c03e:	e7fe      	b.n	800c03e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d103      	bne.n	800c04e <xQueueReceive+0x3e>
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <xQueueReceive+0x42>
 800c04e:	2301      	movs	r3, #1
 800c050:	e000      	b.n	800c054 <xQueueReceive+0x44>
 800c052:	2300      	movs	r3, #0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <xQueueReceive+0x5e>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	61fb      	str	r3, [r7, #28]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c06e:	f001 facb 	bl	800d608 <xTaskGetSchedulerState>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d102      	bne.n	800c07e <xQueueReceive+0x6e>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <xQueueReceive+0x72>
 800c07e:	2301      	movs	r3, #1
 800c080:	e000      	b.n	800c084 <xQueueReceive+0x74>
 800c082:	2300      	movs	r3, #0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10a      	bne.n	800c09e <xQueueReceive+0x8e>
	__asm volatile
 800c088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08c:	f383 8811 	msr	BASEPRI, r3
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	61bb      	str	r3, [r7, #24]
}
 800c09a:	bf00      	nop
 800c09c:	e7fe      	b.n	800c09c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c09e:	f002 f941 	bl	800e324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01f      	beq.n	800c0ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0ae:	68b9      	ldr	r1, [r7, #8]
 800c0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0b2:	f000 fabe 	bl	800c632 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b8:	1e5a      	subs	r2, r3, #1
 800c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00f      	beq.n	800c0e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	3310      	adds	r3, #16
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 f87c 	bl	800d1c8 <xTaskRemoveFromEventList>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d007      	beq.n	800c0e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0d6:	4b3d      	ldr	r3, [pc, #244]	; (800c1cc <xQueueReceive+0x1bc>)
 800c0d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c0e6:	f002 f94d 	bl	800e384 <vPortExitCritical>
				return pdPASS;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e069      	b.n	800c1c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0f4:	f002 f946 	bl	800e384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e062      	b.n	800c1c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c102:	f107 0310 	add.w	r3, r7, #16
 800c106:	4618      	mov	r0, r3
 800c108:	f001 f924 	bl	800d354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c10c:	2301      	movs	r3, #1
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c110:	f002 f938 	bl	800e384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c114:	f000 fdf8 	bl	800cd08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c118:	f002 f904 	bl	800e324 <vPortEnterCritical>
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c122:	b25b      	sxtb	r3, r3
 800c124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c128:	d103      	bne.n	800c132 <xQueueReceive+0x122>
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c138:	b25b      	sxtb	r3, r3
 800c13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13e:	d103      	bne.n	800c148 <xQueueReceive+0x138>
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	2200      	movs	r2, #0
 800c144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c148:	f002 f91c 	bl	800e384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c14c:	1d3a      	adds	r2, r7, #4
 800c14e:	f107 0310 	add.w	r3, r7, #16
 800c152:	4611      	mov	r1, r2
 800c154:	4618      	mov	r0, r3
 800c156:	f001 f913 	bl	800d380 <xTaskCheckForTimeOut>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d123      	bne.n	800c1a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c162:	f000 fade 	bl	800c722 <prvIsQueueEmpty>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d017      	beq.n	800c19c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	3324      	adds	r3, #36	; 0x24
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	4611      	mov	r1, r2
 800c174:	4618      	mov	r0, r3
 800c176:	f000 ff9b 	bl	800d0b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c17a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c17c:	f000 fa7f 	bl	800c67e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c180:	f000 fdd0 	bl	800cd24 <xTaskResumeAll>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d189      	bne.n	800c09e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c18a:	4b10      	ldr	r3, [pc, #64]	; (800c1cc <xQueueReceive+0x1bc>)
 800c18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c190:	601a      	str	r2, [r3, #0]
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	e780      	b.n	800c09e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c19e:	f000 fa6e 	bl	800c67e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1a2:	f000 fdbf 	bl	800cd24 <xTaskResumeAll>
 800c1a6:	e77a      	b.n	800c09e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1aa:	f000 fa68 	bl	800c67e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1ae:	f000 fdb9 	bl	800cd24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b4:	f000 fab5 	bl	800c722 <prvIsQueueEmpty>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f43f af6f 	beq.w	800c09e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3730      	adds	r7, #48	; 0x30
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	e000ed04 	.word	0xe000ed04

0800c1d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b08e      	sub	sp, #56	; 0x38
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10a      	bne.n	800c202 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	623b      	str	r3, [r7, #32]
}
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	61fb      	str	r3, [r7, #28]
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c220:	f001 f9f2 	bl	800d608 <xTaskGetSchedulerState>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <xQueueSemaphoreTake+0x60>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <xQueueSemaphoreTake+0x64>
 800c230:	2301      	movs	r3, #1
 800c232:	e000      	b.n	800c236 <xQueueSemaphoreTake+0x66>
 800c234:	2300      	movs	r3, #0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10a      	bne.n	800c250 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	61bb      	str	r3, [r7, #24]
}
 800c24c:	bf00      	nop
 800c24e:	e7fe      	b.n	800c24e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c250:	f002 f868 	bl	800e324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c258:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d024      	beq.n	800c2aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	1e5a      	subs	r2, r3, #1
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d104      	bne.n	800c27a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c270:	f001 fb58 	bl	800d924 <pvTaskIncrementMutexHeldCount>
 800c274:	4602      	mov	r2, r0
 800c276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c278:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00f      	beq.n	800c2a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c284:	3310      	adds	r3, #16
 800c286:	4618      	mov	r0, r3
 800c288:	f000 ff9e 	bl	800d1c8 <xTaskRemoveFromEventList>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d007      	beq.n	800c2a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c292:	4b54      	ldr	r3, [pc, #336]	; (800c3e4 <xQueueSemaphoreTake+0x214>)
 800c294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2a2:	f002 f86f 	bl	800e384 <vPortExitCritical>
				return pdPASS;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e097      	b.n	800c3da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d111      	bne.n	800c2d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00a      	beq.n	800c2cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ba:	f383 8811 	msr	BASEPRI, r3
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	617b      	str	r3, [r7, #20]
}
 800c2c8:	bf00      	nop
 800c2ca:	e7fe      	b.n	800c2ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c2cc:	f002 f85a 	bl	800e384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e082      	b.n	800c3da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d106      	bne.n	800c2e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2da:	f107 030c 	add.w	r3, r7, #12
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 f838 	bl	800d354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2e8:	f002 f84c 	bl	800e384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2ec:	f000 fd0c 	bl	800cd08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2f0:	f002 f818 	bl	800e324 <vPortEnterCritical>
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2fa:	b25b      	sxtb	r3, r3
 800c2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c300:	d103      	bne.n	800c30a <xQueueSemaphoreTake+0x13a>
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	2200      	movs	r2, #0
 800c306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c310:	b25b      	sxtb	r3, r3
 800c312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c316:	d103      	bne.n	800c320 <xQueueSemaphoreTake+0x150>
 800c318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c320:	f002 f830 	bl	800e384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c324:	463a      	mov	r2, r7
 800c326:	f107 030c 	add.w	r3, r7, #12
 800c32a:	4611      	mov	r1, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f001 f827 	bl	800d380 <xTaskCheckForTimeOut>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d132      	bne.n	800c39e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c33a:	f000 f9f2 	bl	800c722 <prvIsQueueEmpty>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d026      	beq.n	800c392 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d109      	bne.n	800c360 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c34c:	f001 ffea 	bl	800e324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	4618      	mov	r0, r3
 800c356:	f001 f975 	bl	800d644 <xTaskPriorityInherit>
 800c35a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c35c:	f002 f812 	bl	800e384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	3324      	adds	r3, #36	; 0x24
 800c364:	683a      	ldr	r2, [r7, #0]
 800c366:	4611      	mov	r1, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fea1 	bl	800d0b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c36e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c370:	f000 f985 	bl	800c67e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c374:	f000 fcd6 	bl	800cd24 <xTaskResumeAll>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f47f af68 	bne.w	800c250 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c380:	4b18      	ldr	r3, [pc, #96]	; (800c3e4 <xQueueSemaphoreTake+0x214>)
 800c382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c386:	601a      	str	r2, [r3, #0]
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	e75e      	b.n	800c250 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c394:	f000 f973 	bl	800c67e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c398:	f000 fcc4 	bl	800cd24 <xTaskResumeAll>
 800c39c:	e758      	b.n	800c250 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c39e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3a0:	f000 f96d 	bl	800c67e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3a4:	f000 fcbe 	bl	800cd24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3aa:	f000 f9ba 	bl	800c722 <prvIsQueueEmpty>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f43f af4d 	beq.w	800c250 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00d      	beq.n	800c3d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c3bc:	f001 ffb2 	bl	800e324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3c2:	f000 f8b4 	bl	800c52e <prvGetDisinheritPriorityAfterTimeout>
 800c3c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f001 fa0e 	bl	800d7f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c3d4:	f001 ffd6 	bl	800e384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c3d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3738      	adds	r7, #56	; 0x38
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	e000ed04 	.word	0xe000ed04

0800c3e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08e      	sub	sp, #56	; 0x38
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	623b      	str	r3, [r7, #32]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d103      	bne.n	800c422 <xQueueReceiveFromISR+0x3a>
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <xQueueReceiveFromISR+0x3e>
 800c422:	2301      	movs	r3, #1
 800c424:	e000      	b.n	800c428 <xQueueReceiveFromISR+0x40>
 800c426:	2300      	movs	r3, #0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	61fb      	str	r3, [r7, #28]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c442:	f002 f851 	bl	800e4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800c446:	f3ef 8211 	mrs	r2, BASEPRI
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	61ba      	str	r2, [r7, #24]
 800c45c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c45e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c460:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c466:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d02f      	beq.n	800c4ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c478:	68b9      	ldr	r1, [r7, #8]
 800c47a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c47c:	f000 f8d9 	bl	800c632 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	1e5a      	subs	r2, r3, #1
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c486:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c488:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c490:	d112      	bne.n	800c4b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c494:	691b      	ldr	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d016      	beq.n	800c4c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	3310      	adds	r3, #16
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 fe92 	bl	800d1c8 <xTaskRemoveFromEventList>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00e      	beq.n	800c4c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00b      	beq.n	800c4c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	e007      	b.n	800c4c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4bc:	3301      	adds	r3, #1
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	b25a      	sxtb	r2, r3
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c4cc:	e001      	b.n	800c4d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f383 8811 	msr	BASEPRI, r3
}
 800c4dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3738      	adds	r7, #56	; 0x38
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10a      	bne.n	800c510 <vQueueDelete+0x28>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	60bb      	str	r3, [r7, #8]
}
 800c50c:	bf00      	nop
 800c50e:	e7fe      	b.n	800c50e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 f95f 	bl	800c7d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d102      	bne.n	800c526 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f002 f8ed 	bl	800e700 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c526:	bf00      	nop
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c52e:	b480      	push	{r7}
 800c530:	b085      	sub	sp, #20
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d006      	beq.n	800c54c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	e001      	b.n	800c550 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c550:	68fb      	ldr	r3, [r7, #12]
	}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr

0800c55e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b086      	sub	sp, #24
 800c562:	af00      	add	r7, sp, #0
 800c564:	60f8      	str	r0, [r7, #12]
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c56a:	2300      	movs	r3, #0
 800c56c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10d      	bne.n	800c598 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d14d      	bne.n	800c620 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	4618      	mov	r0, r3
 800c58a:	f001 f8c3 	bl	800d714 <xTaskPriorityDisinherit>
 800c58e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	609a      	str	r2, [r3, #8]
 800c596:	e043      	b.n	800c620 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d119      	bne.n	800c5d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6858      	ldr	r0, [r3, #4]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	68b9      	ldr	r1, [r7, #8]
 800c5aa:	f002 fe55 	bl	800f258 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	685a      	ldr	r2, [r3, #4]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b6:	441a      	add	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d32b      	bcc.n	800c620 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	605a      	str	r2, [r3, #4]
 800c5d0:	e026      	b.n	800c620 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	68d8      	ldr	r0, [r3, #12]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	461a      	mov	r2, r3
 800c5dc:	68b9      	ldr	r1, [r7, #8]
 800c5de:	f002 fe3b 	bl	800f258 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	68da      	ldr	r2, [r3, #12]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ea:	425b      	negs	r3, r3
 800c5ec:	441a      	add	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	68da      	ldr	r2, [r3, #12]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d207      	bcs.n	800c60e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	689a      	ldr	r2, [r3, #8]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c606:	425b      	negs	r3, r3
 800c608:	441a      	add	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b02      	cmp	r3, #2
 800c612:	d105      	bne.n	800c620 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c628:	697b      	ldr	r3, [r7, #20]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c640:	2b00      	cmp	r3, #0
 800c642:	d018      	beq.n	800c676 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68da      	ldr	r2, [r3, #12]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64c:	441a      	add	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68da      	ldr	r2, [r3, #12]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d303      	bcc.n	800c666 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68d9      	ldr	r1, [r3, #12]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66e:	461a      	mov	r2, r3
 800c670:	6838      	ldr	r0, [r7, #0]
 800c672:	f002 fdf1 	bl	800f258 <memcpy>
	}
}
 800c676:	bf00      	nop
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c686:	f001 fe4d 	bl	800e324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c690:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c692:	e011      	b.n	800c6b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d012      	beq.n	800c6c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3324      	adds	r3, #36	; 0x24
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 fd91 	bl	800d1c8 <xTaskRemoveFromEventList>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6ac:	f000 feca 	bl	800d444 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	dce9      	bgt.n	800c694 <prvUnlockQueue+0x16>
 800c6c0:	e000      	b.n	800c6c4 <prvUnlockQueue+0x46>
					break;
 800c6c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	22ff      	movs	r2, #255	; 0xff
 800c6c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c6cc:	f001 fe5a 	bl	800e384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6d0:	f001 fe28 	bl	800e324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6dc:	e011      	b.n	800c702 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d012      	beq.n	800c70c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3310      	adds	r3, #16
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fd6c 	bl	800d1c8 <xTaskRemoveFromEventList>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6f6:	f000 fea5 	bl	800d444 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6fa:	7bbb      	ldrb	r3, [r7, #14]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c706:	2b00      	cmp	r3, #0
 800c708:	dce9      	bgt.n	800c6de <prvUnlockQueue+0x60>
 800c70a:	e000      	b.n	800c70e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c70c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	22ff      	movs	r2, #255	; 0xff
 800c712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c716:	f001 fe35 	bl	800e384 <vPortExitCritical>
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c72a:	f001 fdfb 	bl	800e324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	2b00      	cmp	r3, #0
 800c734:	d102      	bne.n	800c73c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c736:	2301      	movs	r3, #1
 800c738:	60fb      	str	r3, [r7, #12]
 800c73a:	e001      	b.n	800c740 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c73c:	2300      	movs	r3, #0
 800c73e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c740:	f001 fe20 	bl	800e384 <vPortExitCritical>

	return xReturn;
 800c744:	68fb      	ldr	r3, [r7, #12]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c756:	f001 fde5 	bl	800e324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c762:	429a      	cmp	r2, r3
 800c764:	d102      	bne.n	800c76c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c766:	2301      	movs	r3, #1
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	e001      	b.n	800c770 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c76c:	2300      	movs	r3, #0
 800c76e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c770:	f001 fe08 	bl	800e384 <vPortExitCritical>

	return xReturn;
 800c774:	68fb      	ldr	r3, [r7, #12]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c78a:	2300      	movs	r3, #0
 800c78c:	60fb      	str	r3, [r7, #12]
 800c78e:	e014      	b.n	800c7ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c790:	4a0f      	ldr	r2, [pc, #60]	; (800c7d0 <vQueueAddToRegistry+0x50>)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10b      	bne.n	800c7b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c79c:	490c      	ldr	r1, [pc, #48]	; (800c7d0 <vQueueAddToRegistry+0x50>)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7a6:	4a0a      	ldr	r2, [pc, #40]	; (800c7d0 <vQueueAddToRegistry+0x50>)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	4413      	add	r3, r2
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7b2:	e006      	b.n	800c7c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	60fb      	str	r3, [r7, #12]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b07      	cmp	r3, #7
 800c7be:	d9e7      	bls.n	800c790 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	20004f64 	.word	0x20004f64

0800c7d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60fb      	str	r3, [r7, #12]
 800c7e0:	e016      	b.n	800c810 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c7e2:	4a10      	ldr	r2, [pc, #64]	; (800c824 <vQueueUnregisterQueue+0x50>)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	00db      	lsls	r3, r3, #3
 800c7e8:	4413      	add	r3, r2
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d10b      	bne.n	800c80a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c7f2:	4a0c      	ldr	r2, [pc, #48]	; (800c824 <vQueueUnregisterQueue+0x50>)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c7fc:	4a09      	ldr	r2, [pc, #36]	; (800c824 <vQueueUnregisterQueue+0x50>)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	00db      	lsls	r3, r3, #3
 800c802:	4413      	add	r3, r2
 800c804:	2200      	movs	r2, #0
 800c806:	605a      	str	r2, [r3, #4]
				break;
 800c808:	e006      	b.n	800c818 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	3301      	adds	r3, #1
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b07      	cmp	r3, #7
 800c814:	d9e5      	bls.n	800c7e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c816:	bf00      	nop
 800c818:	bf00      	nop
 800c81a:	3714      	adds	r7, #20
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr
 800c824:	20004f64 	.word	0x20004f64

0800c828 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c838:	f001 fd74 	bl	800e324 <vPortEnterCritical>
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c842:	b25b      	sxtb	r3, r3
 800c844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c848:	d103      	bne.n	800c852 <vQueueWaitForMessageRestricted+0x2a>
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c858:	b25b      	sxtb	r3, r3
 800c85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85e:	d103      	bne.n	800c868 <vQueueWaitForMessageRestricted+0x40>
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c868:	f001 fd8c 	bl	800e384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c870:	2b00      	cmp	r3, #0
 800c872:	d106      	bne.n	800c882 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	3324      	adds	r3, #36	; 0x24
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	68b9      	ldr	r1, [r7, #8]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 fc77 	bl	800d170 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c882:	6978      	ldr	r0, [r7, #20]
 800c884:	f7ff fefb 	bl	800c67e <prvUnlockQueue>
	}
 800c888:	bf00      	nop
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08e      	sub	sp, #56	; 0x38
 800c894:	af04      	add	r7, sp, #16
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10a      	bne.n	800c8ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	623b      	str	r3, [r7, #32]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10a      	bne.n	800c8d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	61fb      	str	r3, [r7, #28]
}
 800c8d2:	bf00      	nop
 800c8d4:	e7fe      	b.n	800c8d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8d6:	235c      	movs	r3, #92	; 0x5c
 800c8d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2b5c      	cmp	r3, #92	; 0x5c
 800c8de:	d00a      	beq.n	800c8f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	61bb      	str	r3, [r7, #24]
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d01e      	beq.n	800c93c <xTaskCreateStatic+0xac>
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01b      	beq.n	800c93c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c90c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	2202      	movs	r2, #2
 800c912:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c916:	2300      	movs	r3, #0
 800c918:	9303      	str	r3, [sp, #12]
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	9302      	str	r3, [sp, #8]
 800c91e:	f107 0314 	add.w	r3, r7, #20
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	68b9      	ldr	r1, [r7, #8]
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 f850 	bl	800c9d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c936:	f000 f8dd 	bl	800caf4 <prvAddNewTaskToReadyList>
 800c93a:	e001      	b.n	800c940 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c93c:	2300      	movs	r3, #0
 800c93e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c940:	697b      	ldr	r3, [r7, #20]
	}
 800c942:	4618      	mov	r0, r3
 800c944:	3728      	adds	r7, #40	; 0x28
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b08c      	sub	sp, #48	; 0x30
 800c94e:	af04      	add	r7, sp, #16
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	603b      	str	r3, [r7, #0]
 800c956:	4613      	mov	r3, r2
 800c958:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4618      	mov	r0, r3
 800c960:	f001 fe02 	bl	800e568 <pvPortMalloc>
 800c964:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00e      	beq.n	800c98a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c96c:	205c      	movs	r0, #92	; 0x5c
 800c96e:	f001 fdfb 	bl	800e568 <pvPortMalloc>
 800c972:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d003      	beq.n	800c982 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	631a      	str	r2, [r3, #48]	; 0x30
 800c980:	e005      	b.n	800c98e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c982:	6978      	ldr	r0, [r7, #20]
 800c984:	f001 febc 	bl	800e700 <vPortFree>
 800c988:	e001      	b.n	800c98e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d017      	beq.n	800c9c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c99c:	88fa      	ldrh	r2, [r7, #6]
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9303      	str	r3, [sp, #12]
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	9302      	str	r3, [sp, #8]
 800c9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68b9      	ldr	r1, [r7, #8]
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f000 f80e 	bl	800c9d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9b8:	69f8      	ldr	r0, [r7, #28]
 800c9ba:	f000 f89b 	bl	800caf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	61bb      	str	r3, [r7, #24]
 800c9c2:	e002      	b.n	800c9ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c9ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3720      	adds	r7, #32
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b088      	sub	sp, #32
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	21a5      	movs	r1, #165	; 0xa5
 800c9ee:	f002 fc41 	bl	800f274 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	4413      	add	r3, r2
 800ca02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	f023 0307 	bic.w	r3, r3, #7
 800ca0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	f003 0307 	and.w	r3, r3, #7
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00a      	beq.n	800ca2c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	617b      	str	r3, [r7, #20]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d01f      	beq.n	800ca72 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca32:	2300      	movs	r3, #0
 800ca34:	61fb      	str	r3, [r7, #28]
 800ca36:	e012      	b.n	800ca5e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	7819      	ldrb	r1, [r3, #0]
 800ca40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	4413      	add	r3, r2
 800ca46:	3334      	adds	r3, #52	; 0x34
 800ca48:	460a      	mov	r2, r1
 800ca4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	4413      	add	r3, r2
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d006      	beq.n	800ca66 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	61fb      	str	r3, [r7, #28]
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	2b0f      	cmp	r3, #15
 800ca62:	d9e9      	bls.n	800ca38 <prvInitialiseNewTask+0x64>
 800ca64:	e000      	b.n	800ca68 <prvInitialiseNewTask+0x94>
			{
				break;
 800ca66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca70:	e003      	b.n	800ca7a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7c:	2b37      	cmp	r3, #55	; 0x37
 800ca7e:	d901      	bls.n	800ca84 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca80:	2337      	movs	r3, #55	; 0x37
 800ca82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	2200      	movs	r2, #0
 800ca94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	3304      	adds	r3, #4
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fe56 	bl	800b74c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	3318      	adds	r3, #24
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fe fe51 	bl	800b74c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cabe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	2200      	movs	r2, #0
 800cac4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	68f9      	ldr	r1, [r7, #12]
 800cad2:	69b8      	ldr	r0, [r7, #24]
 800cad4:	f001 fafc 	bl	800e0d0 <pxPortInitialiseStack>
 800cad8:	4602      	mov	r2, r0
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caea:	bf00      	nop
 800caec:	3720      	adds	r7, #32
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cafc:	f001 fc12 	bl	800e324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb00:	4b2d      	ldr	r3, [pc, #180]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3301      	adds	r3, #1
 800cb06:	4a2c      	ldr	r2, [pc, #176]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb0a:	4b2c      	ldr	r3, [pc, #176]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d109      	bne.n	800cb26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb12:	4a2a      	ldr	r2, [pc, #168]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb18:	4b27      	ldr	r3, [pc, #156]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d110      	bne.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb20:	f000 fcb4 	bl	800d48c <prvInitialiseTaskLists>
 800cb24:	e00d      	b.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb26:	4b26      	ldr	r3, [pc, #152]	; (800cbc0 <prvAddNewTaskToReadyList+0xcc>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d109      	bne.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb2e:	4b23      	ldr	r3, [pc, #140]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d802      	bhi.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb3c:	4a1f      	ldr	r2, [pc, #124]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb42:	4b20      	ldr	r3, [pc, #128]	; (800cbc4 <prvAddNewTaskToReadyList+0xd0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3301      	adds	r3, #1
 800cb48:	4a1e      	ldr	r2, [pc, #120]	; (800cbc4 <prvAddNewTaskToReadyList+0xd0>)
 800cb4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb4c:	4b1d      	ldr	r3, [pc, #116]	; (800cbc4 <prvAddNewTaskToReadyList+0xd0>)
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb58:	4b1b      	ldr	r3, [pc, #108]	; (800cbc8 <prvAddNewTaskToReadyList+0xd4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d903      	bls.n	800cb68 <prvAddNewTaskToReadyList+0x74>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <prvAddNewTaskToReadyList+0xd4>)
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4413      	add	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4a15      	ldr	r2, [pc, #84]	; (800cbcc <prvAddNewTaskToReadyList+0xd8>)
 800cb76:	441a      	add	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	f7fe fdf1 	bl	800b766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb84:	f001 fbfe 	bl	800e384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb88:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <prvAddNewTaskToReadyList+0xcc>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00e      	beq.n	800cbae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb90:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d207      	bcs.n	800cbae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb9e:	4b0c      	ldr	r3, [pc, #48]	; (800cbd0 <prvAddNewTaskToReadyList+0xdc>)
 800cba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbae:	bf00      	nop
 800cbb0:	3708      	adds	r7, #8
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20000f50 	.word	0x20000f50
 800cbbc:	20000a7c 	.word	0x20000a7c
 800cbc0:	20000f5c 	.word	0x20000f5c
 800cbc4:	20000f6c 	.word	0x20000f6c
 800cbc8:	20000f58 	.word	0x20000f58
 800cbcc:	20000a80 	.word	0x20000a80
 800cbd0:	e000ed04 	.word	0xe000ed04

0800cbd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d017      	beq.n	800cc16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbe6:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <vTaskDelay+0x60>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00a      	beq.n	800cc04 <vTaskDelay+0x30>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	60bb      	str	r3, [r7, #8]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc04:	f000 f880 	bl	800cd08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc08:	2100      	movs	r1, #0
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 fe9e 	bl	800d94c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc10:	f000 f888 	bl	800cd24 <xTaskResumeAll>
 800cc14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d107      	bne.n	800cc2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <vTaskDelay+0x64>)
 800cc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc2c:	bf00      	nop
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	20000f78 	.word	0x20000f78
 800cc38:	e000ed04 	.word	0xe000ed04

0800cc3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08a      	sub	sp, #40	; 0x28
 800cc40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc42:	2300      	movs	r3, #0
 800cc44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc4a:	463a      	mov	r2, r7
 800cc4c:	1d39      	adds	r1, r7, #4
 800cc4e:	f107 0308 	add.w	r3, r7, #8
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fb38 	bl	800b2c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	9202      	str	r2, [sp, #8]
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	2300      	movs	r3, #0
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	2300      	movs	r3, #0
 800cc68:	460a      	mov	r2, r1
 800cc6a:	4921      	ldr	r1, [pc, #132]	; (800ccf0 <vTaskStartScheduler+0xb4>)
 800cc6c:	4821      	ldr	r0, [pc, #132]	; (800ccf4 <vTaskStartScheduler+0xb8>)
 800cc6e:	f7ff fe0f 	bl	800c890 <xTaskCreateStatic>
 800cc72:	4603      	mov	r3, r0
 800cc74:	4a20      	ldr	r2, [pc, #128]	; (800ccf8 <vTaskStartScheduler+0xbc>)
 800cc76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc78:	4b1f      	ldr	r3, [pc, #124]	; (800ccf8 <vTaskStartScheduler+0xbc>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc80:	2301      	movs	r3, #1
 800cc82:	617b      	str	r3, [r7, #20]
 800cc84:	e001      	b.n	800cc8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d102      	bne.n	800cc96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc90:	f000 feb0 	bl	800d9f4 <xTimerCreateTimerTask>
 800cc94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d116      	bne.n	800ccca <vTaskStartScheduler+0x8e>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	613b      	str	r3, [r7, #16]
}
 800ccae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccb0:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <vTaskStartScheduler+0xc0>)
 800ccb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccb8:	4b11      	ldr	r3, [pc, #68]	; (800cd00 <vTaskStartScheduler+0xc4>)
 800ccba:	2201      	movs	r2, #1
 800ccbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccbe:	4b11      	ldr	r3, [pc, #68]	; (800cd04 <vTaskStartScheduler+0xc8>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccc4:	f001 fa8c 	bl	800e1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccc8:	e00e      	b.n	800cce8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd0:	d10a      	bne.n	800cce8 <vTaskStartScheduler+0xac>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	60fb      	str	r3, [r7, #12]
}
 800cce4:	bf00      	nop
 800cce6:	e7fe      	b.n	800cce6 <vTaskStartScheduler+0xaa>
}
 800cce8:	bf00      	nop
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	0801541c 	.word	0x0801541c
 800ccf4:	0800d45d 	.word	0x0800d45d
 800ccf8:	20000f74 	.word	0x20000f74
 800ccfc:	20000f70 	.word	0x20000f70
 800cd00:	20000f5c 	.word	0x20000f5c
 800cd04:	20000f54 	.word	0x20000f54

0800cd08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd0c:	4b04      	ldr	r3, [pc, #16]	; (800cd20 <vTaskSuspendAll+0x18>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3301      	adds	r3, #1
 800cd12:	4a03      	ldr	r2, [pc, #12]	; (800cd20 <vTaskSuspendAll+0x18>)
 800cd14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd16:	bf00      	nop
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	20000f78 	.word	0x20000f78

0800cd24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd32:	4b42      	ldr	r3, [pc, #264]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10a      	bne.n	800cd50 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3e:	f383 8811 	msr	BASEPRI, r3
 800cd42:	f3bf 8f6f 	isb	sy
 800cd46:	f3bf 8f4f 	dsb	sy
 800cd4a:	603b      	str	r3, [r7, #0]
}
 800cd4c:	bf00      	nop
 800cd4e:	e7fe      	b.n	800cd4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd50:	f001 fae8 	bl	800e324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd54:	4b39      	ldr	r3, [pc, #228]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	4a38      	ldr	r2, [pc, #224]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd5e:	4b37      	ldr	r3, [pc, #220]	; (800ce3c <xTaskResumeAll+0x118>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d162      	bne.n	800ce2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd66:	4b36      	ldr	r3, [pc, #216]	; (800ce40 <xTaskResumeAll+0x11c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d05e      	beq.n	800ce2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd6e:	e02f      	b.n	800cdd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd70:	4b34      	ldr	r3, [pc, #208]	; (800ce44 <xTaskResumeAll+0x120>)
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	3318      	adds	r3, #24
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7fe fd4f 	bl	800b820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3304      	adds	r3, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fd4a 	bl	800b820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd90:	4b2d      	ldr	r3, [pc, #180]	; (800ce48 <xTaskResumeAll+0x124>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d903      	bls.n	800cda0 <xTaskResumeAll+0x7c>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	4a2a      	ldr	r2, [pc, #168]	; (800ce48 <xTaskResumeAll+0x124>)
 800cd9e:	6013      	str	r3, [r2, #0]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4a27      	ldr	r2, [pc, #156]	; (800ce4c <xTaskResumeAll+0x128>)
 800cdae:	441a      	add	r2, r3
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	4610      	mov	r0, r2
 800cdb8:	f7fe fcd5 	bl	800b766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc0:	4b23      	ldr	r3, [pc, #140]	; (800ce50 <xTaskResumeAll+0x12c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d302      	bcc.n	800cdd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cdca:	4b22      	ldr	r3, [pc, #136]	; (800ce54 <xTaskResumeAll+0x130>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdd0:	4b1c      	ldr	r3, [pc, #112]	; (800ce44 <xTaskResumeAll+0x120>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1cb      	bne.n	800cd70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d001      	beq.n	800cde2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdde:	f000 fbf3 	bl	800d5c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cde2:	4b1d      	ldr	r3, [pc, #116]	; (800ce58 <xTaskResumeAll+0x134>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d010      	beq.n	800ce10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdee:	f000 f847 	bl	800ce80 <xTaskIncrementTick>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cdf8:	4b16      	ldr	r3, [pc, #88]	; (800ce54 <xTaskResumeAll+0x130>)
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3b01      	subs	r3, #1
 800ce02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1f1      	bne.n	800cdee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce0a:	4b13      	ldr	r3, [pc, #76]	; (800ce58 <xTaskResumeAll+0x134>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce10:	4b10      	ldr	r3, [pc, #64]	; (800ce54 <xTaskResumeAll+0x130>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d009      	beq.n	800ce2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce1c:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <xTaskResumeAll+0x138>)
 800ce1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce2c:	f001 faaa 	bl	800e384 <vPortExitCritical>

	return xAlreadyYielded;
 800ce30:	68bb      	ldr	r3, [r7, #8]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20000f78 	.word	0x20000f78
 800ce40:	20000f50 	.word	0x20000f50
 800ce44:	20000f10 	.word	0x20000f10
 800ce48:	20000f58 	.word	0x20000f58
 800ce4c:	20000a80 	.word	0x20000a80
 800ce50:	20000a7c 	.word	0x20000a7c
 800ce54:	20000f64 	.word	0x20000f64
 800ce58:	20000f60 	.word	0x20000f60
 800ce5c:	e000ed04 	.word	0xe000ed04

0800ce60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce66:	4b05      	ldr	r3, [pc, #20]	; (800ce7c <xTaskGetTickCount+0x1c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce6c:	687b      	ldr	r3, [r7, #4]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	20000f54 	.word	0x20000f54

0800ce80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce86:	2300      	movs	r3, #0
 800ce88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce8a:	4b4f      	ldr	r3, [pc, #316]	; (800cfc8 <xTaskIncrementTick+0x148>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f040 808f 	bne.w	800cfb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce94:	4b4d      	ldr	r3, [pc, #308]	; (800cfcc <xTaskIncrementTick+0x14c>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce9c:	4a4b      	ldr	r2, [pc, #300]	; (800cfcc <xTaskIncrementTick+0x14c>)
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d120      	bne.n	800ceea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cea8:	4b49      	ldr	r3, [pc, #292]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00a      	beq.n	800cec8 <xTaskIncrementTick+0x48>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	603b      	str	r3, [r7, #0]
}
 800cec4:	bf00      	nop
 800cec6:	e7fe      	b.n	800cec6 <xTaskIncrementTick+0x46>
 800cec8:	4b41      	ldr	r3, [pc, #260]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	60fb      	str	r3, [r7, #12]
 800cece:	4b41      	ldr	r3, [pc, #260]	; (800cfd4 <xTaskIncrementTick+0x154>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a3f      	ldr	r2, [pc, #252]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	4a3f      	ldr	r2, [pc, #252]	; (800cfd4 <xTaskIncrementTick+0x154>)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6013      	str	r3, [r2, #0]
 800cedc:	4b3e      	ldr	r3, [pc, #248]	; (800cfd8 <xTaskIncrementTick+0x158>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3301      	adds	r3, #1
 800cee2:	4a3d      	ldr	r2, [pc, #244]	; (800cfd8 <xTaskIncrementTick+0x158>)
 800cee4:	6013      	str	r3, [r2, #0]
 800cee6:	f000 fb6f 	bl	800d5c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceea:	4b3c      	ldr	r3, [pc, #240]	; (800cfdc <xTaskIncrementTick+0x15c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d349      	bcc.n	800cf88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cef4:	4b36      	ldr	r3, [pc, #216]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d104      	bne.n	800cf08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cefe:	4b37      	ldr	r3, [pc, #220]	; (800cfdc <xTaskIncrementTick+0x15c>)
 800cf00:	f04f 32ff 	mov.w	r2, #4294967295
 800cf04:	601a      	str	r2, [r3, #0]
					break;
 800cf06:	e03f      	b.n	800cf88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf08:	4b31      	ldr	r3, [pc, #196]	; (800cfd0 <xTaskIncrementTick+0x150>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d203      	bcs.n	800cf28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf20:	4a2e      	ldr	r2, [pc, #184]	; (800cfdc <xTaskIncrementTick+0x15c>)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf26:	e02f      	b.n	800cf88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe fc77 	bl	800b820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	3318      	adds	r3, #24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fe fc6e 	bl	800b820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf48:	4b25      	ldr	r3, [pc, #148]	; (800cfe0 <xTaskIncrementTick+0x160>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d903      	bls.n	800cf58 <xTaskIncrementTick+0xd8>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf54:	4a22      	ldr	r2, [pc, #136]	; (800cfe0 <xTaskIncrementTick+0x160>)
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	009b      	lsls	r3, r3, #2
 800cf64:	4a1f      	ldr	r2, [pc, #124]	; (800cfe4 <xTaskIncrementTick+0x164>)
 800cf66:	441a      	add	r2, r3
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	4610      	mov	r0, r2
 800cf70:	f7fe fbf9 	bl	800b766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf78:	4b1b      	ldr	r3, [pc, #108]	; (800cfe8 <xTaskIncrementTick+0x168>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d3b8      	bcc.n	800cef4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf82:	2301      	movs	r3, #1
 800cf84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf86:	e7b5      	b.n	800cef4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf88:	4b17      	ldr	r3, [pc, #92]	; (800cfe8 <xTaskIncrementTick+0x168>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8e:	4915      	ldr	r1, [pc, #84]	; (800cfe4 <xTaskIncrementTick+0x164>)
 800cf90:	4613      	mov	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	440b      	add	r3, r1
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d901      	bls.n	800cfa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfa4:	4b11      	ldr	r3, [pc, #68]	; (800cfec <xTaskIncrementTick+0x16c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d007      	beq.n	800cfbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cfac:	2301      	movs	r3, #1
 800cfae:	617b      	str	r3, [r7, #20]
 800cfb0:	e004      	b.n	800cfbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfb2:	4b0f      	ldr	r3, [pc, #60]	; (800cff0 <xTaskIncrementTick+0x170>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	4a0d      	ldr	r2, [pc, #52]	; (800cff0 <xTaskIncrementTick+0x170>)
 800cfba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfbc:	697b      	ldr	r3, [r7, #20]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20000f78 	.word	0x20000f78
 800cfcc:	20000f54 	.word	0x20000f54
 800cfd0:	20000f08 	.word	0x20000f08
 800cfd4:	20000f0c 	.word	0x20000f0c
 800cfd8:	20000f68 	.word	0x20000f68
 800cfdc:	20000f70 	.word	0x20000f70
 800cfe0:	20000f58 	.word	0x20000f58
 800cfe4:	20000a80 	.word	0x20000a80
 800cfe8:	20000a7c 	.word	0x20000a7c
 800cfec:	20000f64 	.word	0x20000f64
 800cff0:	20000f60 	.word	0x20000f60

0800cff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cffa:	4b28      	ldr	r3, [pc, #160]	; (800d09c <vTaskSwitchContext+0xa8>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d002:	4b27      	ldr	r3, [pc, #156]	; (800d0a0 <vTaskSwitchContext+0xac>)
 800d004:	2201      	movs	r2, #1
 800d006:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d008:	e041      	b.n	800d08e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d00a:	4b25      	ldr	r3, [pc, #148]	; (800d0a0 <vTaskSwitchContext+0xac>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d010:	4b24      	ldr	r3, [pc, #144]	; (800d0a4 <vTaskSwitchContext+0xb0>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	e010      	b.n	800d03a <vTaskSwitchContext+0x46>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10a      	bne.n	800d034 <vTaskSwitchContext+0x40>
	__asm volatile
 800d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	607b      	str	r3, [r7, #4]
}
 800d030:	bf00      	nop
 800d032:	e7fe      	b.n	800d032 <vTaskSwitchContext+0x3e>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3b01      	subs	r3, #1
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	491b      	ldr	r1, [pc, #108]	; (800d0a8 <vTaskSwitchContext+0xb4>)
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	4613      	mov	r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	440b      	add	r3, r1
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0e4      	beq.n	800d018 <vTaskSwitchContext+0x24>
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4a13      	ldr	r2, [pc, #76]	; (800d0a8 <vTaskSwitchContext+0xb4>)
 800d05a:	4413      	add	r3, r2
 800d05c:	60bb      	str	r3, [r7, #8]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	605a      	str	r2, [r3, #4]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	3308      	adds	r3, #8
 800d070:	429a      	cmp	r2, r3
 800d072:	d104      	bne.n	800d07e <vTaskSwitchContext+0x8a>
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	685a      	ldr	r2, [r3, #4]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	605a      	str	r2, [r3, #4]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	4a09      	ldr	r2, [pc, #36]	; (800d0ac <vTaskSwitchContext+0xb8>)
 800d086:	6013      	str	r3, [r2, #0]
 800d088:	4a06      	ldr	r2, [pc, #24]	; (800d0a4 <vTaskSwitchContext+0xb0>)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6013      	str	r3, [r2, #0]
}
 800d08e:	bf00      	nop
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	20000f78 	.word	0x20000f78
 800d0a0:	20000f64 	.word	0x20000f64
 800d0a4:	20000f58 	.word	0x20000f58
 800d0a8:	20000a80 	.word	0x20000a80
 800d0ac:	20000a7c 	.word	0x20000a7c

0800d0b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0d6:	4b07      	ldr	r3, [pc, #28]	; (800d0f4 <vTaskPlaceOnEventList+0x44>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3318      	adds	r3, #24
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7fe fb65 	bl	800b7ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	6838      	ldr	r0, [r7, #0]
 800d0e8:	f000 fc30 	bl	800d94c <prvAddCurrentTaskToDelayedList>
}
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20000a7c 	.word	0x20000a7c

0800d0f8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10a      	bne.n	800d120 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	617b      	str	r3, [r7, #20]
}
 800d11c:	bf00      	nop
 800d11e:	e7fe      	b.n	800d11e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800d120:	4b11      	ldr	r3, [pc, #68]	; (800d168 <vTaskPlaceOnUnorderedEventList+0x70>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10a      	bne.n	800d13e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	613b      	str	r3, [r7, #16]
}
 800d13a:	bf00      	nop
 800d13c:	e7fe      	b.n	800d13c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d13e:	4b0b      	ldr	r3, [pc, #44]	; (800d16c <vTaskPlaceOnUnorderedEventList+0x74>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800d148:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d14a:	4b08      	ldr	r3, [pc, #32]	; (800d16c <vTaskPlaceOnUnorderedEventList+0x74>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3318      	adds	r3, #24
 800d150:	4619      	mov	r1, r3
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7fe fb07 	bl	800b766 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d158:	2101      	movs	r1, #1
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fbf6 	bl	800d94c <prvAddCurrentTaskToDelayedList>
}
 800d160:	bf00      	nop
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	20000f78 	.word	0x20000f78
 800d16c:	20000a7c 	.word	0x20000a7c

0800d170 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	617b      	str	r3, [r7, #20]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3318      	adds	r3, #24
 800d19e:	4619      	mov	r1, r3
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f7fe fae0 	bl	800b766 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d002      	beq.n	800d1b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d1b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1b2:	6879      	ldr	r1, [r7, #4]
 800d1b4:	68b8      	ldr	r0, [r7, #8]
 800d1b6:	f000 fbc9 	bl	800d94c <prvAddCurrentTaskToDelayedList>
	}
 800d1ba:	bf00      	nop
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20000a7c 	.word	0x20000a7c

0800d1c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	60fb      	str	r3, [r7, #12]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	3318      	adds	r3, #24
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fb11 	bl	800b820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1fe:	4b1e      	ldr	r3, [pc, #120]	; (800d278 <xTaskRemoveFromEventList+0xb0>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d11d      	bne.n	800d242 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	3304      	adds	r3, #4
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fe fb08 	bl	800b820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d214:	4b19      	ldr	r3, [pc, #100]	; (800d27c <xTaskRemoveFromEventList+0xb4>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d903      	bls.n	800d224 <xTaskRemoveFromEventList+0x5c>
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d220:	4a16      	ldr	r2, [pc, #88]	; (800d27c <xTaskRemoveFromEventList+0xb4>)
 800d222:	6013      	str	r3, [r2, #0]
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4a13      	ldr	r2, [pc, #76]	; (800d280 <xTaskRemoveFromEventList+0xb8>)
 800d232:	441a      	add	r2, r3
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	3304      	adds	r3, #4
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f7fe fa93 	bl	800b766 <vListInsertEnd>
 800d240:	e005      	b.n	800d24e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	3318      	adds	r3, #24
 800d246:	4619      	mov	r1, r3
 800d248:	480e      	ldr	r0, [pc, #56]	; (800d284 <xTaskRemoveFromEventList+0xbc>)
 800d24a:	f7fe fa8c 	bl	800b766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d252:	4b0d      	ldr	r3, [pc, #52]	; (800d288 <xTaskRemoveFromEventList+0xc0>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d258:	429a      	cmp	r2, r3
 800d25a:	d905      	bls.n	800d268 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d25c:	2301      	movs	r3, #1
 800d25e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d260:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <xTaskRemoveFromEventList+0xc4>)
 800d262:	2201      	movs	r2, #1
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	e001      	b.n	800d26c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d268:	2300      	movs	r3, #0
 800d26a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d26c:	697b      	ldr	r3, [r7, #20]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	20000f78 	.word	0x20000f78
 800d27c:	20000f58 	.word	0x20000f58
 800d280:	20000a80 	.word	0x20000a80
 800d284:	20000f10 	.word	0x20000f10
 800d288:	20000a7c 	.word	0x20000a7c
 800d28c:	20000f64 	.word	0x20000f64

0800d290 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800d29a:	4b29      	ldr	r3, [pc, #164]	; (800d340 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10a      	bne.n	800d2b8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	613b      	str	r3, [r7, #16]
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10a      	bne.n	800d2e4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	60fb      	str	r3, [r7, #12]
}
 800d2e0:	bf00      	nop
 800d2e2:	e7fe      	b.n	800d2e2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7fe fa9b 	bl	800b820 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe fa96 	bl	800b820 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f8:	4b12      	ldr	r3, [pc, #72]	; (800d344 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d903      	bls.n	800d308 <vTaskRemoveFromUnorderedEventList+0x78>
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	4a0f      	ldr	r2, [pc, #60]	; (800d344 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d306:	6013      	str	r3, [r2, #0]
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d30c:	4613      	mov	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4a0c      	ldr	r2, [pc, #48]	; (800d348 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d316:	441a      	add	r2, r3
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	3304      	adds	r3, #4
 800d31c:	4619      	mov	r1, r3
 800d31e:	4610      	mov	r0, r2
 800d320:	f7fe fa21 	bl	800b766 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d328:	4b08      	ldr	r3, [pc, #32]	; (800d34c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32e:	429a      	cmp	r2, r3
 800d330:	d902      	bls.n	800d338 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800d332:	4b07      	ldr	r3, [pc, #28]	; (800d350 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800d334:	2201      	movs	r2, #1
 800d336:	601a      	str	r2, [r3, #0]
	}
}
 800d338:	bf00      	nop
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20000f78 	.word	0x20000f78
 800d344:	20000f58 	.word	0x20000f58
 800d348:	20000a80 	.word	0x20000a80
 800d34c:	20000a7c 	.word	0x20000a7c
 800d350:	20000f64 	.word	0x20000f64

0800d354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d35c:	4b06      	ldr	r3, [pc, #24]	; (800d378 <vTaskInternalSetTimeOutState+0x24>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d364:	4b05      	ldr	r3, [pc, #20]	; (800d37c <vTaskInternalSetTimeOutState+0x28>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	605a      	str	r2, [r3, #4]
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	20000f68 	.word	0x20000f68
 800d37c:	20000f54 	.word	0x20000f54

0800d380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d10a      	bne.n	800d3a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d394:	f383 8811 	msr	BASEPRI, r3
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	613b      	str	r3, [r7, #16]
}
 800d3a2:	bf00      	nop
 800d3a4:	e7fe      	b.n	800d3a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10a      	bne.n	800d3c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b0:	f383 8811 	msr	BASEPRI, r3
 800d3b4:	f3bf 8f6f 	isb	sy
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	60fb      	str	r3, [r7, #12]
}
 800d3be:	bf00      	nop
 800d3c0:	e7fe      	b.n	800d3c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d3c2:	f000 ffaf 	bl	800e324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3c6:	4b1d      	ldr	r3, [pc, #116]	; (800d43c <xTaskCheckForTimeOut+0xbc>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	69ba      	ldr	r2, [r7, #24]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3de:	d102      	bne.n	800d3e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]
 800d3e4:	e023      	b.n	800d42e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	4b15      	ldr	r3, [pc, #84]	; (800d440 <xTaskCheckForTimeOut+0xc0>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d007      	beq.n	800d402 <xTaskCheckForTimeOut+0x82>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	69ba      	ldr	r2, [r7, #24]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d302      	bcc.n	800d402 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	61fb      	str	r3, [r7, #28]
 800d400:	e015      	b.n	800d42e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d20b      	bcs.n	800d424 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	1ad2      	subs	r2, r2, r3
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff ff9b 	bl	800d354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d41e:	2300      	movs	r3, #0
 800d420:	61fb      	str	r3, [r7, #28]
 800d422:	e004      	b.n	800d42e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	2200      	movs	r2, #0
 800d428:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d42a:	2301      	movs	r3, #1
 800d42c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d42e:	f000 ffa9 	bl	800e384 <vPortExitCritical>

	return xReturn;
 800d432:	69fb      	ldr	r3, [r7, #28]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	20000f54 	.word	0x20000f54
 800d440:	20000f68 	.word	0x20000f68

0800d444 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d444:	b480      	push	{r7}
 800d446:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d448:	4b03      	ldr	r3, [pc, #12]	; (800d458 <vTaskMissedYield+0x14>)
 800d44a:	2201      	movs	r2, #1
 800d44c:	601a      	str	r2, [r3, #0]
}
 800d44e:	bf00      	nop
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr
 800d458:	20000f64 	.word	0x20000f64

0800d45c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d464:	f000 f852 	bl	800d50c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d468:	4b06      	ldr	r3, [pc, #24]	; (800d484 <prvIdleTask+0x28>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d9f9      	bls.n	800d464 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d470:	4b05      	ldr	r3, [pc, #20]	; (800d488 <prvIdleTask+0x2c>)
 800d472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	f3bf 8f4f 	dsb	sy
 800d47c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d480:	e7f0      	b.n	800d464 <prvIdleTask+0x8>
 800d482:	bf00      	nop
 800d484:	20000a80 	.word	0x20000a80
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d492:	2300      	movs	r3, #0
 800d494:	607b      	str	r3, [r7, #4]
 800d496:	e00c      	b.n	800d4b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	4613      	mov	r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4413      	add	r3, r2
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	4a12      	ldr	r2, [pc, #72]	; (800d4ec <prvInitialiseTaskLists+0x60>)
 800d4a4:	4413      	add	r3, r2
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe f930 	bl	800b70c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	607b      	str	r3, [r7, #4]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b37      	cmp	r3, #55	; 0x37
 800d4b6:	d9ef      	bls.n	800d498 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d4b8:	480d      	ldr	r0, [pc, #52]	; (800d4f0 <prvInitialiseTaskLists+0x64>)
 800d4ba:	f7fe f927 	bl	800b70c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d4be:	480d      	ldr	r0, [pc, #52]	; (800d4f4 <prvInitialiseTaskLists+0x68>)
 800d4c0:	f7fe f924 	bl	800b70c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d4c4:	480c      	ldr	r0, [pc, #48]	; (800d4f8 <prvInitialiseTaskLists+0x6c>)
 800d4c6:	f7fe f921 	bl	800b70c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4ca:	480c      	ldr	r0, [pc, #48]	; (800d4fc <prvInitialiseTaskLists+0x70>)
 800d4cc:	f7fe f91e 	bl	800b70c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4d0:	480b      	ldr	r0, [pc, #44]	; (800d500 <prvInitialiseTaskLists+0x74>)
 800d4d2:	f7fe f91b 	bl	800b70c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4d6:	4b0b      	ldr	r3, [pc, #44]	; (800d504 <prvInitialiseTaskLists+0x78>)
 800d4d8:	4a05      	ldr	r2, [pc, #20]	; (800d4f0 <prvInitialiseTaskLists+0x64>)
 800d4da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4dc:	4b0a      	ldr	r3, [pc, #40]	; (800d508 <prvInitialiseTaskLists+0x7c>)
 800d4de:	4a05      	ldr	r2, [pc, #20]	; (800d4f4 <prvInitialiseTaskLists+0x68>)
 800d4e0:	601a      	str	r2, [r3, #0]
}
 800d4e2:	bf00      	nop
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20000a80 	.word	0x20000a80
 800d4f0:	20000ee0 	.word	0x20000ee0
 800d4f4:	20000ef4 	.word	0x20000ef4
 800d4f8:	20000f10 	.word	0x20000f10
 800d4fc:	20000f24 	.word	0x20000f24
 800d500:	20000f3c 	.word	0x20000f3c
 800d504:	20000f08 	.word	0x20000f08
 800d508:	20000f0c 	.word	0x20000f0c

0800d50c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d512:	e019      	b.n	800d548 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d514:	f000 ff06 	bl	800e324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d518:	4b10      	ldr	r3, [pc, #64]	; (800d55c <prvCheckTasksWaitingTermination+0x50>)
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3304      	adds	r3, #4
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe f97b 	bl	800b820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d52a:	4b0d      	ldr	r3, [pc, #52]	; (800d560 <prvCheckTasksWaitingTermination+0x54>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	3b01      	subs	r3, #1
 800d530:	4a0b      	ldr	r2, [pc, #44]	; (800d560 <prvCheckTasksWaitingTermination+0x54>)
 800d532:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d534:	4b0b      	ldr	r3, [pc, #44]	; (800d564 <prvCheckTasksWaitingTermination+0x58>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3b01      	subs	r3, #1
 800d53a:	4a0a      	ldr	r2, [pc, #40]	; (800d564 <prvCheckTasksWaitingTermination+0x58>)
 800d53c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d53e:	f000 ff21 	bl	800e384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f810 	bl	800d568 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d548:	4b06      	ldr	r3, [pc, #24]	; (800d564 <prvCheckTasksWaitingTermination+0x58>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1e1      	bne.n	800d514 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d550:	bf00      	nop
 800d552:	bf00      	nop
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	20000f24 	.word	0x20000f24
 800d560:	20000f50 	.word	0x20000f50
 800d564:	20000f38 	.word	0x20000f38

0800d568 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d576:	2b00      	cmp	r3, #0
 800d578:	d108      	bne.n	800d58c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d57e:	4618      	mov	r0, r3
 800d580:	f001 f8be 	bl	800e700 <vPortFree>
				vPortFree( pxTCB );
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f001 f8bb 	bl	800e700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d58a:	e018      	b.n	800d5be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d592:	2b01      	cmp	r3, #1
 800d594:	d103      	bne.n	800d59e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f001 f8b2 	bl	800e700 <vPortFree>
	}
 800d59c:	e00f      	b.n	800d5be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d00a      	beq.n	800d5be <prvDeleteTCB+0x56>
	__asm volatile
 800d5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ac:	f383 8811 	msr	BASEPRI, r3
 800d5b0:	f3bf 8f6f 	isb	sy
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	60fb      	str	r3, [r7, #12]
}
 800d5ba:	bf00      	nop
 800d5bc:	e7fe      	b.n	800d5bc <prvDeleteTCB+0x54>
	}
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
	...

0800d5c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ce:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <prvResetNextTaskUnblockTime+0x38>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d104      	bne.n	800d5e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <prvResetNextTaskUnblockTime+0x3c>)
 800d5da:	f04f 32ff 	mov.w	r2, #4294967295
 800d5de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5e0:	e008      	b.n	800d5f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e2:	4b07      	ldr	r3, [pc, #28]	; (800d600 <prvResetNextTaskUnblockTime+0x38>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	4a04      	ldr	r2, [pc, #16]	; (800d604 <prvResetNextTaskUnblockTime+0x3c>)
 800d5f2:	6013      	str	r3, [r2, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	20000f08 	.word	0x20000f08
 800d604:	20000f70 	.word	0x20000f70

0800d608 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d60e:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <xTaskGetSchedulerState+0x34>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d102      	bne.n	800d61c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d616:	2301      	movs	r3, #1
 800d618:	607b      	str	r3, [r7, #4]
 800d61a:	e008      	b.n	800d62e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d61c:	4b08      	ldr	r3, [pc, #32]	; (800d640 <xTaskGetSchedulerState+0x38>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d624:	2302      	movs	r3, #2
 800d626:	607b      	str	r3, [r7, #4]
 800d628:	e001      	b.n	800d62e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d62a:	2300      	movs	r3, #0
 800d62c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d62e:	687b      	ldr	r3, [r7, #4]
	}
 800d630:	4618      	mov	r0, r3
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	20000f5c 	.word	0x20000f5c
 800d640:	20000f78 	.word	0x20000f78

0800d644 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d650:	2300      	movs	r3, #0
 800d652:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d051      	beq.n	800d6fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65e:	4b2a      	ldr	r3, [pc, #168]	; (800d708 <xTaskPriorityInherit+0xc4>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	429a      	cmp	r2, r3
 800d666:	d241      	bcs.n	800d6ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	db06      	blt.n	800d67e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d670:	4b25      	ldr	r3, [pc, #148]	; (800d708 <xTaskPriorityInherit+0xc4>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d676:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	6959      	ldr	r1, [r3, #20]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d686:	4613      	mov	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	4413      	add	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4a1f      	ldr	r2, [pc, #124]	; (800d70c <xTaskPriorityInherit+0xc8>)
 800d690:	4413      	add	r3, r2
 800d692:	4299      	cmp	r1, r3
 800d694:	d122      	bne.n	800d6dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	3304      	adds	r3, #4
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fe f8c0 	bl	800b820 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6a0:	4b19      	ldr	r3, [pc, #100]	; (800d708 <xTaskPriorityInherit+0xc4>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ae:	4b18      	ldr	r3, [pc, #96]	; (800d710 <xTaskPriorityInherit+0xcc>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d903      	bls.n	800d6be <xTaskPriorityInherit+0x7a>
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ba:	4a15      	ldr	r2, [pc, #84]	; (800d710 <xTaskPriorityInherit+0xcc>)
 800d6bc:	6013      	str	r3, [r2, #0]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4a10      	ldr	r2, [pc, #64]	; (800d70c <xTaskPriorityInherit+0xc8>)
 800d6cc:	441a      	add	r2, r3
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f7fe f846 	bl	800b766 <vListInsertEnd>
 800d6da:	e004      	b.n	800d6e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	; (800d708 <xTaskPriorityInherit+0xc4>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	e008      	b.n	800d6fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6f0:	4b05      	ldr	r3, [pc, #20]	; (800d708 <xTaskPriorityInherit+0xc4>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d201      	bcs.n	800d6fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
	}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	20000a7c 	.word	0x20000a7c
 800d70c:	20000a80 	.word	0x20000a80
 800d710:	20000f58 	.word	0x20000f58

0800d714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d720:	2300      	movs	r3, #0
 800d722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d056      	beq.n	800d7d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d72a:	4b2e      	ldr	r3, [pc, #184]	; (800d7e4 <xTaskPriorityDisinherit+0xd0>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	693a      	ldr	r2, [r7, #16]
 800d730:	429a      	cmp	r2, r3
 800d732:	d00a      	beq.n	800d74a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	60fb      	str	r3, [r7, #12]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10a      	bne.n	800d768 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	60bb      	str	r3, [r7, #8]
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d76c:	1e5a      	subs	r2, r3, #1
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d02c      	beq.n	800d7d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d782:	2b00      	cmp	r3, #0
 800d784:	d128      	bne.n	800d7d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	3304      	adds	r3, #4
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe f848 	bl	800b820 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d79c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a8:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <xTaskPriorityDisinherit+0xd4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d903      	bls.n	800d7b8 <xTaskPriorityDisinherit+0xa4>
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	4a0c      	ldr	r2, [pc, #48]	; (800d7e8 <xTaskPriorityDisinherit+0xd4>)
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7bc:	4613      	mov	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4a09      	ldr	r2, [pc, #36]	; (800d7ec <xTaskPriorityDisinherit+0xd8>)
 800d7c6:	441a      	add	r2, r3
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	f7fd ffc9 	bl	800b766 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7d8:	697b      	ldr	r3, [r7, #20]
	}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3718      	adds	r7, #24
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20000a7c 	.word	0x20000a7c
 800d7e8:	20000f58 	.word	0x20000f58
 800d7ec:	20000a80 	.word	0x20000a80

0800d7f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7fe:	2301      	movs	r3, #1
 800d800:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d06a      	beq.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d10a      	bne.n	800d826 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	60fb      	str	r3, [r7, #12]
}
 800d822:	bf00      	nop
 800d824:	e7fe      	b.n	800d824 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d902      	bls.n	800d836 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	61fb      	str	r3, [r7, #28]
 800d834:	e002      	b.n	800d83c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d83a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d840:	69fa      	ldr	r2, [r7, #28]
 800d842:	429a      	cmp	r2, r3
 800d844:	d04b      	beq.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d146      	bne.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d850:	4b25      	ldr	r3, [pc, #148]	; (800d8e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	429a      	cmp	r2, r3
 800d858:	d10a      	bne.n	800d870 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	60bb      	str	r3, [r7, #8]
}
 800d86c:	bf00      	nop
 800d86e:	e7fe      	b.n	800d86e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d874:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	69fa      	ldr	r2, [r7, #28]
 800d87a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	2b00      	cmp	r3, #0
 800d882:	db04      	blt.n	800d88e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	6959      	ldr	r1, [r3, #20]
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	4613      	mov	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	4413      	add	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4a13      	ldr	r2, [pc, #76]	; (800d8ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d89e:	4413      	add	r3, r2
 800d8a0:	4299      	cmp	r1, r3
 800d8a2:	d11c      	bne.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	3304      	adds	r3, #4
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fd ffb9 	bl	800b820 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	4b0f      	ldr	r3, [pc, #60]	; (800d8f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d903      	bls.n	800d8c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	4a0c      	ldr	r2, [pc, #48]	; (800d8f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d8c0:	6013      	str	r3, [r2, #0]
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4a07      	ldr	r2, [pc, #28]	; (800d8ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d8d0:	441a      	add	r2, r3
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4610      	mov	r0, r2
 800d8da:	f7fd ff44 	bl	800b766 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8de:	bf00      	nop
 800d8e0:	3720      	adds	r7, #32
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000a7c 	.word	0x20000a7c
 800d8ec:	20000a80 	.word	0x20000a80
 800d8f0:	20000f58 	.word	0x20000f58

0800d8f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800d8fa:	4b09      	ldr	r3, [pc, #36]	; (800d920 <uxTaskResetEventItemValue+0x2c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d902:	4b07      	ldr	r3, [pc, #28]	; (800d920 <uxTaskResetEventItemValue+0x2c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d908:	4b05      	ldr	r3, [pc, #20]	; (800d920 <uxTaskResetEventItemValue+0x2c>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800d910:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800d912:	687b      	ldr	r3, [r7, #4]
}
 800d914:	4618      	mov	r0, r3
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr
 800d920:	20000a7c 	.word	0x20000a7c

0800d924 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d928:	4b07      	ldr	r3, [pc, #28]	; (800d948 <pvTaskIncrementMutexHeldCount+0x24>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d004      	beq.n	800d93a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <pvTaskIncrementMutexHeldCount+0x24>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d936:	3201      	adds	r2, #1
 800d938:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d93a:	4b03      	ldr	r3, [pc, #12]	; (800d948 <pvTaskIncrementMutexHeldCount+0x24>)
 800d93c:	681b      	ldr	r3, [r3, #0]
	}
 800d93e:	4618      	mov	r0, r3
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	20000a7c 	.word	0x20000a7c

0800d94c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d956:	4b21      	ldr	r3, [pc, #132]	; (800d9dc <prvAddCurrentTaskToDelayedList+0x90>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d95c:	4b20      	ldr	r3, [pc, #128]	; (800d9e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	3304      	adds	r3, #4
 800d962:	4618      	mov	r0, r3
 800d964:	f7fd ff5c 	bl	800b820 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96e:	d10a      	bne.n	800d986 <prvAddCurrentTaskToDelayedList+0x3a>
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d976:	4b1a      	ldr	r3, [pc, #104]	; (800d9e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	3304      	adds	r3, #4
 800d97c:	4619      	mov	r1, r3
 800d97e:	4819      	ldr	r0, [pc, #100]	; (800d9e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800d980:	f7fd fef1 	bl	800b766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d984:	e026      	b.n	800d9d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4413      	add	r3, r2
 800d98c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d98e:	4b14      	ldr	r3, [pc, #80]	; (800d9e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d209      	bcs.n	800d9b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d99e:	4b12      	ldr	r3, [pc, #72]	; (800d9e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	4b0f      	ldr	r3, [pc, #60]	; (800d9e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	4610      	mov	r0, r2
 800d9ac:	f7fd feff 	bl	800b7ae <vListInsert>
}
 800d9b0:	e010      	b.n	800d9d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9b2:	4b0e      	ldr	r3, [pc, #56]	; (800d9ec <prvAddCurrentTaskToDelayedList+0xa0>)
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4610      	mov	r0, r2
 800d9c0:	f7fd fef5 	bl	800b7ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d9c4:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d202      	bcs.n	800d9d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d9ce:	4a08      	ldr	r2, [pc, #32]	; (800d9f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	6013      	str	r3, [r2, #0]
}
 800d9d4:	bf00      	nop
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	20000f54 	.word	0x20000f54
 800d9e0:	20000a7c 	.word	0x20000a7c
 800d9e4:	20000f3c 	.word	0x20000f3c
 800d9e8:	20000f0c 	.word	0x20000f0c
 800d9ec:	20000f08 	.word	0x20000f08
 800d9f0:	20000f70 	.word	0x20000f70

0800d9f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08a      	sub	sp, #40	; 0x28
 800d9f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d9fe:	f000 fb07 	bl	800e010 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da02:	4b1c      	ldr	r3, [pc, #112]	; (800da74 <xTimerCreateTimerTask+0x80>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d021      	beq.n	800da4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da0a:	2300      	movs	r3, #0
 800da0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da12:	1d3a      	adds	r2, r7, #4
 800da14:	f107 0108 	add.w	r1, r7, #8
 800da18:	f107 030c 	add.w	r3, r7, #12
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fd fc6d 	bl	800b2fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da22:	6879      	ldr	r1, [r7, #4]
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	9202      	str	r2, [sp, #8]
 800da2a:	9301      	str	r3, [sp, #4]
 800da2c:	2302      	movs	r3, #2
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	2300      	movs	r3, #0
 800da32:	460a      	mov	r2, r1
 800da34:	4910      	ldr	r1, [pc, #64]	; (800da78 <xTimerCreateTimerTask+0x84>)
 800da36:	4811      	ldr	r0, [pc, #68]	; (800da7c <xTimerCreateTimerTask+0x88>)
 800da38:	f7fe ff2a 	bl	800c890 <xTaskCreateStatic>
 800da3c:	4603      	mov	r3, r0
 800da3e:	4a10      	ldr	r2, [pc, #64]	; (800da80 <xTimerCreateTimerTask+0x8c>)
 800da40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da42:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <xTimerCreateTimerTask+0x8c>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da4a:	2301      	movs	r3, #1
 800da4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10a      	bne.n	800da6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800da54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	613b      	str	r3, [r7, #16]
}
 800da66:	bf00      	nop
 800da68:	e7fe      	b.n	800da68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da6a:	697b      	ldr	r3, [r7, #20]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3718      	adds	r7, #24
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	20000fac 	.word	0x20000fac
 800da78:	08015424 	.word	0x08015424
 800da7c:	0800dbb9 	.word	0x0800dbb9
 800da80:	20000fb0 	.word	0x20000fb0

0800da84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08a      	sub	sp, #40	; 0x28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
 800da90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da92:	2300      	movs	r3, #0
 800da94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10a      	bne.n	800dab2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	623b      	str	r3, [r7, #32]
}
 800daae:	bf00      	nop
 800dab0:	e7fe      	b.n	800dab0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dab2:	4b1a      	ldr	r3, [pc, #104]	; (800db1c <xTimerGenericCommand+0x98>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d02a      	beq.n	800db10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	2b05      	cmp	r3, #5
 800daca:	dc18      	bgt.n	800dafe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dacc:	f7ff fd9c 	bl	800d608 <xTaskGetSchedulerState>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d109      	bne.n	800daea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dad6:	4b11      	ldr	r3, [pc, #68]	; (800db1c <xTimerGenericCommand+0x98>)
 800dad8:	6818      	ldr	r0, [r3, #0]
 800dada:	f107 0110 	add.w	r1, r7, #16
 800dade:	2300      	movs	r3, #0
 800dae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dae2:	f7fe f86f 	bl	800bbc4 <xQueueGenericSend>
 800dae6:	6278      	str	r0, [r7, #36]	; 0x24
 800dae8:	e012      	b.n	800db10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800daea:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <xTimerGenericCommand+0x98>)
 800daec:	6818      	ldr	r0, [r3, #0]
 800daee:	f107 0110 	add.w	r1, r7, #16
 800daf2:	2300      	movs	r3, #0
 800daf4:	2200      	movs	r2, #0
 800daf6:	f7fe f865 	bl	800bbc4 <xQueueGenericSend>
 800dafa:	6278      	str	r0, [r7, #36]	; 0x24
 800dafc:	e008      	b.n	800db10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dafe:	4b07      	ldr	r3, [pc, #28]	; (800db1c <xTimerGenericCommand+0x98>)
 800db00:	6818      	ldr	r0, [r3, #0]
 800db02:	f107 0110 	add.w	r1, r7, #16
 800db06:	2300      	movs	r3, #0
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	f7fe f959 	bl	800bdc0 <xQueueGenericSendFromISR>
 800db0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db12:	4618      	mov	r0, r3
 800db14:	3728      	adds	r7, #40	; 0x28
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20000fac 	.word	0x20000fac

0800db20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b088      	sub	sp, #32
 800db24:	af02      	add	r7, sp, #8
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db2a:	4b22      	ldr	r3, [pc, #136]	; (800dbb4 <prvProcessExpiredTimer+0x94>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	3304      	adds	r3, #4
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fd fe71 	bl	800b820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db44:	f003 0304 	and.w	r3, r3, #4
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d022      	beq.n	800db92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	699a      	ldr	r2, [r3, #24]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	18d1      	adds	r1, r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	6978      	ldr	r0, [r7, #20]
 800db5a:	f000 f8d1 	bl	800dd00 <prvInsertTimerInActiveList>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d01f      	beq.n	800dba4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db64:	2300      	movs	r3, #0
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	2300      	movs	r3, #0
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	2100      	movs	r1, #0
 800db6e:	6978      	ldr	r0, [r7, #20]
 800db70:	f7ff ff88 	bl	800da84 <xTimerGenericCommand>
 800db74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d113      	bne.n	800dba4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	60fb      	str	r3, [r7, #12]
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db98:	f023 0301 	bic.w	r3, r3, #1
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	6a1b      	ldr	r3, [r3, #32]
 800dba8:	6978      	ldr	r0, [r7, #20]
 800dbaa:	4798      	blx	r3
}
 800dbac:	bf00      	nop
 800dbae:	3718      	adds	r7, #24
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20000fa4 	.word	0x20000fa4

0800dbb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbc0:	f107 0308 	add.w	r3, r7, #8
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 f857 	bl	800dc78 <prvGetNextExpireTime>
 800dbca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f000 f803 	bl	800dbdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dbd6:	f000 f8d5 	bl	800dd84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbda:	e7f1      	b.n	800dbc0 <prvTimerTask+0x8>

0800dbdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dbe6:	f7ff f88f 	bl	800cd08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbea:	f107 0308 	add.w	r3, r7, #8
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 f866 	bl	800dcc0 <prvSampleTimeNow>
 800dbf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d130      	bne.n	800dc5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <prvProcessTimerOrBlockTask+0x3c>
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d806      	bhi.n	800dc18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc0a:	f7ff f88b 	bl	800cd24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc0e:	68f9      	ldr	r1, [r7, #12]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7ff ff85 	bl	800db20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc16:	e024      	b.n	800dc62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d008      	beq.n	800dc30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc1e:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <prvProcessTimerOrBlockTask+0x90>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <prvProcessTimerOrBlockTask+0x50>
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e000      	b.n	800dc2e <prvProcessTimerOrBlockTask+0x52>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc30:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <prvProcessTimerOrBlockTask+0x94>)
 800dc32:	6818      	ldr	r0, [r3, #0]
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	1ad3      	subs	r3, r2, r3
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	f7fe fdf3 	bl	800c828 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc42:	f7ff f86f 	bl	800cd24 <xTaskResumeAll>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10a      	bne.n	800dc62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc4c:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <prvProcessTimerOrBlockTask+0x98>)
 800dc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	f3bf 8f6f 	isb	sy
}
 800dc5c:	e001      	b.n	800dc62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc5e:	f7ff f861 	bl	800cd24 <xTaskResumeAll>
}
 800dc62:	bf00      	nop
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	20000fa8 	.word	0x20000fa8
 800dc70:	20000fac 	.word	0x20000fac
 800dc74:	e000ed04 	.word	0xe000ed04

0800dc78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc80:	4b0e      	ldr	r3, [pc, #56]	; (800dcbc <prvGetNextExpireTime+0x44>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <prvGetNextExpireTime+0x16>
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	e000      	b.n	800dc90 <prvGetNextExpireTime+0x18>
 800dc8e:	2200      	movs	r2, #0
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d105      	bne.n	800dca8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc9c:	4b07      	ldr	r3, [pc, #28]	; (800dcbc <prvGetNextExpireTime+0x44>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	60fb      	str	r3, [r7, #12]
 800dca6:	e001      	b.n	800dcac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dcac:	68fb      	ldr	r3, [r7, #12]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3714      	adds	r7, #20
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	20000fa4 	.word	0x20000fa4

0800dcc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dcc8:	f7ff f8ca 	bl	800ce60 <xTaskGetTickCount>
 800dccc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dcce:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <prvSampleTimeNow+0x3c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d205      	bcs.n	800dce4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dcd8:	f000 f936 	bl	800df48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	601a      	str	r2, [r3, #0]
 800dce2:	e002      	b.n	800dcea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dcea:	4a04      	ldr	r2, [pc, #16]	; (800dcfc <prvSampleTimeNow+0x3c>)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000fb4 	.word	0x20000fb4

0800dd00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d812      	bhi.n	800dd4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	1ad2      	subs	r2, r2, r3
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	699b      	ldr	r3, [r3, #24]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d302      	bcc.n	800dd3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd34:	2301      	movs	r3, #1
 800dd36:	617b      	str	r3, [r7, #20]
 800dd38:	e01b      	b.n	800dd72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd3a:	4b10      	ldr	r3, [pc, #64]	; (800dd7c <prvInsertTimerInActiveList+0x7c>)
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3304      	adds	r3, #4
 800dd42:	4619      	mov	r1, r3
 800dd44:	4610      	mov	r0, r2
 800dd46:	f7fd fd32 	bl	800b7ae <vListInsert>
 800dd4a:	e012      	b.n	800dd72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d206      	bcs.n	800dd62 <prvInsertTimerInActiveList+0x62>
 800dd54:	68ba      	ldr	r2, [r7, #8]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d302      	bcc.n	800dd62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	617b      	str	r3, [r7, #20]
 800dd60:	e007      	b.n	800dd72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd62:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <prvInsertTimerInActiveList+0x80>)
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f7fd fd1e 	bl	800b7ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd72:	697b      	ldr	r3, [r7, #20]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3718      	adds	r7, #24
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	20000fa8 	.word	0x20000fa8
 800dd80:	20000fa4 	.word	0x20000fa4

0800dd84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b08e      	sub	sp, #56	; 0x38
 800dd88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd8a:	e0ca      	b.n	800df22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	da18      	bge.n	800ddc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd92:	1d3b      	adds	r3, r7, #4
 800dd94:	3304      	adds	r3, #4
 800dd96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10a      	bne.n	800ddb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	61fb      	str	r3, [r7, #28]
}
 800ddb0:	bf00      	nop
 800ddb2:	e7fe      	b.n	800ddb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ddb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddba:	6850      	ldr	r0, [r2, #4]
 800ddbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddbe:	6892      	ldr	r2, [r2, #8]
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f2c0 80aa 	blt.w	800df20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ddd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd2:	695b      	ldr	r3, [r3, #20]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d004      	beq.n	800dde2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddda:	3304      	adds	r3, #4
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fd fd1f 	bl	800b820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dde2:	463b      	mov	r3, r7
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7ff ff6b 	bl	800dcc0 <prvSampleTimeNow>
 800ddea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b09      	cmp	r3, #9
 800ddf0:	f200 8097 	bhi.w	800df22 <prvProcessReceivedCommands+0x19e>
 800ddf4:	a201      	add	r2, pc, #4	; (adr r2, 800ddfc <prvProcessReceivedCommands+0x78>)
 800ddf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfa:	bf00      	nop
 800ddfc:	0800de25 	.word	0x0800de25
 800de00:	0800de25 	.word	0x0800de25
 800de04:	0800de25 	.word	0x0800de25
 800de08:	0800de99 	.word	0x0800de99
 800de0c:	0800dead 	.word	0x0800dead
 800de10:	0800def7 	.word	0x0800def7
 800de14:	0800de25 	.word	0x0800de25
 800de18:	0800de25 	.word	0x0800de25
 800de1c:	0800de99 	.word	0x0800de99
 800de20:	0800dead 	.word	0x0800dead
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de2a:	f043 0301 	orr.w	r3, r3, #1
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de36:	68ba      	ldr	r2, [r7, #8]
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	18d1      	adds	r1, r2, r3
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de44:	f7ff ff5c 	bl	800dd00 <prvInsertTimerInActiveList>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d069      	beq.n	800df22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de50:	6a1b      	ldr	r3, [r3, #32]
 800de52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de5c:	f003 0304 	and.w	r3, r3, #4
 800de60:	2b00      	cmp	r3, #0
 800de62:	d05e      	beq.n	800df22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de68:	699b      	ldr	r3, [r3, #24]
 800de6a:	441a      	add	r2, r3
 800de6c:	2300      	movs	r3, #0
 800de6e:	9300      	str	r3, [sp, #0]
 800de70:	2300      	movs	r3, #0
 800de72:	2100      	movs	r1, #0
 800de74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de76:	f7ff fe05 	bl	800da84 <xTimerGenericCommand>
 800de7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d14f      	bne.n	800df22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de86:	f383 8811 	msr	BASEPRI, r3
 800de8a:	f3bf 8f6f 	isb	sy
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	61bb      	str	r3, [r7, #24]
}
 800de94:	bf00      	nop
 800de96:	e7fe      	b.n	800de96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de9e:	f023 0301 	bic.w	r3, r3, #1
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800deaa:	e03a      	b.n	800df22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800deac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deb2:	f043 0301 	orr.w	r3, r3, #1
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10a      	bne.n	800dee2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	617b      	str	r3, [r7, #20]
}
 800dede:	bf00      	nop
 800dee0:	e7fe      	b.n	800dee0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee4:	699a      	ldr	r2, [r3, #24]
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	18d1      	adds	r1, r2, r3
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800def0:	f7ff ff06 	bl	800dd00 <prvInsertTimerInActiveList>
					break;
 800def4:	e015      	b.n	800df22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800defc:	f003 0302 	and.w	r3, r3, #2
 800df00:	2b00      	cmp	r3, #0
 800df02:	d103      	bne.n	800df0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df06:	f000 fbfb 	bl	800e700 <vPortFree>
 800df0a:	e00a      	b.n	800df22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df12:	f023 0301 	bic.w	r3, r3, #1
 800df16:	b2da      	uxtb	r2, r3
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df1e:	e000      	b.n	800df22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800df20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df22:	4b08      	ldr	r3, [pc, #32]	; (800df44 <prvProcessReceivedCommands+0x1c0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	1d39      	adds	r1, r7, #4
 800df28:	2200      	movs	r2, #0
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fe f870 	bl	800c010 <xQueueReceive>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	f47f af2a 	bne.w	800dd8c <prvProcessReceivedCommands+0x8>
	}
}
 800df38:	bf00      	nop
 800df3a:	bf00      	nop
 800df3c:	3730      	adds	r7, #48	; 0x30
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	20000fac 	.word	0x20000fac

0800df48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b088      	sub	sp, #32
 800df4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df4e:	e048      	b.n	800dfe2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df50:	4b2d      	ldr	r3, [pc, #180]	; (800e008 <prvSwitchTimerLists+0xc0>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df5a:	4b2b      	ldr	r3, [pc, #172]	; (800e008 <prvSwitchTimerLists+0xc0>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	3304      	adds	r3, #4
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fd fc59 	bl	800b820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6a1b      	ldr	r3, [r3, #32]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df7c:	f003 0304 	and.w	r3, r3, #4
 800df80:	2b00      	cmp	r3, #0
 800df82:	d02e      	beq.n	800dfe2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	699b      	ldr	r3, [r3, #24]
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	4413      	add	r3, r2
 800df8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	429a      	cmp	r2, r3
 800df94:	d90e      	bls.n	800dfb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfa2:	4b19      	ldr	r3, [pc, #100]	; (800e008 <prvSwitchTimerLists+0xc0>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7fd fbfe 	bl	800b7ae <vListInsert>
 800dfb2:	e016      	b.n	800dfe2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	2300      	movs	r3, #0
 800dfba:	693a      	ldr	r2, [r7, #16]
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7ff fd60 	bl	800da84 <xTimerGenericCommand>
 800dfc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10a      	bne.n	800dfe2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	f383 8811 	msr	BASEPRI, r3
 800dfd4:	f3bf 8f6f 	isb	sy
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	603b      	str	r3, [r7, #0]
}
 800dfde:	bf00      	nop
 800dfe0:	e7fe      	b.n	800dfe0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfe2:	4b09      	ldr	r3, [pc, #36]	; (800e008 <prvSwitchTimerLists+0xc0>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1b1      	bne.n	800df50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dfec:	4b06      	ldr	r3, [pc, #24]	; (800e008 <prvSwitchTimerLists+0xc0>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dff2:	4b06      	ldr	r3, [pc, #24]	; (800e00c <prvSwitchTimerLists+0xc4>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a04      	ldr	r2, [pc, #16]	; (800e008 <prvSwitchTimerLists+0xc0>)
 800dff8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dffa:	4a04      	ldr	r2, [pc, #16]	; (800e00c <prvSwitchTimerLists+0xc4>)
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	6013      	str	r3, [r2, #0]
}
 800e000:	bf00      	nop
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	20000fa4 	.word	0x20000fa4
 800e00c:	20000fa8 	.word	0x20000fa8

0800e010 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e016:	f000 f985 	bl	800e324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e01a:	4b15      	ldr	r3, [pc, #84]	; (800e070 <prvCheckForValidListAndQueue+0x60>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d120      	bne.n	800e064 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e022:	4814      	ldr	r0, [pc, #80]	; (800e074 <prvCheckForValidListAndQueue+0x64>)
 800e024:	f7fd fb72 	bl	800b70c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e028:	4813      	ldr	r0, [pc, #76]	; (800e078 <prvCheckForValidListAndQueue+0x68>)
 800e02a:	f7fd fb6f 	bl	800b70c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e02e:	4b13      	ldr	r3, [pc, #76]	; (800e07c <prvCheckForValidListAndQueue+0x6c>)
 800e030:	4a10      	ldr	r2, [pc, #64]	; (800e074 <prvCheckForValidListAndQueue+0x64>)
 800e032:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e034:	4b12      	ldr	r3, [pc, #72]	; (800e080 <prvCheckForValidListAndQueue+0x70>)
 800e036:	4a10      	ldr	r2, [pc, #64]	; (800e078 <prvCheckForValidListAndQueue+0x68>)
 800e038:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e03a:	2300      	movs	r3, #0
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	4b11      	ldr	r3, [pc, #68]	; (800e084 <prvCheckForValidListAndQueue+0x74>)
 800e040:	4a11      	ldr	r2, [pc, #68]	; (800e088 <prvCheckForValidListAndQueue+0x78>)
 800e042:	2110      	movs	r1, #16
 800e044:	200a      	movs	r0, #10
 800e046:	f7fd fc7d 	bl	800b944 <xQueueGenericCreateStatic>
 800e04a:	4603      	mov	r3, r0
 800e04c:	4a08      	ldr	r2, [pc, #32]	; (800e070 <prvCheckForValidListAndQueue+0x60>)
 800e04e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e050:	4b07      	ldr	r3, [pc, #28]	; (800e070 <prvCheckForValidListAndQueue+0x60>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d005      	beq.n	800e064 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e058:	4b05      	ldr	r3, [pc, #20]	; (800e070 <prvCheckForValidListAndQueue+0x60>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	490b      	ldr	r1, [pc, #44]	; (800e08c <prvCheckForValidListAndQueue+0x7c>)
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fe fb8e 	bl	800c780 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e064:	f000 f98e 	bl	800e384 <vPortExitCritical>
}
 800e068:	bf00      	nop
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	20000fac 	.word	0x20000fac
 800e074:	20000f7c 	.word	0x20000f7c
 800e078:	20000f90 	.word	0x20000f90
 800e07c:	20000fa4 	.word	0x20000fa4
 800e080:	20000fa8 	.word	0x20000fa8
 800e084:	20001058 	.word	0x20001058
 800e088:	20000fb8 	.word	0x20000fb8
 800e08c:	0801542c 	.word	0x0801542c

0800e090 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e090:	b580      	push	{r7, lr}
 800e092:	b08a      	sub	sp, #40	; 0x28
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	607a      	str	r2, [r7, #4]
 800e09c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800e09e:	f06f 0301 	mvn.w	r3, #1
 800e0a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e0b0:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <xTimerPendFunctionCallFromISR+0x3c>)
 800e0b2:	6818      	ldr	r0, [r3, #0]
 800e0b4:	f107 0114 	add.w	r1, r7, #20
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	683a      	ldr	r2, [r7, #0]
 800e0bc:	f7fd fe80 	bl	800bdc0 <xQueueGenericSendFromISR>
 800e0c0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3728      	adds	r7, #40	; 0x28
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	20000fac 	.word	0x20000fac

0800e0d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3b04      	subs	r3, #4
 800e0e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e0e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3b04      	subs	r3, #4
 800e0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f023 0201 	bic.w	r2, r3, #1
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	3b04      	subs	r3, #4
 800e0fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e100:	4a0c      	ldr	r2, [pc, #48]	; (800e134 <pxPortInitialiseStack+0x64>)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	3b14      	subs	r3, #20
 800e10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	3b04      	subs	r3, #4
 800e116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f06f 0202 	mvn.w	r2, #2
 800e11e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	3b20      	subs	r3, #32
 800e124:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e126:	68fb      	ldr	r3, [r7, #12]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3714      	adds	r7, #20
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr
 800e134:	0800e139 	.word	0x0800e139

0800e138 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e142:	4b12      	ldr	r3, [pc, #72]	; (800e18c <prvTaskExitError+0x54>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e14a:	d00a      	beq.n	800e162 <prvTaskExitError+0x2a>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	60fb      	str	r3, [r7, #12]
}
 800e15e:	bf00      	nop
 800e160:	e7fe      	b.n	800e160 <prvTaskExitError+0x28>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	60bb      	str	r3, [r7, #8]
}
 800e174:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e176:	bf00      	nop
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d0fc      	beq.n	800e178 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e17e:	bf00      	nop
 800e180:	bf00      	nop
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	200000e8 	.word	0x200000e8

0800e190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e190:	4b07      	ldr	r3, [pc, #28]	; (800e1b0 <pxCurrentTCBConst2>)
 800e192:	6819      	ldr	r1, [r3, #0]
 800e194:	6808      	ldr	r0, [r1, #0]
 800e196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e19a:	f380 8809 	msr	PSP, r0
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f04f 0000 	mov.w	r0, #0
 800e1a6:	f380 8811 	msr	BASEPRI, r0
 800e1aa:	4770      	bx	lr
 800e1ac:	f3af 8000 	nop.w

0800e1b0 <pxCurrentTCBConst2>:
 800e1b0:	20000a7c 	.word	0x20000a7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1b4:	bf00      	nop
 800e1b6:	bf00      	nop

0800e1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1b8:	4808      	ldr	r0, [pc, #32]	; (800e1dc <prvPortStartFirstTask+0x24>)
 800e1ba:	6800      	ldr	r0, [r0, #0]
 800e1bc:	6800      	ldr	r0, [r0, #0]
 800e1be:	f380 8808 	msr	MSP, r0
 800e1c2:	f04f 0000 	mov.w	r0, #0
 800e1c6:	f380 8814 	msr	CONTROL, r0
 800e1ca:	b662      	cpsie	i
 800e1cc:	b661      	cpsie	f
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	df00      	svc	0
 800e1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1da:	bf00      	nop
 800e1dc:	e000ed08 	.word	0xe000ed08

0800e1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1e6:	4b46      	ldr	r3, [pc, #280]	; (800e300 <xPortStartScheduler+0x120>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a46      	ldr	r2, [pc, #280]	; (800e304 <xPortStartScheduler+0x124>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d10a      	bne.n	800e206 <xPortStartScheduler+0x26>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	613b      	str	r3, [r7, #16]
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e206:	4b3e      	ldr	r3, [pc, #248]	; (800e300 <xPortStartScheduler+0x120>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a3f      	ldr	r2, [pc, #252]	; (800e308 <xPortStartScheduler+0x128>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d10a      	bne.n	800e226 <xPortStartScheduler+0x46>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	60fb      	str	r3, [r7, #12]
}
 800e222:	bf00      	nop
 800e224:	e7fe      	b.n	800e224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e226:	4b39      	ldr	r3, [pc, #228]	; (800e30c <xPortStartScheduler+0x12c>)
 800e228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	22ff      	movs	r2, #255	; 0xff
 800e236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	b2db      	uxtb	r3, r3
 800e244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e248:	b2da      	uxtb	r2, r3
 800e24a:	4b31      	ldr	r3, [pc, #196]	; (800e310 <xPortStartScheduler+0x130>)
 800e24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e24e:	4b31      	ldr	r3, [pc, #196]	; (800e314 <xPortStartScheduler+0x134>)
 800e250:	2207      	movs	r2, #7
 800e252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e254:	e009      	b.n	800e26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e256:	4b2f      	ldr	r3, [pc, #188]	; (800e314 <xPortStartScheduler+0x134>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3b01      	subs	r3, #1
 800e25c:	4a2d      	ldr	r2, [pc, #180]	; (800e314 <xPortStartScheduler+0x134>)
 800e25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	b2db      	uxtb	r3, r3
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	b2db      	uxtb	r3, r3
 800e268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e26a:	78fb      	ldrb	r3, [r7, #3]
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e272:	2b80      	cmp	r3, #128	; 0x80
 800e274:	d0ef      	beq.n	800e256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e276:	4b27      	ldr	r3, [pc, #156]	; (800e314 <xPortStartScheduler+0x134>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f1c3 0307 	rsb	r3, r3, #7
 800e27e:	2b04      	cmp	r3, #4
 800e280:	d00a      	beq.n	800e298 <xPortStartScheduler+0xb8>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	60bb      	str	r3, [r7, #8]
}
 800e294:	bf00      	nop
 800e296:	e7fe      	b.n	800e296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e298:	4b1e      	ldr	r3, [pc, #120]	; (800e314 <xPortStartScheduler+0x134>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	021b      	lsls	r3, r3, #8
 800e29e:	4a1d      	ldr	r2, [pc, #116]	; (800e314 <xPortStartScheduler+0x134>)
 800e2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2a2:	4b1c      	ldr	r3, [pc, #112]	; (800e314 <xPortStartScheduler+0x134>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2aa:	4a1a      	ldr	r2, [pc, #104]	; (800e314 <xPortStartScheduler+0x134>)
 800e2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	b2da      	uxtb	r2, r3
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2b6:	4b18      	ldr	r3, [pc, #96]	; (800e318 <xPortStartScheduler+0x138>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a17      	ldr	r2, [pc, #92]	; (800e318 <xPortStartScheduler+0x138>)
 800e2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2c2:	4b15      	ldr	r3, [pc, #84]	; (800e318 <xPortStartScheduler+0x138>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a14      	ldr	r2, [pc, #80]	; (800e318 <xPortStartScheduler+0x138>)
 800e2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2ce:	f000 f8dd 	bl	800e48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2d2:	4b12      	ldr	r3, [pc, #72]	; (800e31c <xPortStartScheduler+0x13c>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2d8:	f000 f8fc 	bl	800e4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2dc:	4b10      	ldr	r3, [pc, #64]	; (800e320 <xPortStartScheduler+0x140>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a0f      	ldr	r2, [pc, #60]	; (800e320 <xPortStartScheduler+0x140>)
 800e2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2e8:	f7ff ff66 	bl	800e1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2ec:	f7fe fe82 	bl	800cff4 <vTaskSwitchContext>
	prvTaskExitError();
 800e2f0:	f7ff ff22 	bl	800e138 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3718      	adds	r7, #24
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	e000ed00 	.word	0xe000ed00
 800e304:	410fc271 	.word	0x410fc271
 800e308:	410fc270 	.word	0x410fc270
 800e30c:	e000e400 	.word	0xe000e400
 800e310:	200010a8 	.word	0x200010a8
 800e314:	200010ac 	.word	0x200010ac
 800e318:	e000ed20 	.word	0xe000ed20
 800e31c:	200000e8 	.word	0x200000e8
 800e320:	e000ef34 	.word	0xe000ef34

0800e324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
	__asm volatile
 800e32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	607b      	str	r3, [r7, #4]
}
 800e33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e33e:	4b0f      	ldr	r3, [pc, #60]	; (800e37c <vPortEnterCritical+0x58>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	3301      	adds	r3, #1
 800e344:	4a0d      	ldr	r2, [pc, #52]	; (800e37c <vPortEnterCritical+0x58>)
 800e346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e348:	4b0c      	ldr	r3, [pc, #48]	; (800e37c <vPortEnterCritical+0x58>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d10f      	bne.n	800e370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e350:	4b0b      	ldr	r3, [pc, #44]	; (800e380 <vPortEnterCritical+0x5c>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	b2db      	uxtb	r3, r3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00a      	beq.n	800e370 <vPortEnterCritical+0x4c>
	__asm volatile
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	603b      	str	r3, [r7, #0]
}
 800e36c:	bf00      	nop
 800e36e:	e7fe      	b.n	800e36e <vPortEnterCritical+0x4a>
	}
}
 800e370:	bf00      	nop
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	200000e8 	.word	0x200000e8
 800e380:	e000ed04 	.word	0xe000ed04

0800e384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e38a:	4b12      	ldr	r3, [pc, #72]	; (800e3d4 <vPortExitCritical+0x50>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10a      	bne.n	800e3a8 <vPortExitCritical+0x24>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	607b      	str	r3, [r7, #4]
}
 800e3a4:	bf00      	nop
 800e3a6:	e7fe      	b.n	800e3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <vPortExitCritical+0x50>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	4a09      	ldr	r2, [pc, #36]	; (800e3d4 <vPortExitCritical+0x50>)
 800e3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3b2:	4b08      	ldr	r3, [pc, #32]	; (800e3d4 <vPortExitCritical+0x50>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d105      	bne.n	800e3c6 <vPortExitCritical+0x42>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	f383 8811 	msr	BASEPRI, r3
}
 800e3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3c6:	bf00      	nop
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	200000e8 	.word	0x200000e8
	...

0800e3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3e0:	f3ef 8009 	mrs	r0, PSP
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	4b15      	ldr	r3, [pc, #84]	; (800e440 <pxCurrentTCBConst>)
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	f01e 0f10 	tst.w	lr, #16
 800e3f0:	bf08      	it	eq
 800e3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fa:	6010      	str	r0, [r2, #0]
 800e3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e404:	f380 8811 	msr	BASEPRI, r0
 800e408:	f3bf 8f4f 	dsb	sy
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f7fe fdf0 	bl	800cff4 <vTaskSwitchContext>
 800e414:	f04f 0000 	mov.w	r0, #0
 800e418:	f380 8811 	msr	BASEPRI, r0
 800e41c:	bc09      	pop	{r0, r3}
 800e41e:	6819      	ldr	r1, [r3, #0]
 800e420:	6808      	ldr	r0, [r1, #0]
 800e422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e426:	f01e 0f10 	tst.w	lr, #16
 800e42a:	bf08      	it	eq
 800e42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e430:	f380 8809 	msr	PSP, r0
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	f3af 8000 	nop.w

0800e440 <pxCurrentTCBConst>:
 800e440:	20000a7c 	.word	0x20000a7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e444:	bf00      	nop
 800e446:	bf00      	nop

0800e448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	607b      	str	r3, [r7, #4]
}
 800e460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e462:	f7fe fd0d 	bl	800ce80 <xTaskIncrementTick>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d003      	beq.n	800e474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e46c:	4b06      	ldr	r3, [pc, #24]	; (800e488 <xPortSysTickHandler+0x40>)
 800e46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	2300      	movs	r3, #0
 800e476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	f383 8811 	msr	BASEPRI, r3
}
 800e47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e480:	bf00      	nop
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	e000ed04 	.word	0xe000ed04

0800e48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e48c:	b480      	push	{r7}
 800e48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e490:	4b0b      	ldr	r3, [pc, #44]	; (800e4c0 <vPortSetupTimerInterrupt+0x34>)
 800e492:	2200      	movs	r2, #0
 800e494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e496:	4b0b      	ldr	r3, [pc, #44]	; (800e4c4 <vPortSetupTimerInterrupt+0x38>)
 800e498:	2200      	movs	r2, #0
 800e49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e49c:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <vPortSetupTimerInterrupt+0x3c>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a0a      	ldr	r2, [pc, #40]	; (800e4cc <vPortSetupTimerInterrupt+0x40>)
 800e4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4a6:	099b      	lsrs	r3, r3, #6
 800e4a8:	4a09      	ldr	r2, [pc, #36]	; (800e4d0 <vPortSetupTimerInterrupt+0x44>)
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4ae:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <vPortSetupTimerInterrupt+0x34>)
 800e4b0:	2207      	movs	r2, #7
 800e4b2:	601a      	str	r2, [r3, #0]
}
 800e4b4:	bf00      	nop
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	e000e010 	.word	0xe000e010
 800e4c4:	e000e018 	.word	0xe000e018
 800e4c8:	20000008 	.word	0x20000008
 800e4cc:	10624dd3 	.word	0x10624dd3
 800e4d0:	e000e014 	.word	0xe000e014

0800e4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e4e4 <vPortEnableVFP+0x10>
 800e4d8:	6801      	ldr	r1, [r0, #0]
 800e4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4de:	6001      	str	r1, [r0, #0]
 800e4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4e2:	bf00      	nop
 800e4e4:	e000ed88 	.word	0xe000ed88

0800e4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4ee:	f3ef 8305 	mrs	r3, IPSR
 800e4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2b0f      	cmp	r3, #15
 800e4f8:	d914      	bls.n	800e524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4fa:	4a17      	ldr	r2, [pc, #92]	; (800e558 <vPortValidateInterruptPriority+0x70>)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4413      	add	r3, r2
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e504:	4b15      	ldr	r3, [pc, #84]	; (800e55c <vPortValidateInterruptPriority+0x74>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	7afa      	ldrb	r2, [r7, #11]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d20a      	bcs.n	800e524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	607b      	str	r3, [r7, #4]
}
 800e520:	bf00      	nop
 800e522:	e7fe      	b.n	800e522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e524:	4b0e      	ldr	r3, [pc, #56]	; (800e560 <vPortValidateInterruptPriority+0x78>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e52c:	4b0d      	ldr	r3, [pc, #52]	; (800e564 <vPortValidateInterruptPriority+0x7c>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	429a      	cmp	r2, r3
 800e532:	d90a      	bls.n	800e54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e538:	f383 8811 	msr	BASEPRI, r3
 800e53c:	f3bf 8f6f 	isb	sy
 800e540:	f3bf 8f4f 	dsb	sy
 800e544:	603b      	str	r3, [r7, #0]
}
 800e546:	bf00      	nop
 800e548:	e7fe      	b.n	800e548 <vPortValidateInterruptPriority+0x60>
	}
 800e54a:	bf00      	nop
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	e000e3f0 	.word	0xe000e3f0
 800e55c:	200010a8 	.word	0x200010a8
 800e560:	e000ed0c 	.word	0xe000ed0c
 800e564:	200010ac 	.word	0x200010ac

0800e568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b08a      	sub	sp, #40	; 0x28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e570:	2300      	movs	r3, #0
 800e572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e574:	f7fe fbc8 	bl	800cd08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e578:	4b5b      	ldr	r3, [pc, #364]	; (800e6e8 <pvPortMalloc+0x180>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e580:	f000 f920 	bl	800e7c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e584:	4b59      	ldr	r3, [pc, #356]	; (800e6ec <pvPortMalloc+0x184>)
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4013      	ands	r3, r2
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f040 8093 	bne.w	800e6b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d01d      	beq.n	800e5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e598:	2208      	movs	r2, #8
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4413      	add	r3, r2
 800e59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f003 0307 	and.w	r3, r3, #7
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d014      	beq.n	800e5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f023 0307 	bic.w	r3, r3, #7
 800e5b0:	3308      	adds	r3, #8
 800e5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f003 0307 	and.w	r3, r3, #7
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00a      	beq.n	800e5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	617b      	str	r3, [r7, #20]
}
 800e5d0:	bf00      	nop
 800e5d2:	e7fe      	b.n	800e5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d06e      	beq.n	800e6b8 <pvPortMalloc+0x150>
 800e5da:	4b45      	ldr	r3, [pc, #276]	; (800e6f0 <pvPortMalloc+0x188>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d869      	bhi.n	800e6b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5e4:	4b43      	ldr	r3, [pc, #268]	; (800e6f4 <pvPortMalloc+0x18c>)
 800e5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5e8:	4b42      	ldr	r3, [pc, #264]	; (800e6f4 <pvPortMalloc+0x18c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5ee:	e004      	b.n	800e5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	429a      	cmp	r2, r3
 800e602:	d903      	bls.n	800e60c <pvPortMalloc+0xa4>
 800e604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d1f1      	bne.n	800e5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e60c:	4b36      	ldr	r3, [pc, #216]	; (800e6e8 <pvPortMalloc+0x180>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e612:	429a      	cmp	r2, r3
 800e614:	d050      	beq.n	800e6b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2208      	movs	r2, #8
 800e61c:	4413      	add	r3, r2
 800e61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	6a3b      	ldr	r3, [r7, #32]
 800e626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	1ad2      	subs	r2, r2, r3
 800e630:	2308      	movs	r3, #8
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	429a      	cmp	r2, r3
 800e636:	d91f      	bls.n	800e678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4413      	add	r3, r2
 800e63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	f003 0307 	and.w	r3, r3, #7
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00a      	beq.n	800e660 <pvPortMalloc+0xf8>
	__asm volatile
 800e64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	613b      	str	r3, [r7, #16]
}
 800e65c:	bf00      	nop
 800e65e:	e7fe      	b.n	800e65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	685a      	ldr	r2, [r3, #4]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	1ad2      	subs	r2, r2, r3
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e672:	69b8      	ldr	r0, [r7, #24]
 800e674:	f000 f908 	bl	800e888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e678:	4b1d      	ldr	r3, [pc, #116]	; (800e6f0 <pvPortMalloc+0x188>)
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	4a1b      	ldr	r2, [pc, #108]	; (800e6f0 <pvPortMalloc+0x188>)
 800e684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e686:	4b1a      	ldr	r3, [pc, #104]	; (800e6f0 <pvPortMalloc+0x188>)
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	4b1b      	ldr	r3, [pc, #108]	; (800e6f8 <pvPortMalloc+0x190>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d203      	bcs.n	800e69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e692:	4b17      	ldr	r3, [pc, #92]	; (800e6f0 <pvPortMalloc+0x188>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a18      	ldr	r2, [pc, #96]	; (800e6f8 <pvPortMalloc+0x190>)
 800e698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	685a      	ldr	r2, [r3, #4]
 800e69e:	4b13      	ldr	r3, [pc, #76]	; (800e6ec <pvPortMalloc+0x184>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	431a      	orrs	r2, r3
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e6ae:	4b13      	ldr	r3, [pc, #76]	; (800e6fc <pvPortMalloc+0x194>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	4a11      	ldr	r2, [pc, #68]	; (800e6fc <pvPortMalloc+0x194>)
 800e6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6b8:	f7fe fb34 	bl	800cd24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6bc:	69fb      	ldr	r3, [r7, #28]
 800e6be:	f003 0307 	and.w	r3, r3, #7
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00a      	beq.n	800e6dc <pvPortMalloc+0x174>
	__asm volatile
 800e6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	60fb      	str	r3, [r7, #12]
}
 800e6d8:	bf00      	nop
 800e6da:	e7fe      	b.n	800e6da <pvPortMalloc+0x172>
	return pvReturn;
 800e6dc:	69fb      	ldr	r3, [r7, #28]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3728      	adds	r7, #40	; 0x28
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20004cb8 	.word	0x20004cb8
 800e6ec:	20004ccc 	.word	0x20004ccc
 800e6f0:	20004cbc 	.word	0x20004cbc
 800e6f4:	20004cb0 	.word	0x20004cb0
 800e6f8:	20004cc0 	.word	0x20004cc0
 800e6fc:	20004cc4 	.word	0x20004cc4

0800e700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d04d      	beq.n	800e7ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e712:	2308      	movs	r3, #8
 800e714:	425b      	negs	r3, r3
 800e716:	697a      	ldr	r2, [r7, #20]
 800e718:	4413      	add	r3, r2
 800e71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	4b24      	ldr	r3, [pc, #144]	; (800e7b8 <vPortFree+0xb8>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4013      	ands	r3, r2
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d10a      	bne.n	800e744 <vPortFree+0x44>
	__asm volatile
 800e72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e732:	f383 8811 	msr	BASEPRI, r3
 800e736:	f3bf 8f6f 	isb	sy
 800e73a:	f3bf 8f4f 	dsb	sy
 800e73e:	60fb      	str	r3, [r7, #12]
}
 800e740:	bf00      	nop
 800e742:	e7fe      	b.n	800e742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00a      	beq.n	800e762 <vPortFree+0x62>
	__asm volatile
 800e74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	60bb      	str	r3, [r7, #8]
}
 800e75e:	bf00      	nop
 800e760:	e7fe      	b.n	800e760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	4b14      	ldr	r3, [pc, #80]	; (800e7b8 <vPortFree+0xb8>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4013      	ands	r3, r2
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01e      	beq.n	800e7ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d11a      	bne.n	800e7ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	4b0e      	ldr	r3, [pc, #56]	; (800e7b8 <vPortFree+0xb8>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	43db      	mvns	r3, r3
 800e782:	401a      	ands	r2, r3
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e788:	f7fe fabe 	bl	800cd08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	4b0a      	ldr	r3, [pc, #40]	; (800e7bc <vPortFree+0xbc>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4413      	add	r3, r2
 800e796:	4a09      	ldr	r2, [pc, #36]	; (800e7bc <vPortFree+0xbc>)
 800e798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e79a:	6938      	ldr	r0, [r7, #16]
 800e79c:	f000 f874 	bl	800e888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7a0:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <vPortFree+0xc0>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	4a06      	ldr	r2, [pc, #24]	; (800e7c0 <vPortFree+0xc0>)
 800e7a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e7aa:	f7fe fabb 	bl	800cd24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7ae:	bf00      	nop
 800e7b0:	3718      	adds	r7, #24
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	20004ccc 	.word	0x20004ccc
 800e7bc:	20004cbc 	.word	0x20004cbc
 800e7c0:	20004cc8 	.word	0x20004cc8

0800e7c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e7ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7d0:	4b27      	ldr	r3, [pc, #156]	; (800e870 <prvHeapInit+0xac>)
 800e7d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f003 0307 	and.w	r3, r3, #7
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00c      	beq.n	800e7f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	3307      	adds	r3, #7
 800e7e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f023 0307 	bic.w	r3, r3, #7
 800e7ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	4a1f      	ldr	r2, [pc, #124]	; (800e870 <prvHeapInit+0xac>)
 800e7f4:	4413      	add	r3, r2
 800e7f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e7fc:	4a1d      	ldr	r2, [pc, #116]	; (800e874 <prvHeapInit+0xb0>)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e802:	4b1c      	ldr	r3, [pc, #112]	; (800e874 <prvHeapInit+0xb0>)
 800e804:	2200      	movs	r2, #0
 800e806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	4413      	add	r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e810:	2208      	movs	r2, #8
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	1a9b      	subs	r3, r3, r2
 800e816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f023 0307 	bic.w	r3, r3, #7
 800e81e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	4a15      	ldr	r2, [pc, #84]	; (800e878 <prvHeapInit+0xb4>)
 800e824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e826:	4b14      	ldr	r3, [pc, #80]	; (800e878 <prvHeapInit+0xb4>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2200      	movs	r2, #0
 800e82c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e82e:	4b12      	ldr	r3, [pc, #72]	; (800e878 <prvHeapInit+0xb4>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2200      	movs	r2, #0
 800e834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	1ad2      	subs	r2, r2, r3
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e844:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <prvHeapInit+0xb4>)
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	4a0a      	ldr	r2, [pc, #40]	; (800e87c <prvHeapInit+0xb8>)
 800e852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	4a09      	ldr	r2, [pc, #36]	; (800e880 <prvHeapInit+0xbc>)
 800e85a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e85c:	4b09      	ldr	r3, [pc, #36]	; (800e884 <prvHeapInit+0xc0>)
 800e85e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e862:	601a      	str	r2, [r3, #0]
}
 800e864:	bf00      	nop
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	200010b0 	.word	0x200010b0
 800e874:	20004cb0 	.word	0x20004cb0
 800e878:	20004cb8 	.word	0x20004cb8
 800e87c:	20004cc0 	.word	0x20004cc0
 800e880:	20004cbc 	.word	0x20004cbc
 800e884:	20004ccc 	.word	0x20004ccc

0800e888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e890:	4b28      	ldr	r3, [pc, #160]	; (800e934 <prvInsertBlockIntoFreeList+0xac>)
 800e892:	60fb      	str	r3, [r7, #12]
 800e894:	e002      	b.n	800e89c <prvInsertBlockIntoFreeList+0x14>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d8f7      	bhi.n	800e896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	68ba      	ldr	r2, [r7, #8]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d108      	bne.n	800e8ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	441a      	add	r2, r3
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	441a      	add	r2, r3
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d118      	bne.n	800e910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	4b15      	ldr	r3, [pc, #84]	; (800e938 <prvInsertBlockIntoFreeList+0xb0>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d00d      	beq.n	800e906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	685a      	ldr	r2, [r3, #4]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	441a      	add	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	601a      	str	r2, [r3, #0]
 800e904:	e008      	b.n	800e918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e906:	4b0c      	ldr	r3, [pc, #48]	; (800e938 <prvInsertBlockIntoFreeList+0xb0>)
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	e003      	b.n	800e918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d002      	beq.n	800e926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e926:	bf00      	nop
 800e928:	3714      	adds	r7, #20
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	20004cb0 	.word	0x20004cb0
 800e938:	20004cb8 	.word	0x20004cb8

0800e93c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e940:	2200      	movs	r2, #0
 800e942:	4912      	ldr	r1, [pc, #72]	; (800e98c <MX_USB_DEVICE_Init+0x50>)
 800e944:	4812      	ldr	r0, [pc, #72]	; (800e990 <MX_USB_DEVICE_Init+0x54>)
 800e946:	f7fb f812 	bl	800996e <USBD_Init>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e950:	f7f3 fb14 	bl	8001f7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800e954:	490f      	ldr	r1, [pc, #60]	; (800e994 <MX_USB_DEVICE_Init+0x58>)
 800e956:	480e      	ldr	r0, [pc, #56]	; (800e990 <MX_USB_DEVICE_Init+0x54>)
 800e958:	f7fb f839 	bl	80099ce <USBD_RegisterClass>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e962:	f7f3 fb0b 	bl	8001f7c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800e966:	490c      	ldr	r1, [pc, #48]	; (800e998 <MX_USB_DEVICE_Init+0x5c>)
 800e968:	4809      	ldr	r0, [pc, #36]	; (800e990 <MX_USB_DEVICE_Init+0x54>)
 800e96a:	f7fa ffeb 	bl	8009944 <USBD_CUSTOM_HID_RegisterInterface>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d001      	beq.n	800e978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e974:	f7f3 fb02 	bl	8001f7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e978:	4805      	ldr	r0, [pc, #20]	; (800e990 <MX_USB_DEVICE_Init+0x54>)
 800e97a:	f7fb f84f 	bl	8009a1c <USBD_Start>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e984:	f7f3 fafa 	bl	8001f7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e988:	bf00      	nop
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20000148 	.word	0x20000148
 800e990:	20004fa4 	.word	0x20004fa4
 800e994:	20000014 	.word	0x20000014
 800e998:	20000138 	.word	0x20000138

0800e99c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e9a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800e9b0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	460a      	mov	r2, r1
 800e9c6:	71fb      	strb	r3, [r7, #7]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800e9cc:	4803      	ldr	r0, [pc, #12]	; (800e9dc <CUSTOM_HID_OutEvent_FS+0x20>)
 800e9ce:	f7fa ff6b 	bl	80098a8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800e9d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	20004fa4 	.word	0x20004fa4

0800e9e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	6039      	str	r1, [r7, #0]
 800e9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	2212      	movs	r2, #18
 800e9f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e9f2:	4b03      	ldr	r3, [pc, #12]	; (800ea00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr
 800ea00:	20000164 	.word	0x20000164

0800ea04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	6039      	str	r1, [r7, #0]
 800ea0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2204      	movs	r2, #4
 800ea14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea16:	4b03      	ldr	r3, [pc, #12]	; (800ea24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	20000178 	.word	0x20000178

0800ea28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	4603      	mov	r3, r0
 800ea30:	6039      	str	r1, [r7, #0]
 800ea32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea34:	79fb      	ldrb	r3, [r7, #7]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d105      	bne.n	800ea46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	4907      	ldr	r1, [pc, #28]	; (800ea5c <USBD_FS_ProductStrDescriptor+0x34>)
 800ea3e:	4808      	ldr	r0, [pc, #32]	; (800ea60 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea40:	f7fc f81d 	bl	800aa7e <USBD_GetString>
 800ea44:	e004      	b.n	800ea50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea46:	683a      	ldr	r2, [r7, #0]
 800ea48:	4904      	ldr	r1, [pc, #16]	; (800ea5c <USBD_FS_ProductStrDescriptor+0x34>)
 800ea4a:	4805      	ldr	r0, [pc, #20]	; (800ea60 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea4c:	f7fc f817 	bl	800aa7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea50:	4b02      	ldr	r3, [pc, #8]	; (800ea5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20005274 	.word	0x20005274
 800ea60:	08015434 	.word	0x08015434

0800ea64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	6039      	str	r1, [r7, #0]
 800ea6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	4904      	ldr	r1, [pc, #16]	; (800ea84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ea74:	4804      	ldr	r0, [pc, #16]	; (800ea88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ea76:	f7fc f802 	bl	800aa7e <USBD_GetString>
  return USBD_StrDesc;
 800ea7a:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	20005274 	.word	0x20005274
 800ea88:	08015454 	.word	0x08015454

0800ea8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	4603      	mov	r3, r0
 800ea94:	6039      	str	r1, [r7, #0]
 800ea96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	221a      	movs	r2, #26
 800ea9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ea9e:	f000 f843 	bl	800eb28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eaa2:	4b02      	ldr	r3, [pc, #8]	; (800eaac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	2000017c 	.word	0x2000017c

0800eab0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	4603      	mov	r3, r0
 800eab8:	6039      	str	r1, [r7, #0]
 800eaba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eabc:	79fb      	ldrb	r3, [r7, #7]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d105      	bne.n	800eace <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	4907      	ldr	r1, [pc, #28]	; (800eae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eac6:	4808      	ldr	r0, [pc, #32]	; (800eae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eac8:	f7fb ffd9 	bl	800aa7e <USBD_GetString>
 800eacc:	e004      	b.n	800ead8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	4904      	ldr	r1, [pc, #16]	; (800eae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ead2:	4805      	ldr	r0, [pc, #20]	; (800eae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ead4:	f7fb ffd3 	bl	800aa7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ead8:	4b02      	ldr	r3, [pc, #8]	; (800eae4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	20005274 	.word	0x20005274
 800eae8:	08015468 	.word	0x08015468

0800eaec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	6039      	str	r1, [r7, #0]
 800eaf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eaf8:	79fb      	ldrb	r3, [r7, #7]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d105      	bne.n	800eb0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	4907      	ldr	r1, [pc, #28]	; (800eb20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb02:	4808      	ldr	r0, [pc, #32]	; (800eb24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb04:	f7fb ffbb 	bl	800aa7e <USBD_GetString>
 800eb08:	e004      	b.n	800eb14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	4904      	ldr	r1, [pc, #16]	; (800eb20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb0e:	4805      	ldr	r0, [pc, #20]	; (800eb24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb10:	f7fb ffb5 	bl	800aa7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb14:	4b02      	ldr	r3, [pc, #8]	; (800eb20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	20005274 	.word	0x20005274
 800eb24:	0801547c 	.word	0x0801547c

0800eb28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb2e:	4b0f      	ldr	r3, [pc, #60]	; (800eb6c <Get_SerialNum+0x44>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb34:	4b0e      	ldr	r3, [pc, #56]	; (800eb70 <Get_SerialNum+0x48>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb3a:	4b0e      	ldr	r3, [pc, #56]	; (800eb74 <Get_SerialNum+0x4c>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4413      	add	r3, r2
 800eb46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d009      	beq.n	800eb62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb4e:	2208      	movs	r2, #8
 800eb50:	4909      	ldr	r1, [pc, #36]	; (800eb78 <Get_SerialNum+0x50>)
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f000 f814 	bl	800eb80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb58:	2204      	movs	r2, #4
 800eb5a:	4908      	ldr	r1, [pc, #32]	; (800eb7c <Get_SerialNum+0x54>)
 800eb5c:	68b8      	ldr	r0, [r7, #8]
 800eb5e:	f000 f80f 	bl	800eb80 <IntToUnicode>
  }
}
 800eb62:	bf00      	nop
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	1fff7a10 	.word	0x1fff7a10
 800eb70:	1fff7a14 	.word	0x1fff7a14
 800eb74:	1fff7a18 	.word	0x1fff7a18
 800eb78:	2000017e 	.word	0x2000017e
 800eb7c:	2000018e 	.word	0x2000018e

0800eb80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b087      	sub	sp, #28
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb92:	2300      	movs	r3, #0
 800eb94:	75fb      	strb	r3, [r7, #23]
 800eb96:	e027      	b.n	800ebe8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	0f1b      	lsrs	r3, r3, #28
 800eb9c:	2b09      	cmp	r3, #9
 800eb9e:	d80b      	bhi.n	800ebb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	0f1b      	lsrs	r3, r3, #28
 800eba4:	b2da      	uxtb	r2, r3
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	4619      	mov	r1, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	440b      	add	r3, r1
 800ebb0:	3230      	adds	r2, #48	; 0x30
 800ebb2:	b2d2      	uxtb	r2, r2
 800ebb4:	701a      	strb	r2, [r3, #0]
 800ebb6:	e00a      	b.n	800ebce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	0f1b      	lsrs	r3, r3, #28
 800ebbc:	b2da      	uxtb	r2, r3
 800ebbe:	7dfb      	ldrb	r3, [r7, #23]
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	440b      	add	r3, r1
 800ebc8:	3237      	adds	r2, #55	; 0x37
 800ebca:	b2d2      	uxtb	r2, r2
 800ebcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	011b      	lsls	r3, r3, #4
 800ebd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ebd4:	7dfb      	ldrb	r3, [r7, #23]
 800ebd6:	005b      	lsls	r3, r3, #1
 800ebd8:	3301      	adds	r3, #1
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	4413      	add	r3, r2
 800ebde:	2200      	movs	r2, #0
 800ebe0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ebe2:	7dfb      	ldrb	r3, [r7, #23]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	75fb      	strb	r3, [r7, #23]
 800ebe8:	7dfa      	ldrb	r2, [r7, #23]
 800ebea:	79fb      	ldrb	r3, [r7, #7]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d3d3      	bcc.n	800eb98 <IntToUnicode+0x18>
  }
}
 800ebf0:	bf00      	nop
 800ebf2:	bf00      	nop
 800ebf4:	371c      	adds	r7, #28
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b08a      	sub	sp, #40	; 0x28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec08:	f107 0314 	add.w	r3, r7, #20
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	605a      	str	r2, [r3, #4]
 800ec12:	609a      	str	r2, [r3, #8]
 800ec14:	60da      	str	r2, [r3, #12]
 800ec16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec20:	d13a      	bne.n	800ec98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec22:	2300      	movs	r3, #0
 800ec24:	613b      	str	r3, [r7, #16]
 800ec26:	4b1e      	ldr	r3, [pc, #120]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2a:	4a1d      	ldr	r2, [pc, #116]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec2c:	f043 0301 	orr.w	r3, r3, #1
 800ec30:	6313      	str	r3, [r2, #48]	; 0x30
 800ec32:	4b1b      	ldr	r3, [pc, #108]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec36:	f003 0301 	and.w	r3, r3, #1
 800ec3a:	613b      	str	r3, [r7, #16]
 800ec3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ec42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec44:	2302      	movs	r3, #2
 800ec46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec4c:	2303      	movs	r3, #3
 800ec4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec50:	230a      	movs	r3, #10
 800ec52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec54:	f107 0314 	add.w	r3, r7, #20
 800ec58:	4619      	mov	r1, r3
 800ec5a:	4812      	ldr	r0, [pc, #72]	; (800eca4 <HAL_PCD_MspInit+0xa4>)
 800ec5c:	f7f4 fda0 	bl	80037a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec60:	4b0f      	ldr	r3, [pc, #60]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec64:	4a0e      	ldr	r2, [pc, #56]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec6a:	6353      	str	r3, [r2, #52]	; 0x34
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	4b0b      	ldr	r3, [pc, #44]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec74:	4a0a      	ldr	r2, [pc, #40]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec7a:	6453      	str	r3, [r2, #68]	; 0x44
 800ec7c:	4b08      	ldr	r3, [pc, #32]	; (800eca0 <HAL_PCD_MspInit+0xa0>)
 800ec7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ec88:	2200      	movs	r2, #0
 800ec8a:	2105      	movs	r1, #5
 800ec8c:	2043      	movs	r0, #67	; 0x43
 800ec8e:	f7f4 f9ed 	bl	800306c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ec92:	2043      	movs	r0, #67	; 0x43
 800ec94:	f7f4 fa06 	bl	80030a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ec98:	bf00      	nop
 800ec9a:	3728      	adds	r7, #40	; 0x28
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	40023800 	.word	0x40023800
 800eca4:	40020000 	.word	0x40020000

0800eca8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	f7fa fef7 	bl	8009ab2 <USBD_LL_SetupStage>
}
 800ecc4:	bf00      	nop
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	6879      	ldr	r1, [r7, #4]
 800ece2:	4613      	mov	r3, r2
 800ece4:	00db      	lsls	r3, r3, #3
 800ece6:	1a9b      	subs	r3, r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	440b      	add	r3, r1
 800ecec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	78fb      	ldrb	r3, [r7, #3]
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f7fa ff31 	bl	8009b5c <USBD_LL_DataOutStage>
}
 800ecfa:	bf00      	nop
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ed14:	78fa      	ldrb	r2, [r7, #3]
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	00db      	lsls	r3, r3, #3
 800ed1c:	1a9b      	subs	r3, r3, r2
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	440b      	add	r3, r1
 800ed22:	3348      	adds	r3, #72	; 0x48
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	78fb      	ldrb	r3, [r7, #3]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	f7fa ff7a 	bl	8009c22 <USBD_LL_DataInStage>
}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b082      	sub	sp, #8
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fb f88e 	bl	8009e66 <USBD_LL_SOF>
}
 800ed4a:	bf00      	nop
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b084      	sub	sp, #16
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d102      	bne.n	800ed6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ed66:	2300      	movs	r3, #0
 800ed68:	73fb      	strb	r3, [r7, #15]
 800ed6a:	e008      	b.n	800ed7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d102      	bne.n	800ed7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ed74:	2301      	movs	r3, #1
 800ed76:	73fb      	strb	r3, [r7, #15]
 800ed78:	e001      	b.n	800ed7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ed7a:	f7f3 f8ff 	bl	8001f7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed84:	7bfa      	ldrb	r2, [r7, #15]
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fb f82e 	bl	8009dea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fa ffda 	bl	8009d4e <USBD_LL_Reset>
}
 800ed9a:	bf00      	nop
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fb f829 	bl	8009e0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	6812      	ldr	r2, [r2, #0]
 800edc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800edca:	f043 0301 	orr.w	r3, r3, #1
 800edce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6a1b      	ldr	r3, [r3, #32]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d005      	beq.n	800ede4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edd8:	4b04      	ldr	r3, [pc, #16]	; (800edec <HAL_PCD_SuspendCallback+0x48>)
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	4a03      	ldr	r2, [pc, #12]	; (800edec <HAL_PCD_SuspendCallback+0x48>)
 800edde:	f043 0306 	orr.w	r3, r3, #6
 800ede2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ede4:	bf00      	nop
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	e000ed00 	.word	0xe000ed00

0800edf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fb f819 	bl	8009e36 <USBD_LL_Resume>
}
 800ee04:	bf00      	nop
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	460b      	mov	r3, r1
 800ee16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee1e:	78fa      	ldrb	r2, [r7, #3]
 800ee20:	4611      	mov	r1, r2
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fb f867 	bl	8009ef6 <USBD_LL_IsoOUTIncomplete>
}
 800ee28:	bf00      	nop
 800ee2a:	3708      	adds	r7, #8
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee42:	78fa      	ldrb	r2, [r7, #3]
 800ee44:	4611      	mov	r1, r2
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fb f82f 	bl	8009eaa <USBD_LL_IsoINIncomplete>
}
 800ee4c:	bf00      	nop
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fb f86d 	bl	8009f42 <USBD_LL_DevConnected>
}
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fb f86a 	bl	8009f58 <USBD_LL_DevDisconnected>
}
 800ee84:	bf00      	nop
 800ee86:	3708      	adds	r7, #8
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d13c      	bne.n	800ef16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ee9c:	4a20      	ldr	r2, [pc, #128]	; (800ef20 <USBD_LL_Init+0x94>)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a1e      	ldr	r2, [pc, #120]	; (800ef20 <USBD_LL_Init+0x94>)
 800eea8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eeac:	4b1c      	ldr	r3, [pc, #112]	; (800ef20 <USBD_LL_Init+0x94>)
 800eeae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eeb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eeb4:	4b1a      	ldr	r3, [pc, #104]	; (800ef20 <USBD_LL_Init+0x94>)
 800eeb6:	2204      	movs	r2, #4
 800eeb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eeba:	4b19      	ldr	r3, [pc, #100]	; (800ef20 <USBD_LL_Init+0x94>)
 800eebc:	2202      	movs	r2, #2
 800eebe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eec0:	4b17      	ldr	r3, [pc, #92]	; (800ef20 <USBD_LL_Init+0x94>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eec6:	4b16      	ldr	r3, [pc, #88]	; (800ef20 <USBD_LL_Init+0x94>)
 800eec8:	2202      	movs	r2, #2
 800eeca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eecc:	4b14      	ldr	r3, [pc, #80]	; (800ef20 <USBD_LL_Init+0x94>)
 800eece:	2200      	movs	r2, #0
 800eed0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eed2:	4b13      	ldr	r3, [pc, #76]	; (800ef20 <USBD_LL_Init+0x94>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eed8:	4b11      	ldr	r3, [pc, #68]	; (800ef20 <USBD_LL_Init+0x94>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eede:	4b10      	ldr	r3, [pc, #64]	; (800ef20 <USBD_LL_Init+0x94>)
 800eee0:	2200      	movs	r2, #0
 800eee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eee4:	4b0e      	ldr	r3, [pc, #56]	; (800ef20 <USBD_LL_Init+0x94>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eeea:	480d      	ldr	r0, [pc, #52]	; (800ef20 <USBD_LL_Init+0x94>)
 800eeec:	f7f5 fe56 	bl	8004b9c <HAL_PCD_Init>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d001      	beq.n	800eefa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eef6:	f7f3 f841 	bl	8001f7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eefa:	2180      	movs	r1, #128	; 0x80
 800eefc:	4808      	ldr	r0, [pc, #32]	; (800ef20 <USBD_LL_Init+0x94>)
 800eefe:	f7f6 ff9c 	bl	8005e3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ef02:	2240      	movs	r2, #64	; 0x40
 800ef04:	2100      	movs	r1, #0
 800ef06:	4806      	ldr	r0, [pc, #24]	; (800ef20 <USBD_LL_Init+0x94>)
 800ef08:	f7f6 ff50 	bl	8005dac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ef0c:	2280      	movs	r2, #128	; 0x80
 800ef0e:	2101      	movs	r1, #1
 800ef10:	4803      	ldr	r0, [pc, #12]	; (800ef20 <USBD_LL_Init+0x94>)
 800ef12:	f7f6 ff4b 	bl	8005dac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ef16:	2300      	movs	r3, #0
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	20005474 	.word	0x20005474

0800ef24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7f5 ff4b 	bl	8004dd6 <HAL_PCD_Start>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
 800ef46:	4618      	mov	r0, r3
 800ef48:	f000 f930 	bl	800f1ac <USBD_Get_USB_Status>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b084      	sub	sp, #16
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
 800ef62:	4608      	mov	r0, r1
 800ef64:	4611      	mov	r1, r2
 800ef66:	461a      	mov	r2, r3
 800ef68:	4603      	mov	r3, r0
 800ef6a:	70fb      	strb	r3, [r7, #3]
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	70bb      	strb	r3, [r7, #2]
 800ef70:	4613      	mov	r3, r2
 800ef72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef82:	78bb      	ldrb	r3, [r7, #2]
 800ef84:	883a      	ldrh	r2, [r7, #0]
 800ef86:	78f9      	ldrb	r1, [r7, #3]
 800ef88:	f7f6 fb2f 	bl	80055ea <HAL_PCD_EP_Open>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 f90a 	bl	800f1ac <USBD_Get_USB_Status>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b084      	sub	sp, #16
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	460b      	mov	r3, r1
 800efb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efb6:	2300      	movs	r3, #0
 800efb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efc0:	78fa      	ldrb	r2, [r7, #3]
 800efc2:	4611      	mov	r1, r2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7f6 fb78 	bl	80056ba <HAL_PCD_EP_Close>
 800efca:	4603      	mov	r3, r0
 800efcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efce:	7bfb      	ldrb	r3, [r7, #15]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f000 f8eb 	bl	800f1ac <USBD_Get_USB_Status>
 800efd6:	4603      	mov	r3, r0
 800efd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efda:	7bbb      	ldrb	r3, [r7, #14]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800effe:	78fa      	ldrb	r2, [r7, #3]
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f7f6 fc38 	bl	8005878 <HAL_PCD_EP_SetStall>
 800f008:	4603      	mov	r3, r0
 800f00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	4618      	mov	r0, r3
 800f010:	f000 f8cc 	bl	800f1ac <USBD_Get_USB_Status>
 800f014:	4603      	mov	r3, r0
 800f016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f018:	7bbb      	ldrb	r3, [r7, #14]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	460b      	mov	r3, r1
 800f02c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f03c:	78fa      	ldrb	r2, [r7, #3]
 800f03e:	4611      	mov	r1, r2
 800f040:	4618      	mov	r0, r3
 800f042:	f7f6 fc7d 	bl	8005940 <HAL_PCD_EP_ClrStall>
 800f046:	4603      	mov	r3, r0
 800f048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f04a:	7bfb      	ldrb	r3, [r7, #15]
 800f04c:	4618      	mov	r0, r3
 800f04e:	f000 f8ad 	bl	800f1ac <USBD_Get_USB_Status>
 800f052:	4603      	mov	r3, r0
 800f054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f056:	7bbb      	ldrb	r3, [r7, #14]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	460b      	mov	r3, r1
 800f06a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f072:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	da0b      	bge.n	800f094 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f07c:	78fb      	ldrb	r3, [r7, #3]
 800f07e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f082:	68f9      	ldr	r1, [r7, #12]
 800f084:	4613      	mov	r3, r2
 800f086:	00db      	lsls	r3, r3, #3
 800f088:	1a9b      	subs	r3, r3, r2
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	440b      	add	r3, r1
 800f08e:	333e      	adds	r3, #62	; 0x3e
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	e00b      	b.n	800f0ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f094:	78fb      	ldrb	r3, [r7, #3]
 800f096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f09a:	68f9      	ldr	r1, [r7, #12]
 800f09c:	4613      	mov	r3, r2
 800f09e:	00db      	lsls	r3, r3, #3
 800f0a0:	1a9b      	subs	r3, r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	440b      	add	r3, r1
 800f0a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3714      	adds	r7, #20
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0d2:	78fa      	ldrb	r2, [r7, #3]
 800f0d4:	4611      	mov	r1, r2
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7f6 fa62 	bl	80055a0 <HAL_PCD_SetAddress>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 f862 	bl	800f1ac <USBD_Get_USB_Status>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b086      	sub	sp, #24
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	60f8      	str	r0, [r7, #12]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
 800f102:	460b      	mov	r3, r1
 800f104:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f106:	2300      	movs	r3, #0
 800f108:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f10a:	2300      	movs	r3, #0
 800f10c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f114:	7af9      	ldrb	r1, [r7, #11]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	f7f6 fb63 	bl	80057e4 <HAL_PCD_EP_Transmit>
 800f11e:	4603      	mov	r3, r0
 800f120:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f122:	7dfb      	ldrb	r3, [r7, #23]
 800f124:	4618      	mov	r0, r3
 800f126:	f000 f841 	bl	800f1ac <USBD_Get_USB_Status>
 800f12a:	4603      	mov	r3, r0
 800f12c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f12e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3718      	adds	r7, #24
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	607a      	str	r2, [r7, #4]
 800f142:	603b      	str	r3, [r7, #0]
 800f144:	460b      	mov	r3, r1
 800f146:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f156:	7af9      	ldrb	r1, [r7, #11]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	f7f6 faf7 	bl	800574e <HAL_PCD_EP_Receive>
 800f160:	4603      	mov	r3, r0
 800f162:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f164:	7dfb      	ldrb	r3, [r7, #23]
 800f166:	4618      	mov	r0, r3
 800f168:	f000 f820 	bl	800f1ac <USBD_Get_USB_Status>
 800f16c:	4603      	mov	r3, r0
 800f16e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f170:	7dbb      	ldrb	r3, [r7, #22]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3718      	adds	r7, #24
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
	...

0800f17c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800f184:	4b03      	ldr	r3, [pc, #12]	; (800f194 <USBD_static_malloc+0x18>)
}
 800f186:	4618      	mov	r0, r3
 800f188:	370c      	adds	r7, #12
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr
 800f192:	bf00      	nop
 800f194:	20004cd0 	.word	0x20004cd0

0800f198 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]

}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	2b03      	cmp	r3, #3
 800f1be:	d817      	bhi.n	800f1f0 <USBD_Get_USB_Status+0x44>
 800f1c0:	a201      	add	r2, pc, #4	; (adr r2, 800f1c8 <USBD_Get_USB_Status+0x1c>)
 800f1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c6:	bf00      	nop
 800f1c8:	0800f1d9 	.word	0x0800f1d9
 800f1cc:	0800f1df 	.word	0x0800f1df
 800f1d0:	0800f1e5 	.word	0x0800f1e5
 800f1d4:	0800f1eb 	.word	0x0800f1eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73fb      	strb	r3, [r7, #15]
    break;
 800f1dc:	e00b      	b.n	800f1f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1de:	2303      	movs	r3, #3
 800f1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e2:	e008      	b.n	800f1f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f1e8:	e005      	b.n	800f1f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1ea:	2303      	movs	r3, #3
 800f1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ee:	e002      	b.n	800f1f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f1f0:	2303      	movs	r3, #3
 800f1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f4:	bf00      	nop
  }
  return usb_status;
 800f1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3714      	adds	r7, #20
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <__errno>:
 800f204:	4b01      	ldr	r3, [pc, #4]	; (800f20c <__errno+0x8>)
 800f206:	6818      	ldr	r0, [r3, #0]
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	20000198 	.word	0x20000198

0800f210 <__libc_init_array>:
 800f210:	b570      	push	{r4, r5, r6, lr}
 800f212:	4d0d      	ldr	r5, [pc, #52]	; (800f248 <__libc_init_array+0x38>)
 800f214:	4c0d      	ldr	r4, [pc, #52]	; (800f24c <__libc_init_array+0x3c>)
 800f216:	1b64      	subs	r4, r4, r5
 800f218:	10a4      	asrs	r4, r4, #2
 800f21a:	2600      	movs	r6, #0
 800f21c:	42a6      	cmp	r6, r4
 800f21e:	d109      	bne.n	800f234 <__libc_init_array+0x24>
 800f220:	4d0b      	ldr	r5, [pc, #44]	; (800f250 <__libc_init_array+0x40>)
 800f222:	4c0c      	ldr	r4, [pc, #48]	; (800f254 <__libc_init_array+0x44>)
 800f224:	f006 f8a4 	bl	8015370 <_init>
 800f228:	1b64      	subs	r4, r4, r5
 800f22a:	10a4      	asrs	r4, r4, #2
 800f22c:	2600      	movs	r6, #0
 800f22e:	42a6      	cmp	r6, r4
 800f230:	d105      	bne.n	800f23e <__libc_init_array+0x2e>
 800f232:	bd70      	pop	{r4, r5, r6, pc}
 800f234:	f855 3b04 	ldr.w	r3, [r5], #4
 800f238:	4798      	blx	r3
 800f23a:	3601      	adds	r6, #1
 800f23c:	e7ee      	b.n	800f21c <__libc_init_array+0xc>
 800f23e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f242:	4798      	blx	r3
 800f244:	3601      	adds	r6, #1
 800f246:	e7f2      	b.n	800f22e <__libc_init_array+0x1e>
 800f248:	08015ba0 	.word	0x08015ba0
 800f24c:	08015ba0 	.word	0x08015ba0
 800f250:	08015ba0 	.word	0x08015ba0
 800f254:	08015ba4 	.word	0x08015ba4

0800f258 <memcpy>:
 800f258:	440a      	add	r2, r1
 800f25a:	4291      	cmp	r1, r2
 800f25c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f260:	d100      	bne.n	800f264 <memcpy+0xc>
 800f262:	4770      	bx	lr
 800f264:	b510      	push	{r4, lr}
 800f266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f26a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f26e:	4291      	cmp	r1, r2
 800f270:	d1f9      	bne.n	800f266 <memcpy+0xe>
 800f272:	bd10      	pop	{r4, pc}

0800f274 <memset>:
 800f274:	4402      	add	r2, r0
 800f276:	4603      	mov	r3, r0
 800f278:	4293      	cmp	r3, r2
 800f27a:	d100      	bne.n	800f27e <memset+0xa>
 800f27c:	4770      	bx	lr
 800f27e:	f803 1b01 	strb.w	r1, [r3], #1
 800f282:	e7f9      	b.n	800f278 <memset+0x4>

0800f284 <__cvt>:
 800f284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f288:	ec55 4b10 	vmov	r4, r5, d0
 800f28c:	2d00      	cmp	r5, #0
 800f28e:	460e      	mov	r6, r1
 800f290:	4619      	mov	r1, r3
 800f292:	462b      	mov	r3, r5
 800f294:	bfbb      	ittet	lt
 800f296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f29a:	461d      	movlt	r5, r3
 800f29c:	2300      	movge	r3, #0
 800f29e:	232d      	movlt	r3, #45	; 0x2d
 800f2a0:	700b      	strb	r3, [r1, #0]
 800f2a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f2a8:	4691      	mov	r9, r2
 800f2aa:	f023 0820 	bic.w	r8, r3, #32
 800f2ae:	bfbc      	itt	lt
 800f2b0:	4622      	movlt	r2, r4
 800f2b2:	4614      	movlt	r4, r2
 800f2b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2b8:	d005      	beq.n	800f2c6 <__cvt+0x42>
 800f2ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f2be:	d100      	bne.n	800f2c2 <__cvt+0x3e>
 800f2c0:	3601      	adds	r6, #1
 800f2c2:	2102      	movs	r1, #2
 800f2c4:	e000      	b.n	800f2c8 <__cvt+0x44>
 800f2c6:	2103      	movs	r1, #3
 800f2c8:	ab03      	add	r3, sp, #12
 800f2ca:	9301      	str	r3, [sp, #4]
 800f2cc:	ab02      	add	r3, sp, #8
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	ec45 4b10 	vmov	d0, r4, r5
 800f2d4:	4653      	mov	r3, sl
 800f2d6:	4632      	mov	r2, r6
 800f2d8:	f001 fe92 	bl	8011000 <_dtoa_r>
 800f2dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f2e0:	4607      	mov	r7, r0
 800f2e2:	d102      	bne.n	800f2ea <__cvt+0x66>
 800f2e4:	f019 0f01 	tst.w	r9, #1
 800f2e8:	d022      	beq.n	800f330 <__cvt+0xac>
 800f2ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2ee:	eb07 0906 	add.w	r9, r7, r6
 800f2f2:	d110      	bne.n	800f316 <__cvt+0x92>
 800f2f4:	783b      	ldrb	r3, [r7, #0]
 800f2f6:	2b30      	cmp	r3, #48	; 0x30
 800f2f8:	d10a      	bne.n	800f310 <__cvt+0x8c>
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	4620      	mov	r0, r4
 800f300:	4629      	mov	r1, r5
 800f302:	f7f1 fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 800f306:	b918      	cbnz	r0, 800f310 <__cvt+0x8c>
 800f308:	f1c6 0601 	rsb	r6, r6, #1
 800f30c:	f8ca 6000 	str.w	r6, [sl]
 800f310:	f8da 3000 	ldr.w	r3, [sl]
 800f314:	4499      	add	r9, r3
 800f316:	2200      	movs	r2, #0
 800f318:	2300      	movs	r3, #0
 800f31a:	4620      	mov	r0, r4
 800f31c:	4629      	mov	r1, r5
 800f31e:	f7f1 fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 800f322:	b108      	cbz	r0, 800f328 <__cvt+0xa4>
 800f324:	f8cd 900c 	str.w	r9, [sp, #12]
 800f328:	2230      	movs	r2, #48	; 0x30
 800f32a:	9b03      	ldr	r3, [sp, #12]
 800f32c:	454b      	cmp	r3, r9
 800f32e:	d307      	bcc.n	800f340 <__cvt+0xbc>
 800f330:	9b03      	ldr	r3, [sp, #12]
 800f332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f334:	1bdb      	subs	r3, r3, r7
 800f336:	4638      	mov	r0, r7
 800f338:	6013      	str	r3, [r2, #0]
 800f33a:	b004      	add	sp, #16
 800f33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f340:	1c59      	adds	r1, r3, #1
 800f342:	9103      	str	r1, [sp, #12]
 800f344:	701a      	strb	r2, [r3, #0]
 800f346:	e7f0      	b.n	800f32a <__cvt+0xa6>

0800f348 <__exponent>:
 800f348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f34a:	4603      	mov	r3, r0
 800f34c:	2900      	cmp	r1, #0
 800f34e:	bfb8      	it	lt
 800f350:	4249      	neglt	r1, r1
 800f352:	f803 2b02 	strb.w	r2, [r3], #2
 800f356:	bfb4      	ite	lt
 800f358:	222d      	movlt	r2, #45	; 0x2d
 800f35a:	222b      	movge	r2, #43	; 0x2b
 800f35c:	2909      	cmp	r1, #9
 800f35e:	7042      	strb	r2, [r0, #1]
 800f360:	dd2a      	ble.n	800f3b8 <__exponent+0x70>
 800f362:	f10d 0407 	add.w	r4, sp, #7
 800f366:	46a4      	mov	ip, r4
 800f368:	270a      	movs	r7, #10
 800f36a:	46a6      	mov	lr, r4
 800f36c:	460a      	mov	r2, r1
 800f36e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f372:	fb07 1516 	mls	r5, r7, r6, r1
 800f376:	3530      	adds	r5, #48	; 0x30
 800f378:	2a63      	cmp	r2, #99	; 0x63
 800f37a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f37e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f382:	4631      	mov	r1, r6
 800f384:	dcf1      	bgt.n	800f36a <__exponent+0x22>
 800f386:	3130      	adds	r1, #48	; 0x30
 800f388:	f1ae 0502 	sub.w	r5, lr, #2
 800f38c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f390:	1c44      	adds	r4, r0, #1
 800f392:	4629      	mov	r1, r5
 800f394:	4561      	cmp	r1, ip
 800f396:	d30a      	bcc.n	800f3ae <__exponent+0x66>
 800f398:	f10d 0209 	add.w	r2, sp, #9
 800f39c:	eba2 020e 	sub.w	r2, r2, lr
 800f3a0:	4565      	cmp	r5, ip
 800f3a2:	bf88      	it	hi
 800f3a4:	2200      	movhi	r2, #0
 800f3a6:	4413      	add	r3, r2
 800f3a8:	1a18      	subs	r0, r3, r0
 800f3aa:	b003      	add	sp, #12
 800f3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f3b6:	e7ed      	b.n	800f394 <__exponent+0x4c>
 800f3b8:	2330      	movs	r3, #48	; 0x30
 800f3ba:	3130      	adds	r1, #48	; 0x30
 800f3bc:	7083      	strb	r3, [r0, #2]
 800f3be:	70c1      	strb	r1, [r0, #3]
 800f3c0:	1d03      	adds	r3, r0, #4
 800f3c2:	e7f1      	b.n	800f3a8 <__exponent+0x60>

0800f3c4 <_printf_float>:
 800f3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c8:	ed2d 8b02 	vpush	{d8}
 800f3cc:	b08d      	sub	sp, #52	; 0x34
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f3d4:	4616      	mov	r6, r2
 800f3d6:	461f      	mov	r7, r3
 800f3d8:	4605      	mov	r5, r0
 800f3da:	f003 f923 	bl	8012624 <_localeconv_r>
 800f3de:	f8d0 a000 	ldr.w	sl, [r0]
 800f3e2:	4650      	mov	r0, sl
 800f3e4:	f7f0 ff04 	bl	80001f0 <strlen>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	930a      	str	r3, [sp, #40]	; 0x28
 800f3ec:	6823      	ldr	r3, [r4, #0]
 800f3ee:	9305      	str	r3, [sp, #20]
 800f3f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f3f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f3f8:	3307      	adds	r3, #7
 800f3fa:	f023 0307 	bic.w	r3, r3, #7
 800f3fe:	f103 0208 	add.w	r2, r3, #8
 800f402:	f8c8 2000 	str.w	r2, [r8]
 800f406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f40e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f416:	9307      	str	r3, [sp, #28]
 800f418:	f8cd 8018 	str.w	r8, [sp, #24]
 800f41c:	ee08 0a10 	vmov	s16, r0
 800f420:	4b9f      	ldr	r3, [pc, #636]	; (800f6a0 <_printf_float+0x2dc>)
 800f422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f426:	f04f 32ff 	mov.w	r2, #4294967295
 800f42a:	f7f1 fb8f 	bl	8000b4c <__aeabi_dcmpun>
 800f42e:	bb88      	cbnz	r0, 800f494 <_printf_float+0xd0>
 800f430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f434:	4b9a      	ldr	r3, [pc, #616]	; (800f6a0 <_printf_float+0x2dc>)
 800f436:	f04f 32ff 	mov.w	r2, #4294967295
 800f43a:	f7f1 fb69 	bl	8000b10 <__aeabi_dcmple>
 800f43e:	bb48      	cbnz	r0, 800f494 <_printf_float+0xd0>
 800f440:	2200      	movs	r2, #0
 800f442:	2300      	movs	r3, #0
 800f444:	4640      	mov	r0, r8
 800f446:	4649      	mov	r1, r9
 800f448:	f7f1 fb58 	bl	8000afc <__aeabi_dcmplt>
 800f44c:	b110      	cbz	r0, 800f454 <_printf_float+0x90>
 800f44e:	232d      	movs	r3, #45	; 0x2d
 800f450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f454:	4b93      	ldr	r3, [pc, #588]	; (800f6a4 <_printf_float+0x2e0>)
 800f456:	4894      	ldr	r0, [pc, #592]	; (800f6a8 <_printf_float+0x2e4>)
 800f458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f45c:	bf94      	ite	ls
 800f45e:	4698      	movls	r8, r3
 800f460:	4680      	movhi	r8, r0
 800f462:	2303      	movs	r3, #3
 800f464:	6123      	str	r3, [r4, #16]
 800f466:	9b05      	ldr	r3, [sp, #20]
 800f468:	f023 0204 	bic.w	r2, r3, #4
 800f46c:	6022      	str	r2, [r4, #0]
 800f46e:	f04f 0900 	mov.w	r9, #0
 800f472:	9700      	str	r7, [sp, #0]
 800f474:	4633      	mov	r3, r6
 800f476:	aa0b      	add	r2, sp, #44	; 0x2c
 800f478:	4621      	mov	r1, r4
 800f47a:	4628      	mov	r0, r5
 800f47c:	f000 f9d8 	bl	800f830 <_printf_common>
 800f480:	3001      	adds	r0, #1
 800f482:	f040 8090 	bne.w	800f5a6 <_printf_float+0x1e2>
 800f486:	f04f 30ff 	mov.w	r0, #4294967295
 800f48a:	b00d      	add	sp, #52	; 0x34
 800f48c:	ecbd 8b02 	vpop	{d8}
 800f490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f494:	4642      	mov	r2, r8
 800f496:	464b      	mov	r3, r9
 800f498:	4640      	mov	r0, r8
 800f49a:	4649      	mov	r1, r9
 800f49c:	f7f1 fb56 	bl	8000b4c <__aeabi_dcmpun>
 800f4a0:	b140      	cbz	r0, 800f4b4 <_printf_float+0xf0>
 800f4a2:	464b      	mov	r3, r9
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	bfbc      	itt	lt
 800f4a8:	232d      	movlt	r3, #45	; 0x2d
 800f4aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f4ae:	487f      	ldr	r0, [pc, #508]	; (800f6ac <_printf_float+0x2e8>)
 800f4b0:	4b7f      	ldr	r3, [pc, #508]	; (800f6b0 <_printf_float+0x2ec>)
 800f4b2:	e7d1      	b.n	800f458 <_printf_float+0x94>
 800f4b4:	6863      	ldr	r3, [r4, #4]
 800f4b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f4ba:	9206      	str	r2, [sp, #24]
 800f4bc:	1c5a      	adds	r2, r3, #1
 800f4be:	d13f      	bne.n	800f540 <_printf_float+0x17c>
 800f4c0:	2306      	movs	r3, #6
 800f4c2:	6063      	str	r3, [r4, #4]
 800f4c4:	9b05      	ldr	r3, [sp, #20]
 800f4c6:	6861      	ldr	r1, [r4, #4]
 800f4c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	9303      	str	r3, [sp, #12]
 800f4d0:	ab0a      	add	r3, sp, #40	; 0x28
 800f4d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f4d6:	ab09      	add	r3, sp, #36	; 0x24
 800f4d8:	ec49 8b10 	vmov	d0, r8, r9
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	6022      	str	r2, [r4, #0]
 800f4e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	f7ff fecd 	bl	800f284 <__cvt>
 800f4ea:	9b06      	ldr	r3, [sp, #24]
 800f4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4ee:	2b47      	cmp	r3, #71	; 0x47
 800f4f0:	4680      	mov	r8, r0
 800f4f2:	d108      	bne.n	800f506 <_printf_float+0x142>
 800f4f4:	1cc8      	adds	r0, r1, #3
 800f4f6:	db02      	blt.n	800f4fe <_printf_float+0x13a>
 800f4f8:	6863      	ldr	r3, [r4, #4]
 800f4fa:	4299      	cmp	r1, r3
 800f4fc:	dd41      	ble.n	800f582 <_printf_float+0x1be>
 800f4fe:	f1ab 0b02 	sub.w	fp, fp, #2
 800f502:	fa5f fb8b 	uxtb.w	fp, fp
 800f506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f50a:	d820      	bhi.n	800f54e <_printf_float+0x18a>
 800f50c:	3901      	subs	r1, #1
 800f50e:	465a      	mov	r2, fp
 800f510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f514:	9109      	str	r1, [sp, #36]	; 0x24
 800f516:	f7ff ff17 	bl	800f348 <__exponent>
 800f51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f51c:	1813      	adds	r3, r2, r0
 800f51e:	2a01      	cmp	r2, #1
 800f520:	4681      	mov	r9, r0
 800f522:	6123      	str	r3, [r4, #16]
 800f524:	dc02      	bgt.n	800f52c <_printf_float+0x168>
 800f526:	6822      	ldr	r2, [r4, #0]
 800f528:	07d2      	lsls	r2, r2, #31
 800f52a:	d501      	bpl.n	800f530 <_printf_float+0x16c>
 800f52c:	3301      	adds	r3, #1
 800f52e:	6123      	str	r3, [r4, #16]
 800f530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f534:	2b00      	cmp	r3, #0
 800f536:	d09c      	beq.n	800f472 <_printf_float+0xae>
 800f538:	232d      	movs	r3, #45	; 0x2d
 800f53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f53e:	e798      	b.n	800f472 <_printf_float+0xae>
 800f540:	9a06      	ldr	r2, [sp, #24]
 800f542:	2a47      	cmp	r2, #71	; 0x47
 800f544:	d1be      	bne.n	800f4c4 <_printf_float+0x100>
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1bc      	bne.n	800f4c4 <_printf_float+0x100>
 800f54a:	2301      	movs	r3, #1
 800f54c:	e7b9      	b.n	800f4c2 <_printf_float+0xfe>
 800f54e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f552:	d118      	bne.n	800f586 <_printf_float+0x1c2>
 800f554:	2900      	cmp	r1, #0
 800f556:	6863      	ldr	r3, [r4, #4]
 800f558:	dd0b      	ble.n	800f572 <_printf_float+0x1ae>
 800f55a:	6121      	str	r1, [r4, #16]
 800f55c:	b913      	cbnz	r3, 800f564 <_printf_float+0x1a0>
 800f55e:	6822      	ldr	r2, [r4, #0]
 800f560:	07d0      	lsls	r0, r2, #31
 800f562:	d502      	bpl.n	800f56a <_printf_float+0x1a6>
 800f564:	3301      	adds	r3, #1
 800f566:	440b      	add	r3, r1
 800f568:	6123      	str	r3, [r4, #16]
 800f56a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f56c:	f04f 0900 	mov.w	r9, #0
 800f570:	e7de      	b.n	800f530 <_printf_float+0x16c>
 800f572:	b913      	cbnz	r3, 800f57a <_printf_float+0x1b6>
 800f574:	6822      	ldr	r2, [r4, #0]
 800f576:	07d2      	lsls	r2, r2, #31
 800f578:	d501      	bpl.n	800f57e <_printf_float+0x1ba>
 800f57a:	3302      	adds	r3, #2
 800f57c:	e7f4      	b.n	800f568 <_printf_float+0x1a4>
 800f57e:	2301      	movs	r3, #1
 800f580:	e7f2      	b.n	800f568 <_printf_float+0x1a4>
 800f582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f588:	4299      	cmp	r1, r3
 800f58a:	db05      	blt.n	800f598 <_printf_float+0x1d4>
 800f58c:	6823      	ldr	r3, [r4, #0]
 800f58e:	6121      	str	r1, [r4, #16]
 800f590:	07d8      	lsls	r0, r3, #31
 800f592:	d5ea      	bpl.n	800f56a <_printf_float+0x1a6>
 800f594:	1c4b      	adds	r3, r1, #1
 800f596:	e7e7      	b.n	800f568 <_printf_float+0x1a4>
 800f598:	2900      	cmp	r1, #0
 800f59a:	bfd4      	ite	le
 800f59c:	f1c1 0202 	rsble	r2, r1, #2
 800f5a0:	2201      	movgt	r2, #1
 800f5a2:	4413      	add	r3, r2
 800f5a4:	e7e0      	b.n	800f568 <_printf_float+0x1a4>
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	055a      	lsls	r2, r3, #21
 800f5aa:	d407      	bmi.n	800f5bc <_printf_float+0x1f8>
 800f5ac:	6923      	ldr	r3, [r4, #16]
 800f5ae:	4642      	mov	r2, r8
 800f5b0:	4631      	mov	r1, r6
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	47b8      	blx	r7
 800f5b6:	3001      	adds	r0, #1
 800f5b8:	d12c      	bne.n	800f614 <_printf_float+0x250>
 800f5ba:	e764      	b.n	800f486 <_printf_float+0xc2>
 800f5bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f5c0:	f240 80e0 	bls.w	800f784 <_printf_float+0x3c0>
 800f5c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	f7f1 fa8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d034      	beq.n	800f63e <_printf_float+0x27a>
 800f5d4:	4a37      	ldr	r2, [pc, #220]	; (800f6b4 <_printf_float+0x2f0>)
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	4631      	mov	r1, r6
 800f5da:	4628      	mov	r0, r5
 800f5dc:	47b8      	blx	r7
 800f5de:	3001      	adds	r0, #1
 800f5e0:	f43f af51 	beq.w	800f486 <_printf_float+0xc2>
 800f5e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	db02      	blt.n	800f5f2 <_printf_float+0x22e>
 800f5ec:	6823      	ldr	r3, [r4, #0]
 800f5ee:	07d8      	lsls	r0, r3, #31
 800f5f0:	d510      	bpl.n	800f614 <_printf_float+0x250>
 800f5f2:	ee18 3a10 	vmov	r3, s16
 800f5f6:	4652      	mov	r2, sl
 800f5f8:	4631      	mov	r1, r6
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	47b8      	blx	r7
 800f5fe:	3001      	adds	r0, #1
 800f600:	f43f af41 	beq.w	800f486 <_printf_float+0xc2>
 800f604:	f04f 0800 	mov.w	r8, #0
 800f608:	f104 091a 	add.w	r9, r4, #26
 800f60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f60e:	3b01      	subs	r3, #1
 800f610:	4543      	cmp	r3, r8
 800f612:	dc09      	bgt.n	800f628 <_printf_float+0x264>
 800f614:	6823      	ldr	r3, [r4, #0]
 800f616:	079b      	lsls	r3, r3, #30
 800f618:	f100 8105 	bmi.w	800f826 <_printf_float+0x462>
 800f61c:	68e0      	ldr	r0, [r4, #12]
 800f61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f620:	4298      	cmp	r0, r3
 800f622:	bfb8      	it	lt
 800f624:	4618      	movlt	r0, r3
 800f626:	e730      	b.n	800f48a <_printf_float+0xc6>
 800f628:	2301      	movs	r3, #1
 800f62a:	464a      	mov	r2, r9
 800f62c:	4631      	mov	r1, r6
 800f62e:	4628      	mov	r0, r5
 800f630:	47b8      	blx	r7
 800f632:	3001      	adds	r0, #1
 800f634:	f43f af27 	beq.w	800f486 <_printf_float+0xc2>
 800f638:	f108 0801 	add.w	r8, r8, #1
 800f63c:	e7e6      	b.n	800f60c <_printf_float+0x248>
 800f63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f640:	2b00      	cmp	r3, #0
 800f642:	dc39      	bgt.n	800f6b8 <_printf_float+0x2f4>
 800f644:	4a1b      	ldr	r2, [pc, #108]	; (800f6b4 <_printf_float+0x2f0>)
 800f646:	2301      	movs	r3, #1
 800f648:	4631      	mov	r1, r6
 800f64a:	4628      	mov	r0, r5
 800f64c:	47b8      	blx	r7
 800f64e:	3001      	adds	r0, #1
 800f650:	f43f af19 	beq.w	800f486 <_printf_float+0xc2>
 800f654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f658:	4313      	orrs	r3, r2
 800f65a:	d102      	bne.n	800f662 <_printf_float+0x29e>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	07d9      	lsls	r1, r3, #31
 800f660:	d5d8      	bpl.n	800f614 <_printf_float+0x250>
 800f662:	ee18 3a10 	vmov	r3, s16
 800f666:	4652      	mov	r2, sl
 800f668:	4631      	mov	r1, r6
 800f66a:	4628      	mov	r0, r5
 800f66c:	47b8      	blx	r7
 800f66e:	3001      	adds	r0, #1
 800f670:	f43f af09 	beq.w	800f486 <_printf_float+0xc2>
 800f674:	f04f 0900 	mov.w	r9, #0
 800f678:	f104 0a1a 	add.w	sl, r4, #26
 800f67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f67e:	425b      	negs	r3, r3
 800f680:	454b      	cmp	r3, r9
 800f682:	dc01      	bgt.n	800f688 <_printf_float+0x2c4>
 800f684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f686:	e792      	b.n	800f5ae <_printf_float+0x1ea>
 800f688:	2301      	movs	r3, #1
 800f68a:	4652      	mov	r2, sl
 800f68c:	4631      	mov	r1, r6
 800f68e:	4628      	mov	r0, r5
 800f690:	47b8      	blx	r7
 800f692:	3001      	adds	r0, #1
 800f694:	f43f aef7 	beq.w	800f486 <_printf_float+0xc2>
 800f698:	f109 0901 	add.w	r9, r9, #1
 800f69c:	e7ee      	b.n	800f67c <_printf_float+0x2b8>
 800f69e:	bf00      	nop
 800f6a0:	7fefffff 	.word	0x7fefffff
 800f6a4:	0801550c 	.word	0x0801550c
 800f6a8:	08015510 	.word	0x08015510
 800f6ac:	08015518 	.word	0x08015518
 800f6b0:	08015514 	.word	0x08015514
 800f6b4:	0801551c 	.word	0x0801551c
 800f6b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	bfa8      	it	ge
 800f6c0:	461a      	movge	r2, r3
 800f6c2:	2a00      	cmp	r2, #0
 800f6c4:	4691      	mov	r9, r2
 800f6c6:	dc37      	bgt.n	800f738 <_printf_float+0x374>
 800f6c8:	f04f 0b00 	mov.w	fp, #0
 800f6cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6d0:	f104 021a 	add.w	r2, r4, #26
 800f6d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6d6:	9305      	str	r3, [sp, #20]
 800f6d8:	eba3 0309 	sub.w	r3, r3, r9
 800f6dc:	455b      	cmp	r3, fp
 800f6de:	dc33      	bgt.n	800f748 <_printf_float+0x384>
 800f6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	db3b      	blt.n	800f760 <_printf_float+0x39c>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	07da      	lsls	r2, r3, #31
 800f6ec:	d438      	bmi.n	800f760 <_printf_float+0x39c>
 800f6ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6f0:	9b05      	ldr	r3, [sp, #20]
 800f6f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	eba2 0901 	sub.w	r9, r2, r1
 800f6fa:	4599      	cmp	r9, r3
 800f6fc:	bfa8      	it	ge
 800f6fe:	4699      	movge	r9, r3
 800f700:	f1b9 0f00 	cmp.w	r9, #0
 800f704:	dc35      	bgt.n	800f772 <_printf_float+0x3ae>
 800f706:	f04f 0800 	mov.w	r8, #0
 800f70a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f70e:	f104 0a1a 	add.w	sl, r4, #26
 800f712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f716:	1a9b      	subs	r3, r3, r2
 800f718:	eba3 0309 	sub.w	r3, r3, r9
 800f71c:	4543      	cmp	r3, r8
 800f71e:	f77f af79 	ble.w	800f614 <_printf_float+0x250>
 800f722:	2301      	movs	r3, #1
 800f724:	4652      	mov	r2, sl
 800f726:	4631      	mov	r1, r6
 800f728:	4628      	mov	r0, r5
 800f72a:	47b8      	blx	r7
 800f72c:	3001      	adds	r0, #1
 800f72e:	f43f aeaa 	beq.w	800f486 <_printf_float+0xc2>
 800f732:	f108 0801 	add.w	r8, r8, #1
 800f736:	e7ec      	b.n	800f712 <_printf_float+0x34e>
 800f738:	4613      	mov	r3, r2
 800f73a:	4631      	mov	r1, r6
 800f73c:	4642      	mov	r2, r8
 800f73e:	4628      	mov	r0, r5
 800f740:	47b8      	blx	r7
 800f742:	3001      	adds	r0, #1
 800f744:	d1c0      	bne.n	800f6c8 <_printf_float+0x304>
 800f746:	e69e      	b.n	800f486 <_printf_float+0xc2>
 800f748:	2301      	movs	r3, #1
 800f74a:	4631      	mov	r1, r6
 800f74c:	4628      	mov	r0, r5
 800f74e:	9205      	str	r2, [sp, #20]
 800f750:	47b8      	blx	r7
 800f752:	3001      	adds	r0, #1
 800f754:	f43f ae97 	beq.w	800f486 <_printf_float+0xc2>
 800f758:	9a05      	ldr	r2, [sp, #20]
 800f75a:	f10b 0b01 	add.w	fp, fp, #1
 800f75e:	e7b9      	b.n	800f6d4 <_printf_float+0x310>
 800f760:	ee18 3a10 	vmov	r3, s16
 800f764:	4652      	mov	r2, sl
 800f766:	4631      	mov	r1, r6
 800f768:	4628      	mov	r0, r5
 800f76a:	47b8      	blx	r7
 800f76c:	3001      	adds	r0, #1
 800f76e:	d1be      	bne.n	800f6ee <_printf_float+0x32a>
 800f770:	e689      	b.n	800f486 <_printf_float+0xc2>
 800f772:	9a05      	ldr	r2, [sp, #20]
 800f774:	464b      	mov	r3, r9
 800f776:	4442      	add	r2, r8
 800f778:	4631      	mov	r1, r6
 800f77a:	4628      	mov	r0, r5
 800f77c:	47b8      	blx	r7
 800f77e:	3001      	adds	r0, #1
 800f780:	d1c1      	bne.n	800f706 <_printf_float+0x342>
 800f782:	e680      	b.n	800f486 <_printf_float+0xc2>
 800f784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f786:	2a01      	cmp	r2, #1
 800f788:	dc01      	bgt.n	800f78e <_printf_float+0x3ca>
 800f78a:	07db      	lsls	r3, r3, #31
 800f78c:	d538      	bpl.n	800f800 <_printf_float+0x43c>
 800f78e:	2301      	movs	r3, #1
 800f790:	4642      	mov	r2, r8
 800f792:	4631      	mov	r1, r6
 800f794:	4628      	mov	r0, r5
 800f796:	47b8      	blx	r7
 800f798:	3001      	adds	r0, #1
 800f79a:	f43f ae74 	beq.w	800f486 <_printf_float+0xc2>
 800f79e:	ee18 3a10 	vmov	r3, s16
 800f7a2:	4652      	mov	r2, sl
 800f7a4:	4631      	mov	r1, r6
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	47b8      	blx	r7
 800f7aa:	3001      	adds	r0, #1
 800f7ac:	f43f ae6b 	beq.w	800f486 <_printf_float+0xc2>
 800f7b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	f7f1 f996 	bl	8000ae8 <__aeabi_dcmpeq>
 800f7bc:	b9d8      	cbnz	r0, 800f7f6 <_printf_float+0x432>
 800f7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7c0:	f108 0201 	add.w	r2, r8, #1
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	4631      	mov	r1, r6
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	47b8      	blx	r7
 800f7cc:	3001      	adds	r0, #1
 800f7ce:	d10e      	bne.n	800f7ee <_printf_float+0x42a>
 800f7d0:	e659      	b.n	800f486 <_printf_float+0xc2>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	4652      	mov	r2, sl
 800f7d6:	4631      	mov	r1, r6
 800f7d8:	4628      	mov	r0, r5
 800f7da:	47b8      	blx	r7
 800f7dc:	3001      	adds	r0, #1
 800f7de:	f43f ae52 	beq.w	800f486 <_printf_float+0xc2>
 800f7e2:	f108 0801 	add.w	r8, r8, #1
 800f7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	4543      	cmp	r3, r8
 800f7ec:	dcf1      	bgt.n	800f7d2 <_printf_float+0x40e>
 800f7ee:	464b      	mov	r3, r9
 800f7f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f7f4:	e6dc      	b.n	800f5b0 <_printf_float+0x1ec>
 800f7f6:	f04f 0800 	mov.w	r8, #0
 800f7fa:	f104 0a1a 	add.w	sl, r4, #26
 800f7fe:	e7f2      	b.n	800f7e6 <_printf_float+0x422>
 800f800:	2301      	movs	r3, #1
 800f802:	4642      	mov	r2, r8
 800f804:	e7df      	b.n	800f7c6 <_printf_float+0x402>
 800f806:	2301      	movs	r3, #1
 800f808:	464a      	mov	r2, r9
 800f80a:	4631      	mov	r1, r6
 800f80c:	4628      	mov	r0, r5
 800f80e:	47b8      	blx	r7
 800f810:	3001      	adds	r0, #1
 800f812:	f43f ae38 	beq.w	800f486 <_printf_float+0xc2>
 800f816:	f108 0801 	add.w	r8, r8, #1
 800f81a:	68e3      	ldr	r3, [r4, #12]
 800f81c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f81e:	1a5b      	subs	r3, r3, r1
 800f820:	4543      	cmp	r3, r8
 800f822:	dcf0      	bgt.n	800f806 <_printf_float+0x442>
 800f824:	e6fa      	b.n	800f61c <_printf_float+0x258>
 800f826:	f04f 0800 	mov.w	r8, #0
 800f82a:	f104 0919 	add.w	r9, r4, #25
 800f82e:	e7f4      	b.n	800f81a <_printf_float+0x456>

0800f830 <_printf_common>:
 800f830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f834:	4616      	mov	r6, r2
 800f836:	4699      	mov	r9, r3
 800f838:	688a      	ldr	r2, [r1, #8]
 800f83a:	690b      	ldr	r3, [r1, #16]
 800f83c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f840:	4293      	cmp	r3, r2
 800f842:	bfb8      	it	lt
 800f844:	4613      	movlt	r3, r2
 800f846:	6033      	str	r3, [r6, #0]
 800f848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f84c:	4607      	mov	r7, r0
 800f84e:	460c      	mov	r4, r1
 800f850:	b10a      	cbz	r2, 800f856 <_printf_common+0x26>
 800f852:	3301      	adds	r3, #1
 800f854:	6033      	str	r3, [r6, #0]
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	0699      	lsls	r1, r3, #26
 800f85a:	bf42      	ittt	mi
 800f85c:	6833      	ldrmi	r3, [r6, #0]
 800f85e:	3302      	addmi	r3, #2
 800f860:	6033      	strmi	r3, [r6, #0]
 800f862:	6825      	ldr	r5, [r4, #0]
 800f864:	f015 0506 	ands.w	r5, r5, #6
 800f868:	d106      	bne.n	800f878 <_printf_common+0x48>
 800f86a:	f104 0a19 	add.w	sl, r4, #25
 800f86e:	68e3      	ldr	r3, [r4, #12]
 800f870:	6832      	ldr	r2, [r6, #0]
 800f872:	1a9b      	subs	r3, r3, r2
 800f874:	42ab      	cmp	r3, r5
 800f876:	dc26      	bgt.n	800f8c6 <_printf_common+0x96>
 800f878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f87c:	1e13      	subs	r3, r2, #0
 800f87e:	6822      	ldr	r2, [r4, #0]
 800f880:	bf18      	it	ne
 800f882:	2301      	movne	r3, #1
 800f884:	0692      	lsls	r2, r2, #26
 800f886:	d42b      	bmi.n	800f8e0 <_printf_common+0xb0>
 800f888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f88c:	4649      	mov	r1, r9
 800f88e:	4638      	mov	r0, r7
 800f890:	47c0      	blx	r8
 800f892:	3001      	adds	r0, #1
 800f894:	d01e      	beq.n	800f8d4 <_printf_common+0xa4>
 800f896:	6823      	ldr	r3, [r4, #0]
 800f898:	68e5      	ldr	r5, [r4, #12]
 800f89a:	6832      	ldr	r2, [r6, #0]
 800f89c:	f003 0306 	and.w	r3, r3, #6
 800f8a0:	2b04      	cmp	r3, #4
 800f8a2:	bf08      	it	eq
 800f8a4:	1aad      	subeq	r5, r5, r2
 800f8a6:	68a3      	ldr	r3, [r4, #8]
 800f8a8:	6922      	ldr	r2, [r4, #16]
 800f8aa:	bf0c      	ite	eq
 800f8ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8b0:	2500      	movne	r5, #0
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	bfc4      	itt	gt
 800f8b6:	1a9b      	subgt	r3, r3, r2
 800f8b8:	18ed      	addgt	r5, r5, r3
 800f8ba:	2600      	movs	r6, #0
 800f8bc:	341a      	adds	r4, #26
 800f8be:	42b5      	cmp	r5, r6
 800f8c0:	d11a      	bne.n	800f8f8 <_printf_common+0xc8>
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	e008      	b.n	800f8d8 <_printf_common+0xa8>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	4652      	mov	r2, sl
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	47c0      	blx	r8
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	d103      	bne.n	800f8dc <_printf_common+0xac>
 800f8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8dc:	3501      	adds	r5, #1
 800f8de:	e7c6      	b.n	800f86e <_printf_common+0x3e>
 800f8e0:	18e1      	adds	r1, r4, r3
 800f8e2:	1c5a      	adds	r2, r3, #1
 800f8e4:	2030      	movs	r0, #48	; 0x30
 800f8e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8ea:	4422      	add	r2, r4
 800f8ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8f4:	3302      	adds	r3, #2
 800f8f6:	e7c7      	b.n	800f888 <_printf_common+0x58>
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	4622      	mov	r2, r4
 800f8fc:	4649      	mov	r1, r9
 800f8fe:	4638      	mov	r0, r7
 800f900:	47c0      	blx	r8
 800f902:	3001      	adds	r0, #1
 800f904:	d0e6      	beq.n	800f8d4 <_printf_common+0xa4>
 800f906:	3601      	adds	r6, #1
 800f908:	e7d9      	b.n	800f8be <_printf_common+0x8e>
	...

0800f90c <_printf_i>:
 800f90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f910:	460c      	mov	r4, r1
 800f912:	4691      	mov	r9, r2
 800f914:	7e27      	ldrb	r7, [r4, #24]
 800f916:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f918:	2f78      	cmp	r7, #120	; 0x78
 800f91a:	4680      	mov	r8, r0
 800f91c:	469a      	mov	sl, r3
 800f91e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f922:	d807      	bhi.n	800f934 <_printf_i+0x28>
 800f924:	2f62      	cmp	r7, #98	; 0x62
 800f926:	d80a      	bhi.n	800f93e <_printf_i+0x32>
 800f928:	2f00      	cmp	r7, #0
 800f92a:	f000 80d8 	beq.w	800fade <_printf_i+0x1d2>
 800f92e:	2f58      	cmp	r7, #88	; 0x58
 800f930:	f000 80a3 	beq.w	800fa7a <_printf_i+0x16e>
 800f934:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f93c:	e03a      	b.n	800f9b4 <_printf_i+0xa8>
 800f93e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f942:	2b15      	cmp	r3, #21
 800f944:	d8f6      	bhi.n	800f934 <_printf_i+0x28>
 800f946:	a001      	add	r0, pc, #4	; (adr r0, 800f94c <_printf_i+0x40>)
 800f948:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f94c:	0800f9a5 	.word	0x0800f9a5
 800f950:	0800f9b9 	.word	0x0800f9b9
 800f954:	0800f935 	.word	0x0800f935
 800f958:	0800f935 	.word	0x0800f935
 800f95c:	0800f935 	.word	0x0800f935
 800f960:	0800f935 	.word	0x0800f935
 800f964:	0800f9b9 	.word	0x0800f9b9
 800f968:	0800f935 	.word	0x0800f935
 800f96c:	0800f935 	.word	0x0800f935
 800f970:	0800f935 	.word	0x0800f935
 800f974:	0800f935 	.word	0x0800f935
 800f978:	0800fac5 	.word	0x0800fac5
 800f97c:	0800f9e9 	.word	0x0800f9e9
 800f980:	0800faa7 	.word	0x0800faa7
 800f984:	0800f935 	.word	0x0800f935
 800f988:	0800f935 	.word	0x0800f935
 800f98c:	0800fae7 	.word	0x0800fae7
 800f990:	0800f935 	.word	0x0800f935
 800f994:	0800f9e9 	.word	0x0800f9e9
 800f998:	0800f935 	.word	0x0800f935
 800f99c:	0800f935 	.word	0x0800f935
 800f9a0:	0800faaf 	.word	0x0800faaf
 800f9a4:	680b      	ldr	r3, [r1, #0]
 800f9a6:	1d1a      	adds	r2, r3, #4
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	600a      	str	r2, [r1, #0]
 800f9ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	e0a3      	b.n	800fb00 <_printf_i+0x1f4>
 800f9b8:	6825      	ldr	r5, [r4, #0]
 800f9ba:	6808      	ldr	r0, [r1, #0]
 800f9bc:	062e      	lsls	r6, r5, #24
 800f9be:	f100 0304 	add.w	r3, r0, #4
 800f9c2:	d50a      	bpl.n	800f9da <_printf_i+0xce>
 800f9c4:	6805      	ldr	r5, [r0, #0]
 800f9c6:	600b      	str	r3, [r1, #0]
 800f9c8:	2d00      	cmp	r5, #0
 800f9ca:	da03      	bge.n	800f9d4 <_printf_i+0xc8>
 800f9cc:	232d      	movs	r3, #45	; 0x2d
 800f9ce:	426d      	negs	r5, r5
 800f9d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9d4:	485e      	ldr	r0, [pc, #376]	; (800fb50 <_printf_i+0x244>)
 800f9d6:	230a      	movs	r3, #10
 800f9d8:	e019      	b.n	800fa0e <_printf_i+0x102>
 800f9da:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f9de:	6805      	ldr	r5, [r0, #0]
 800f9e0:	600b      	str	r3, [r1, #0]
 800f9e2:	bf18      	it	ne
 800f9e4:	b22d      	sxthne	r5, r5
 800f9e6:	e7ef      	b.n	800f9c8 <_printf_i+0xbc>
 800f9e8:	680b      	ldr	r3, [r1, #0]
 800f9ea:	6825      	ldr	r5, [r4, #0]
 800f9ec:	1d18      	adds	r0, r3, #4
 800f9ee:	6008      	str	r0, [r1, #0]
 800f9f0:	0628      	lsls	r0, r5, #24
 800f9f2:	d501      	bpl.n	800f9f8 <_printf_i+0xec>
 800f9f4:	681d      	ldr	r5, [r3, #0]
 800f9f6:	e002      	b.n	800f9fe <_printf_i+0xf2>
 800f9f8:	0669      	lsls	r1, r5, #25
 800f9fa:	d5fb      	bpl.n	800f9f4 <_printf_i+0xe8>
 800f9fc:	881d      	ldrh	r5, [r3, #0]
 800f9fe:	4854      	ldr	r0, [pc, #336]	; (800fb50 <_printf_i+0x244>)
 800fa00:	2f6f      	cmp	r7, #111	; 0x6f
 800fa02:	bf0c      	ite	eq
 800fa04:	2308      	moveq	r3, #8
 800fa06:	230a      	movne	r3, #10
 800fa08:	2100      	movs	r1, #0
 800fa0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa0e:	6866      	ldr	r6, [r4, #4]
 800fa10:	60a6      	str	r6, [r4, #8]
 800fa12:	2e00      	cmp	r6, #0
 800fa14:	bfa2      	ittt	ge
 800fa16:	6821      	ldrge	r1, [r4, #0]
 800fa18:	f021 0104 	bicge.w	r1, r1, #4
 800fa1c:	6021      	strge	r1, [r4, #0]
 800fa1e:	b90d      	cbnz	r5, 800fa24 <_printf_i+0x118>
 800fa20:	2e00      	cmp	r6, #0
 800fa22:	d04d      	beq.n	800fac0 <_printf_i+0x1b4>
 800fa24:	4616      	mov	r6, r2
 800fa26:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa2a:	fb03 5711 	mls	r7, r3, r1, r5
 800fa2e:	5dc7      	ldrb	r7, [r0, r7]
 800fa30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa34:	462f      	mov	r7, r5
 800fa36:	42bb      	cmp	r3, r7
 800fa38:	460d      	mov	r5, r1
 800fa3a:	d9f4      	bls.n	800fa26 <_printf_i+0x11a>
 800fa3c:	2b08      	cmp	r3, #8
 800fa3e:	d10b      	bne.n	800fa58 <_printf_i+0x14c>
 800fa40:	6823      	ldr	r3, [r4, #0]
 800fa42:	07df      	lsls	r7, r3, #31
 800fa44:	d508      	bpl.n	800fa58 <_printf_i+0x14c>
 800fa46:	6923      	ldr	r3, [r4, #16]
 800fa48:	6861      	ldr	r1, [r4, #4]
 800fa4a:	4299      	cmp	r1, r3
 800fa4c:	bfde      	ittt	le
 800fa4e:	2330      	movle	r3, #48	; 0x30
 800fa50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa58:	1b92      	subs	r2, r2, r6
 800fa5a:	6122      	str	r2, [r4, #16]
 800fa5c:	f8cd a000 	str.w	sl, [sp]
 800fa60:	464b      	mov	r3, r9
 800fa62:	aa03      	add	r2, sp, #12
 800fa64:	4621      	mov	r1, r4
 800fa66:	4640      	mov	r0, r8
 800fa68:	f7ff fee2 	bl	800f830 <_printf_common>
 800fa6c:	3001      	adds	r0, #1
 800fa6e:	d14c      	bne.n	800fb0a <_printf_i+0x1fe>
 800fa70:	f04f 30ff 	mov.w	r0, #4294967295
 800fa74:	b004      	add	sp, #16
 800fa76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa7a:	4835      	ldr	r0, [pc, #212]	; (800fb50 <_printf_i+0x244>)
 800fa7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa80:	6823      	ldr	r3, [r4, #0]
 800fa82:	680e      	ldr	r6, [r1, #0]
 800fa84:	061f      	lsls	r7, r3, #24
 800fa86:	f856 5b04 	ldr.w	r5, [r6], #4
 800fa8a:	600e      	str	r6, [r1, #0]
 800fa8c:	d514      	bpl.n	800fab8 <_printf_i+0x1ac>
 800fa8e:	07d9      	lsls	r1, r3, #31
 800fa90:	bf44      	itt	mi
 800fa92:	f043 0320 	orrmi.w	r3, r3, #32
 800fa96:	6023      	strmi	r3, [r4, #0]
 800fa98:	b91d      	cbnz	r5, 800faa2 <_printf_i+0x196>
 800fa9a:	6823      	ldr	r3, [r4, #0]
 800fa9c:	f023 0320 	bic.w	r3, r3, #32
 800faa0:	6023      	str	r3, [r4, #0]
 800faa2:	2310      	movs	r3, #16
 800faa4:	e7b0      	b.n	800fa08 <_printf_i+0xfc>
 800faa6:	6823      	ldr	r3, [r4, #0]
 800faa8:	f043 0320 	orr.w	r3, r3, #32
 800faac:	6023      	str	r3, [r4, #0]
 800faae:	2378      	movs	r3, #120	; 0x78
 800fab0:	4828      	ldr	r0, [pc, #160]	; (800fb54 <_printf_i+0x248>)
 800fab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fab6:	e7e3      	b.n	800fa80 <_printf_i+0x174>
 800fab8:	065e      	lsls	r6, r3, #25
 800faba:	bf48      	it	mi
 800fabc:	b2ad      	uxthmi	r5, r5
 800fabe:	e7e6      	b.n	800fa8e <_printf_i+0x182>
 800fac0:	4616      	mov	r6, r2
 800fac2:	e7bb      	b.n	800fa3c <_printf_i+0x130>
 800fac4:	680b      	ldr	r3, [r1, #0]
 800fac6:	6826      	ldr	r6, [r4, #0]
 800fac8:	6960      	ldr	r0, [r4, #20]
 800faca:	1d1d      	adds	r5, r3, #4
 800facc:	600d      	str	r5, [r1, #0]
 800face:	0635      	lsls	r5, r6, #24
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	d501      	bpl.n	800fad8 <_printf_i+0x1cc>
 800fad4:	6018      	str	r0, [r3, #0]
 800fad6:	e002      	b.n	800fade <_printf_i+0x1d2>
 800fad8:	0671      	lsls	r1, r6, #25
 800fada:	d5fb      	bpl.n	800fad4 <_printf_i+0x1c8>
 800fadc:	8018      	strh	r0, [r3, #0]
 800fade:	2300      	movs	r3, #0
 800fae0:	6123      	str	r3, [r4, #16]
 800fae2:	4616      	mov	r6, r2
 800fae4:	e7ba      	b.n	800fa5c <_printf_i+0x150>
 800fae6:	680b      	ldr	r3, [r1, #0]
 800fae8:	1d1a      	adds	r2, r3, #4
 800faea:	600a      	str	r2, [r1, #0]
 800faec:	681e      	ldr	r6, [r3, #0]
 800faee:	6862      	ldr	r2, [r4, #4]
 800faf0:	2100      	movs	r1, #0
 800faf2:	4630      	mov	r0, r6
 800faf4:	f7f0 fb84 	bl	8000200 <memchr>
 800faf8:	b108      	cbz	r0, 800fafe <_printf_i+0x1f2>
 800fafa:	1b80      	subs	r0, r0, r6
 800fafc:	6060      	str	r0, [r4, #4]
 800fafe:	6863      	ldr	r3, [r4, #4]
 800fb00:	6123      	str	r3, [r4, #16]
 800fb02:	2300      	movs	r3, #0
 800fb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb08:	e7a8      	b.n	800fa5c <_printf_i+0x150>
 800fb0a:	6923      	ldr	r3, [r4, #16]
 800fb0c:	4632      	mov	r2, r6
 800fb0e:	4649      	mov	r1, r9
 800fb10:	4640      	mov	r0, r8
 800fb12:	47d0      	blx	sl
 800fb14:	3001      	adds	r0, #1
 800fb16:	d0ab      	beq.n	800fa70 <_printf_i+0x164>
 800fb18:	6823      	ldr	r3, [r4, #0]
 800fb1a:	079b      	lsls	r3, r3, #30
 800fb1c:	d413      	bmi.n	800fb46 <_printf_i+0x23a>
 800fb1e:	68e0      	ldr	r0, [r4, #12]
 800fb20:	9b03      	ldr	r3, [sp, #12]
 800fb22:	4298      	cmp	r0, r3
 800fb24:	bfb8      	it	lt
 800fb26:	4618      	movlt	r0, r3
 800fb28:	e7a4      	b.n	800fa74 <_printf_i+0x168>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	4632      	mov	r2, r6
 800fb2e:	4649      	mov	r1, r9
 800fb30:	4640      	mov	r0, r8
 800fb32:	47d0      	blx	sl
 800fb34:	3001      	adds	r0, #1
 800fb36:	d09b      	beq.n	800fa70 <_printf_i+0x164>
 800fb38:	3501      	adds	r5, #1
 800fb3a:	68e3      	ldr	r3, [r4, #12]
 800fb3c:	9903      	ldr	r1, [sp, #12]
 800fb3e:	1a5b      	subs	r3, r3, r1
 800fb40:	42ab      	cmp	r3, r5
 800fb42:	dcf2      	bgt.n	800fb2a <_printf_i+0x21e>
 800fb44:	e7eb      	b.n	800fb1e <_printf_i+0x212>
 800fb46:	2500      	movs	r5, #0
 800fb48:	f104 0619 	add.w	r6, r4, #25
 800fb4c:	e7f5      	b.n	800fb3a <_printf_i+0x22e>
 800fb4e:	bf00      	nop
 800fb50:	0801551e 	.word	0x0801551e
 800fb54:	0801552f 	.word	0x0801552f

0800fb58 <_scanf_float>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	b087      	sub	sp, #28
 800fb5e:	4617      	mov	r7, r2
 800fb60:	9303      	str	r3, [sp, #12]
 800fb62:	688b      	ldr	r3, [r1, #8]
 800fb64:	1e5a      	subs	r2, r3, #1
 800fb66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fb6a:	bf83      	ittte	hi
 800fb6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fb70:	195b      	addhi	r3, r3, r5
 800fb72:	9302      	strhi	r3, [sp, #8]
 800fb74:	2300      	movls	r3, #0
 800fb76:	bf86      	itte	hi
 800fb78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fb7c:	608b      	strhi	r3, [r1, #8]
 800fb7e:	9302      	strls	r3, [sp, #8]
 800fb80:	680b      	ldr	r3, [r1, #0]
 800fb82:	468b      	mov	fp, r1
 800fb84:	2500      	movs	r5, #0
 800fb86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fb8a:	f84b 3b1c 	str.w	r3, [fp], #28
 800fb8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fb92:	4680      	mov	r8, r0
 800fb94:	460c      	mov	r4, r1
 800fb96:	465e      	mov	r6, fp
 800fb98:	46aa      	mov	sl, r5
 800fb9a:	46a9      	mov	r9, r5
 800fb9c:	9501      	str	r5, [sp, #4]
 800fb9e:	68a2      	ldr	r2, [r4, #8]
 800fba0:	b152      	cbz	r2, 800fbb8 <_scanf_float+0x60>
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2b4e      	cmp	r3, #78	; 0x4e
 800fba8:	d864      	bhi.n	800fc74 <_scanf_float+0x11c>
 800fbaa:	2b40      	cmp	r3, #64	; 0x40
 800fbac:	d83c      	bhi.n	800fc28 <_scanf_float+0xd0>
 800fbae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fbb2:	b2c8      	uxtb	r0, r1
 800fbb4:	280e      	cmp	r0, #14
 800fbb6:	d93a      	bls.n	800fc2e <_scanf_float+0xd6>
 800fbb8:	f1b9 0f00 	cmp.w	r9, #0
 800fbbc:	d003      	beq.n	800fbc6 <_scanf_float+0x6e>
 800fbbe:	6823      	ldr	r3, [r4, #0]
 800fbc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbca:	f1ba 0f01 	cmp.w	sl, #1
 800fbce:	f200 8113 	bhi.w	800fdf8 <_scanf_float+0x2a0>
 800fbd2:	455e      	cmp	r6, fp
 800fbd4:	f200 8105 	bhi.w	800fde2 <_scanf_float+0x28a>
 800fbd8:	2501      	movs	r5, #1
 800fbda:	4628      	mov	r0, r5
 800fbdc:	b007      	add	sp, #28
 800fbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fbe6:	2a0d      	cmp	r2, #13
 800fbe8:	d8e6      	bhi.n	800fbb8 <_scanf_float+0x60>
 800fbea:	a101      	add	r1, pc, #4	; (adr r1, 800fbf0 <_scanf_float+0x98>)
 800fbec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fbf0:	0800fd2f 	.word	0x0800fd2f
 800fbf4:	0800fbb9 	.word	0x0800fbb9
 800fbf8:	0800fbb9 	.word	0x0800fbb9
 800fbfc:	0800fbb9 	.word	0x0800fbb9
 800fc00:	0800fd8f 	.word	0x0800fd8f
 800fc04:	0800fd67 	.word	0x0800fd67
 800fc08:	0800fbb9 	.word	0x0800fbb9
 800fc0c:	0800fbb9 	.word	0x0800fbb9
 800fc10:	0800fd3d 	.word	0x0800fd3d
 800fc14:	0800fbb9 	.word	0x0800fbb9
 800fc18:	0800fbb9 	.word	0x0800fbb9
 800fc1c:	0800fbb9 	.word	0x0800fbb9
 800fc20:	0800fbb9 	.word	0x0800fbb9
 800fc24:	0800fcf5 	.word	0x0800fcf5
 800fc28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fc2c:	e7db      	b.n	800fbe6 <_scanf_float+0x8e>
 800fc2e:	290e      	cmp	r1, #14
 800fc30:	d8c2      	bhi.n	800fbb8 <_scanf_float+0x60>
 800fc32:	a001      	add	r0, pc, #4	; (adr r0, 800fc38 <_scanf_float+0xe0>)
 800fc34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fc38:	0800fce7 	.word	0x0800fce7
 800fc3c:	0800fbb9 	.word	0x0800fbb9
 800fc40:	0800fce7 	.word	0x0800fce7
 800fc44:	0800fd7b 	.word	0x0800fd7b
 800fc48:	0800fbb9 	.word	0x0800fbb9
 800fc4c:	0800fc95 	.word	0x0800fc95
 800fc50:	0800fcd1 	.word	0x0800fcd1
 800fc54:	0800fcd1 	.word	0x0800fcd1
 800fc58:	0800fcd1 	.word	0x0800fcd1
 800fc5c:	0800fcd1 	.word	0x0800fcd1
 800fc60:	0800fcd1 	.word	0x0800fcd1
 800fc64:	0800fcd1 	.word	0x0800fcd1
 800fc68:	0800fcd1 	.word	0x0800fcd1
 800fc6c:	0800fcd1 	.word	0x0800fcd1
 800fc70:	0800fcd1 	.word	0x0800fcd1
 800fc74:	2b6e      	cmp	r3, #110	; 0x6e
 800fc76:	d809      	bhi.n	800fc8c <_scanf_float+0x134>
 800fc78:	2b60      	cmp	r3, #96	; 0x60
 800fc7a:	d8b2      	bhi.n	800fbe2 <_scanf_float+0x8a>
 800fc7c:	2b54      	cmp	r3, #84	; 0x54
 800fc7e:	d077      	beq.n	800fd70 <_scanf_float+0x218>
 800fc80:	2b59      	cmp	r3, #89	; 0x59
 800fc82:	d199      	bne.n	800fbb8 <_scanf_float+0x60>
 800fc84:	2d07      	cmp	r5, #7
 800fc86:	d197      	bne.n	800fbb8 <_scanf_float+0x60>
 800fc88:	2508      	movs	r5, #8
 800fc8a:	e029      	b.n	800fce0 <_scanf_float+0x188>
 800fc8c:	2b74      	cmp	r3, #116	; 0x74
 800fc8e:	d06f      	beq.n	800fd70 <_scanf_float+0x218>
 800fc90:	2b79      	cmp	r3, #121	; 0x79
 800fc92:	e7f6      	b.n	800fc82 <_scanf_float+0x12a>
 800fc94:	6821      	ldr	r1, [r4, #0]
 800fc96:	05c8      	lsls	r0, r1, #23
 800fc98:	d51a      	bpl.n	800fcd0 <_scanf_float+0x178>
 800fc9a:	9b02      	ldr	r3, [sp, #8]
 800fc9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fca0:	6021      	str	r1, [r4, #0]
 800fca2:	f109 0901 	add.w	r9, r9, #1
 800fca6:	b11b      	cbz	r3, 800fcb0 <_scanf_float+0x158>
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	3201      	adds	r2, #1
 800fcac:	9302      	str	r3, [sp, #8]
 800fcae:	60a2      	str	r2, [r4, #8]
 800fcb0:	68a3      	ldr	r3, [r4, #8]
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	60a3      	str	r3, [r4, #8]
 800fcb6:	6923      	ldr	r3, [r4, #16]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	6123      	str	r3, [r4, #16]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	607b      	str	r3, [r7, #4]
 800fcc4:	f340 8084 	ble.w	800fdd0 <_scanf_float+0x278>
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	3301      	adds	r3, #1
 800fccc:	603b      	str	r3, [r7, #0]
 800fcce:	e766      	b.n	800fb9e <_scanf_float+0x46>
 800fcd0:	eb1a 0f05 	cmn.w	sl, r5
 800fcd4:	f47f af70 	bne.w	800fbb8 <_scanf_float+0x60>
 800fcd8:	6822      	ldr	r2, [r4, #0]
 800fcda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fcde:	6022      	str	r2, [r4, #0]
 800fce0:	f806 3b01 	strb.w	r3, [r6], #1
 800fce4:	e7e4      	b.n	800fcb0 <_scanf_float+0x158>
 800fce6:	6822      	ldr	r2, [r4, #0]
 800fce8:	0610      	lsls	r0, r2, #24
 800fcea:	f57f af65 	bpl.w	800fbb8 <_scanf_float+0x60>
 800fcee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fcf2:	e7f4      	b.n	800fcde <_scanf_float+0x186>
 800fcf4:	f1ba 0f00 	cmp.w	sl, #0
 800fcf8:	d10e      	bne.n	800fd18 <_scanf_float+0x1c0>
 800fcfa:	f1b9 0f00 	cmp.w	r9, #0
 800fcfe:	d10e      	bne.n	800fd1e <_scanf_float+0x1c6>
 800fd00:	6822      	ldr	r2, [r4, #0]
 800fd02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fd06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fd0a:	d108      	bne.n	800fd1e <_scanf_float+0x1c6>
 800fd0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd10:	6022      	str	r2, [r4, #0]
 800fd12:	f04f 0a01 	mov.w	sl, #1
 800fd16:	e7e3      	b.n	800fce0 <_scanf_float+0x188>
 800fd18:	f1ba 0f02 	cmp.w	sl, #2
 800fd1c:	d055      	beq.n	800fdca <_scanf_float+0x272>
 800fd1e:	2d01      	cmp	r5, #1
 800fd20:	d002      	beq.n	800fd28 <_scanf_float+0x1d0>
 800fd22:	2d04      	cmp	r5, #4
 800fd24:	f47f af48 	bne.w	800fbb8 <_scanf_float+0x60>
 800fd28:	3501      	adds	r5, #1
 800fd2a:	b2ed      	uxtb	r5, r5
 800fd2c:	e7d8      	b.n	800fce0 <_scanf_float+0x188>
 800fd2e:	f1ba 0f01 	cmp.w	sl, #1
 800fd32:	f47f af41 	bne.w	800fbb8 <_scanf_float+0x60>
 800fd36:	f04f 0a02 	mov.w	sl, #2
 800fd3a:	e7d1      	b.n	800fce0 <_scanf_float+0x188>
 800fd3c:	b97d      	cbnz	r5, 800fd5e <_scanf_float+0x206>
 800fd3e:	f1b9 0f00 	cmp.w	r9, #0
 800fd42:	f47f af3c 	bne.w	800fbbe <_scanf_float+0x66>
 800fd46:	6822      	ldr	r2, [r4, #0]
 800fd48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fd4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fd50:	f47f af39 	bne.w	800fbc6 <_scanf_float+0x6e>
 800fd54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd58:	6022      	str	r2, [r4, #0]
 800fd5a:	2501      	movs	r5, #1
 800fd5c:	e7c0      	b.n	800fce0 <_scanf_float+0x188>
 800fd5e:	2d03      	cmp	r5, #3
 800fd60:	d0e2      	beq.n	800fd28 <_scanf_float+0x1d0>
 800fd62:	2d05      	cmp	r5, #5
 800fd64:	e7de      	b.n	800fd24 <_scanf_float+0x1cc>
 800fd66:	2d02      	cmp	r5, #2
 800fd68:	f47f af26 	bne.w	800fbb8 <_scanf_float+0x60>
 800fd6c:	2503      	movs	r5, #3
 800fd6e:	e7b7      	b.n	800fce0 <_scanf_float+0x188>
 800fd70:	2d06      	cmp	r5, #6
 800fd72:	f47f af21 	bne.w	800fbb8 <_scanf_float+0x60>
 800fd76:	2507      	movs	r5, #7
 800fd78:	e7b2      	b.n	800fce0 <_scanf_float+0x188>
 800fd7a:	6822      	ldr	r2, [r4, #0]
 800fd7c:	0591      	lsls	r1, r2, #22
 800fd7e:	f57f af1b 	bpl.w	800fbb8 <_scanf_float+0x60>
 800fd82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fd86:	6022      	str	r2, [r4, #0]
 800fd88:	f8cd 9004 	str.w	r9, [sp, #4]
 800fd8c:	e7a8      	b.n	800fce0 <_scanf_float+0x188>
 800fd8e:	6822      	ldr	r2, [r4, #0]
 800fd90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fd94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fd98:	d006      	beq.n	800fda8 <_scanf_float+0x250>
 800fd9a:	0550      	lsls	r0, r2, #21
 800fd9c:	f57f af0c 	bpl.w	800fbb8 <_scanf_float+0x60>
 800fda0:	f1b9 0f00 	cmp.w	r9, #0
 800fda4:	f43f af0f 	beq.w	800fbc6 <_scanf_float+0x6e>
 800fda8:	0591      	lsls	r1, r2, #22
 800fdaa:	bf58      	it	pl
 800fdac:	9901      	ldrpl	r1, [sp, #4]
 800fdae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fdb2:	bf58      	it	pl
 800fdb4:	eba9 0101 	subpl.w	r1, r9, r1
 800fdb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fdbc:	bf58      	it	pl
 800fdbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fdc2:	6022      	str	r2, [r4, #0]
 800fdc4:	f04f 0900 	mov.w	r9, #0
 800fdc8:	e78a      	b.n	800fce0 <_scanf_float+0x188>
 800fdca:	f04f 0a03 	mov.w	sl, #3
 800fdce:	e787      	b.n	800fce0 <_scanf_float+0x188>
 800fdd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	4640      	mov	r0, r8
 800fdd8:	4798      	blx	r3
 800fdda:	2800      	cmp	r0, #0
 800fddc:	f43f aedf 	beq.w	800fb9e <_scanf_float+0x46>
 800fde0:	e6ea      	b.n	800fbb8 <_scanf_float+0x60>
 800fde2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fde6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdea:	463a      	mov	r2, r7
 800fdec:	4640      	mov	r0, r8
 800fdee:	4798      	blx	r3
 800fdf0:	6923      	ldr	r3, [r4, #16]
 800fdf2:	3b01      	subs	r3, #1
 800fdf4:	6123      	str	r3, [r4, #16]
 800fdf6:	e6ec      	b.n	800fbd2 <_scanf_float+0x7a>
 800fdf8:	1e6b      	subs	r3, r5, #1
 800fdfa:	2b06      	cmp	r3, #6
 800fdfc:	d825      	bhi.n	800fe4a <_scanf_float+0x2f2>
 800fdfe:	2d02      	cmp	r5, #2
 800fe00:	d836      	bhi.n	800fe70 <_scanf_float+0x318>
 800fe02:	455e      	cmp	r6, fp
 800fe04:	f67f aee8 	bls.w	800fbd8 <_scanf_float+0x80>
 800fe08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe10:	463a      	mov	r2, r7
 800fe12:	4640      	mov	r0, r8
 800fe14:	4798      	blx	r3
 800fe16:	6923      	ldr	r3, [r4, #16]
 800fe18:	3b01      	subs	r3, #1
 800fe1a:	6123      	str	r3, [r4, #16]
 800fe1c:	e7f1      	b.n	800fe02 <_scanf_float+0x2aa>
 800fe1e:	9802      	ldr	r0, [sp, #8]
 800fe20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fe28:	9002      	str	r0, [sp, #8]
 800fe2a:	463a      	mov	r2, r7
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	4798      	blx	r3
 800fe30:	6923      	ldr	r3, [r4, #16]
 800fe32:	3b01      	subs	r3, #1
 800fe34:	6123      	str	r3, [r4, #16]
 800fe36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe3a:	fa5f fa8a 	uxtb.w	sl, sl
 800fe3e:	f1ba 0f02 	cmp.w	sl, #2
 800fe42:	d1ec      	bne.n	800fe1e <_scanf_float+0x2c6>
 800fe44:	3d03      	subs	r5, #3
 800fe46:	b2ed      	uxtb	r5, r5
 800fe48:	1b76      	subs	r6, r6, r5
 800fe4a:	6823      	ldr	r3, [r4, #0]
 800fe4c:	05da      	lsls	r2, r3, #23
 800fe4e:	d52f      	bpl.n	800feb0 <_scanf_float+0x358>
 800fe50:	055b      	lsls	r3, r3, #21
 800fe52:	d510      	bpl.n	800fe76 <_scanf_float+0x31e>
 800fe54:	455e      	cmp	r6, fp
 800fe56:	f67f aebf 	bls.w	800fbd8 <_scanf_float+0x80>
 800fe5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe62:	463a      	mov	r2, r7
 800fe64:	4640      	mov	r0, r8
 800fe66:	4798      	blx	r3
 800fe68:	6923      	ldr	r3, [r4, #16]
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	6123      	str	r3, [r4, #16]
 800fe6e:	e7f1      	b.n	800fe54 <_scanf_float+0x2fc>
 800fe70:	46aa      	mov	sl, r5
 800fe72:	9602      	str	r6, [sp, #8]
 800fe74:	e7df      	b.n	800fe36 <_scanf_float+0x2de>
 800fe76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fe7a:	6923      	ldr	r3, [r4, #16]
 800fe7c:	2965      	cmp	r1, #101	; 0x65
 800fe7e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe82:	f106 35ff 	add.w	r5, r6, #4294967295
 800fe86:	6123      	str	r3, [r4, #16]
 800fe88:	d00c      	beq.n	800fea4 <_scanf_float+0x34c>
 800fe8a:	2945      	cmp	r1, #69	; 0x45
 800fe8c:	d00a      	beq.n	800fea4 <_scanf_float+0x34c>
 800fe8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe92:	463a      	mov	r2, r7
 800fe94:	4640      	mov	r0, r8
 800fe96:	4798      	blx	r3
 800fe98:	6923      	ldr	r3, [r4, #16]
 800fe9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	1eb5      	subs	r5, r6, #2
 800fea2:	6123      	str	r3, [r4, #16]
 800fea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fea8:	463a      	mov	r2, r7
 800feaa:	4640      	mov	r0, r8
 800feac:	4798      	blx	r3
 800feae:	462e      	mov	r6, r5
 800feb0:	6825      	ldr	r5, [r4, #0]
 800feb2:	f015 0510 	ands.w	r5, r5, #16
 800feb6:	d158      	bne.n	800ff6a <_scanf_float+0x412>
 800feb8:	7035      	strb	r5, [r6, #0]
 800feba:	6823      	ldr	r3, [r4, #0]
 800febc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fec4:	d11c      	bne.n	800ff00 <_scanf_float+0x3a8>
 800fec6:	9b01      	ldr	r3, [sp, #4]
 800fec8:	454b      	cmp	r3, r9
 800feca:	eba3 0209 	sub.w	r2, r3, r9
 800fece:	d124      	bne.n	800ff1a <_scanf_float+0x3c2>
 800fed0:	2200      	movs	r2, #0
 800fed2:	4659      	mov	r1, fp
 800fed4:	4640      	mov	r0, r8
 800fed6:	f000 ff79 	bl	8010dcc <_strtod_r>
 800feda:	9b03      	ldr	r3, [sp, #12]
 800fedc:	6821      	ldr	r1, [r4, #0]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f011 0f02 	tst.w	r1, #2
 800fee4:	ec57 6b10 	vmov	r6, r7, d0
 800fee8:	f103 0204 	add.w	r2, r3, #4
 800feec:	d020      	beq.n	800ff30 <_scanf_float+0x3d8>
 800feee:	9903      	ldr	r1, [sp, #12]
 800fef0:	600a      	str	r2, [r1, #0]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	e9c3 6700 	strd	r6, r7, [r3]
 800fef8:	68e3      	ldr	r3, [r4, #12]
 800fefa:	3301      	adds	r3, #1
 800fefc:	60e3      	str	r3, [r4, #12]
 800fefe:	e66c      	b.n	800fbda <_scanf_float+0x82>
 800ff00:	9b04      	ldr	r3, [sp, #16]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d0e4      	beq.n	800fed0 <_scanf_float+0x378>
 800ff06:	9905      	ldr	r1, [sp, #20]
 800ff08:	230a      	movs	r3, #10
 800ff0a:	462a      	mov	r2, r5
 800ff0c:	3101      	adds	r1, #1
 800ff0e:	4640      	mov	r0, r8
 800ff10:	f000 ffe6 	bl	8010ee0 <_strtol_r>
 800ff14:	9b04      	ldr	r3, [sp, #16]
 800ff16:	9e05      	ldr	r6, [sp, #20]
 800ff18:	1ac2      	subs	r2, r0, r3
 800ff1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ff1e:	429e      	cmp	r6, r3
 800ff20:	bf28      	it	cs
 800ff22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ff26:	4912      	ldr	r1, [pc, #72]	; (800ff70 <_scanf_float+0x418>)
 800ff28:	4630      	mov	r0, r6
 800ff2a:	f000 f909 	bl	8010140 <siprintf>
 800ff2e:	e7cf      	b.n	800fed0 <_scanf_float+0x378>
 800ff30:	f011 0f04 	tst.w	r1, #4
 800ff34:	9903      	ldr	r1, [sp, #12]
 800ff36:	600a      	str	r2, [r1, #0]
 800ff38:	d1db      	bne.n	800fef2 <_scanf_float+0x39a>
 800ff3a:	f8d3 8000 	ldr.w	r8, [r3]
 800ff3e:	ee10 2a10 	vmov	r2, s0
 800ff42:	ee10 0a10 	vmov	r0, s0
 800ff46:	463b      	mov	r3, r7
 800ff48:	4639      	mov	r1, r7
 800ff4a:	f7f0 fdff 	bl	8000b4c <__aeabi_dcmpun>
 800ff4e:	b128      	cbz	r0, 800ff5c <_scanf_float+0x404>
 800ff50:	4808      	ldr	r0, [pc, #32]	; (800ff74 <_scanf_float+0x41c>)
 800ff52:	f000 f8ef 	bl	8010134 <nanf>
 800ff56:	ed88 0a00 	vstr	s0, [r8]
 800ff5a:	e7cd      	b.n	800fef8 <_scanf_float+0x3a0>
 800ff5c:	4630      	mov	r0, r6
 800ff5e:	4639      	mov	r1, r7
 800ff60:	f7f0 fe52 	bl	8000c08 <__aeabi_d2f>
 800ff64:	f8c8 0000 	str.w	r0, [r8]
 800ff68:	e7c6      	b.n	800fef8 <_scanf_float+0x3a0>
 800ff6a:	2500      	movs	r5, #0
 800ff6c:	e635      	b.n	800fbda <_scanf_float+0x82>
 800ff6e:	bf00      	nop
 800ff70:	08015540 	.word	0x08015540
 800ff74:	080159b8 	.word	0x080159b8

0800ff78 <iprintf>:
 800ff78:	b40f      	push	{r0, r1, r2, r3}
 800ff7a:	4b0a      	ldr	r3, [pc, #40]	; (800ffa4 <iprintf+0x2c>)
 800ff7c:	b513      	push	{r0, r1, r4, lr}
 800ff7e:	681c      	ldr	r4, [r3, #0]
 800ff80:	b124      	cbz	r4, 800ff8c <iprintf+0x14>
 800ff82:	69a3      	ldr	r3, [r4, #24]
 800ff84:	b913      	cbnz	r3, 800ff8c <iprintf+0x14>
 800ff86:	4620      	mov	r0, r4
 800ff88:	f001 ff40 	bl	8011e0c <__sinit>
 800ff8c:	ab05      	add	r3, sp, #20
 800ff8e:	9a04      	ldr	r2, [sp, #16]
 800ff90:	68a1      	ldr	r1, [r4, #8]
 800ff92:	9301      	str	r3, [sp, #4]
 800ff94:	4620      	mov	r0, r4
 800ff96:	f003 fac5 	bl	8013524 <_vfiprintf_r>
 800ff9a:	b002      	add	sp, #8
 800ff9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffa0:	b004      	add	sp, #16
 800ffa2:	4770      	bx	lr
 800ffa4:	20000198 	.word	0x20000198

0800ffa8 <setvbuf>:
 800ffa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ffac:	461d      	mov	r5, r3
 800ffae:	4b5d      	ldr	r3, [pc, #372]	; (8010124 <setvbuf+0x17c>)
 800ffb0:	681f      	ldr	r7, [r3, #0]
 800ffb2:	4604      	mov	r4, r0
 800ffb4:	460e      	mov	r6, r1
 800ffb6:	4690      	mov	r8, r2
 800ffb8:	b127      	cbz	r7, 800ffc4 <setvbuf+0x1c>
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	b913      	cbnz	r3, 800ffc4 <setvbuf+0x1c>
 800ffbe:	4638      	mov	r0, r7
 800ffc0:	f001 ff24 	bl	8011e0c <__sinit>
 800ffc4:	4b58      	ldr	r3, [pc, #352]	; (8010128 <setvbuf+0x180>)
 800ffc6:	429c      	cmp	r4, r3
 800ffc8:	d167      	bne.n	801009a <setvbuf+0xf2>
 800ffca:	687c      	ldr	r4, [r7, #4]
 800ffcc:	f1b8 0f02 	cmp.w	r8, #2
 800ffd0:	d006      	beq.n	800ffe0 <setvbuf+0x38>
 800ffd2:	f1b8 0f01 	cmp.w	r8, #1
 800ffd6:	f200 809f 	bhi.w	8010118 <setvbuf+0x170>
 800ffda:	2d00      	cmp	r5, #0
 800ffdc:	f2c0 809c 	blt.w	8010118 <setvbuf+0x170>
 800ffe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffe2:	07db      	lsls	r3, r3, #31
 800ffe4:	d405      	bmi.n	800fff2 <setvbuf+0x4a>
 800ffe6:	89a3      	ldrh	r3, [r4, #12]
 800ffe8:	0598      	lsls	r0, r3, #22
 800ffea:	d402      	bmi.n	800fff2 <setvbuf+0x4a>
 800ffec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffee:	f002 fb1e 	bl	801262e <__retarget_lock_acquire_recursive>
 800fff2:	4621      	mov	r1, r4
 800fff4:	4638      	mov	r0, r7
 800fff6:	f001 fe75 	bl	8011ce4 <_fflush_r>
 800fffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fffc:	b141      	cbz	r1, 8010010 <setvbuf+0x68>
 800fffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010002:	4299      	cmp	r1, r3
 8010004:	d002      	beq.n	801000c <setvbuf+0x64>
 8010006:	4638      	mov	r0, r7
 8010008:	f003 f85c 	bl	80130c4 <_free_r>
 801000c:	2300      	movs	r3, #0
 801000e:	6363      	str	r3, [r4, #52]	; 0x34
 8010010:	2300      	movs	r3, #0
 8010012:	61a3      	str	r3, [r4, #24]
 8010014:	6063      	str	r3, [r4, #4]
 8010016:	89a3      	ldrh	r3, [r4, #12]
 8010018:	0619      	lsls	r1, r3, #24
 801001a:	d503      	bpl.n	8010024 <setvbuf+0x7c>
 801001c:	6921      	ldr	r1, [r4, #16]
 801001e:	4638      	mov	r0, r7
 8010020:	f003 f850 	bl	80130c4 <_free_r>
 8010024:	89a3      	ldrh	r3, [r4, #12]
 8010026:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801002a:	f023 0303 	bic.w	r3, r3, #3
 801002e:	f1b8 0f02 	cmp.w	r8, #2
 8010032:	81a3      	strh	r3, [r4, #12]
 8010034:	d06c      	beq.n	8010110 <setvbuf+0x168>
 8010036:	ab01      	add	r3, sp, #4
 8010038:	466a      	mov	r2, sp
 801003a:	4621      	mov	r1, r4
 801003c:	4638      	mov	r0, r7
 801003e:	f002 faf8 	bl	8012632 <__swhatbuf_r>
 8010042:	89a3      	ldrh	r3, [r4, #12]
 8010044:	4318      	orrs	r0, r3
 8010046:	81a0      	strh	r0, [r4, #12]
 8010048:	2d00      	cmp	r5, #0
 801004a:	d130      	bne.n	80100ae <setvbuf+0x106>
 801004c:	9d00      	ldr	r5, [sp, #0]
 801004e:	4628      	mov	r0, r5
 8010050:	f002 fb54 	bl	80126fc <malloc>
 8010054:	4606      	mov	r6, r0
 8010056:	2800      	cmp	r0, #0
 8010058:	d155      	bne.n	8010106 <setvbuf+0x15e>
 801005a:	f8dd 9000 	ldr.w	r9, [sp]
 801005e:	45a9      	cmp	r9, r5
 8010060:	d14a      	bne.n	80100f8 <setvbuf+0x150>
 8010062:	f04f 35ff 	mov.w	r5, #4294967295
 8010066:	2200      	movs	r2, #0
 8010068:	60a2      	str	r2, [r4, #8]
 801006a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801006e:	6022      	str	r2, [r4, #0]
 8010070:	6122      	str	r2, [r4, #16]
 8010072:	2201      	movs	r2, #1
 8010074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010078:	6162      	str	r2, [r4, #20]
 801007a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801007c:	f043 0302 	orr.w	r3, r3, #2
 8010080:	07d2      	lsls	r2, r2, #31
 8010082:	81a3      	strh	r3, [r4, #12]
 8010084:	d405      	bmi.n	8010092 <setvbuf+0xea>
 8010086:	f413 7f00 	tst.w	r3, #512	; 0x200
 801008a:	d102      	bne.n	8010092 <setvbuf+0xea>
 801008c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801008e:	f002 facf 	bl	8012630 <__retarget_lock_release_recursive>
 8010092:	4628      	mov	r0, r5
 8010094:	b003      	add	sp, #12
 8010096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801009a:	4b24      	ldr	r3, [pc, #144]	; (801012c <setvbuf+0x184>)
 801009c:	429c      	cmp	r4, r3
 801009e:	d101      	bne.n	80100a4 <setvbuf+0xfc>
 80100a0:	68bc      	ldr	r4, [r7, #8]
 80100a2:	e793      	b.n	800ffcc <setvbuf+0x24>
 80100a4:	4b22      	ldr	r3, [pc, #136]	; (8010130 <setvbuf+0x188>)
 80100a6:	429c      	cmp	r4, r3
 80100a8:	bf08      	it	eq
 80100aa:	68fc      	ldreq	r4, [r7, #12]
 80100ac:	e78e      	b.n	800ffcc <setvbuf+0x24>
 80100ae:	2e00      	cmp	r6, #0
 80100b0:	d0cd      	beq.n	801004e <setvbuf+0xa6>
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	b913      	cbnz	r3, 80100bc <setvbuf+0x114>
 80100b6:	4638      	mov	r0, r7
 80100b8:	f001 fea8 	bl	8011e0c <__sinit>
 80100bc:	f1b8 0f01 	cmp.w	r8, #1
 80100c0:	bf08      	it	eq
 80100c2:	89a3      	ldrheq	r3, [r4, #12]
 80100c4:	6026      	str	r6, [r4, #0]
 80100c6:	bf04      	itt	eq
 80100c8:	f043 0301 	orreq.w	r3, r3, #1
 80100cc:	81a3      	strheq	r3, [r4, #12]
 80100ce:	89a2      	ldrh	r2, [r4, #12]
 80100d0:	f012 0308 	ands.w	r3, r2, #8
 80100d4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80100d8:	d01c      	beq.n	8010114 <setvbuf+0x16c>
 80100da:	07d3      	lsls	r3, r2, #31
 80100dc:	bf41      	itttt	mi
 80100de:	2300      	movmi	r3, #0
 80100e0:	426d      	negmi	r5, r5
 80100e2:	60a3      	strmi	r3, [r4, #8]
 80100e4:	61a5      	strmi	r5, [r4, #24]
 80100e6:	bf58      	it	pl
 80100e8:	60a5      	strpl	r5, [r4, #8]
 80100ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80100ec:	f015 0501 	ands.w	r5, r5, #1
 80100f0:	d115      	bne.n	801011e <setvbuf+0x176>
 80100f2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80100f6:	e7c8      	b.n	801008a <setvbuf+0xe2>
 80100f8:	4648      	mov	r0, r9
 80100fa:	f002 faff 	bl	80126fc <malloc>
 80100fe:	4606      	mov	r6, r0
 8010100:	2800      	cmp	r0, #0
 8010102:	d0ae      	beq.n	8010062 <setvbuf+0xba>
 8010104:	464d      	mov	r5, r9
 8010106:	89a3      	ldrh	r3, [r4, #12]
 8010108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801010c:	81a3      	strh	r3, [r4, #12]
 801010e:	e7d0      	b.n	80100b2 <setvbuf+0x10a>
 8010110:	2500      	movs	r5, #0
 8010112:	e7a8      	b.n	8010066 <setvbuf+0xbe>
 8010114:	60a3      	str	r3, [r4, #8]
 8010116:	e7e8      	b.n	80100ea <setvbuf+0x142>
 8010118:	f04f 35ff 	mov.w	r5, #4294967295
 801011c:	e7b9      	b.n	8010092 <setvbuf+0xea>
 801011e:	2500      	movs	r5, #0
 8010120:	e7b7      	b.n	8010092 <setvbuf+0xea>
 8010122:	bf00      	nop
 8010124:	20000198 	.word	0x20000198
 8010128:	08015750 	.word	0x08015750
 801012c:	08015770 	.word	0x08015770
 8010130:	08015730 	.word	0x08015730

08010134 <nanf>:
 8010134:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801013c <nanf+0x8>
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	7fc00000 	.word	0x7fc00000

08010140 <siprintf>:
 8010140:	b40e      	push	{r1, r2, r3}
 8010142:	b500      	push	{lr}
 8010144:	b09c      	sub	sp, #112	; 0x70
 8010146:	ab1d      	add	r3, sp, #116	; 0x74
 8010148:	9002      	str	r0, [sp, #8]
 801014a:	9006      	str	r0, [sp, #24]
 801014c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010150:	4809      	ldr	r0, [pc, #36]	; (8010178 <siprintf+0x38>)
 8010152:	9107      	str	r1, [sp, #28]
 8010154:	9104      	str	r1, [sp, #16]
 8010156:	4909      	ldr	r1, [pc, #36]	; (801017c <siprintf+0x3c>)
 8010158:	f853 2b04 	ldr.w	r2, [r3], #4
 801015c:	9105      	str	r1, [sp, #20]
 801015e:	6800      	ldr	r0, [r0, #0]
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	a902      	add	r1, sp, #8
 8010164:	f003 f8b4 	bl	80132d0 <_svfiprintf_r>
 8010168:	9b02      	ldr	r3, [sp, #8]
 801016a:	2200      	movs	r2, #0
 801016c:	701a      	strb	r2, [r3, #0]
 801016e:	b01c      	add	sp, #112	; 0x70
 8010170:	f85d eb04 	ldr.w	lr, [sp], #4
 8010174:	b003      	add	sp, #12
 8010176:	4770      	bx	lr
 8010178:	20000198 	.word	0x20000198
 801017c:	ffff0208 	.word	0xffff0208

08010180 <sulp>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	4604      	mov	r4, r0
 8010184:	460d      	mov	r5, r1
 8010186:	ec45 4b10 	vmov	d0, r4, r5
 801018a:	4616      	mov	r6, r2
 801018c:	f002 fe3c 	bl	8012e08 <__ulp>
 8010190:	ec51 0b10 	vmov	r0, r1, d0
 8010194:	b17e      	cbz	r6, 80101b6 <sulp+0x36>
 8010196:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801019a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801019e:	2b00      	cmp	r3, #0
 80101a0:	dd09      	ble.n	80101b6 <sulp+0x36>
 80101a2:	051b      	lsls	r3, r3, #20
 80101a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80101a8:	2400      	movs	r4, #0
 80101aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80101ae:	4622      	mov	r2, r4
 80101b0:	462b      	mov	r3, r5
 80101b2:	f7f0 fa31 	bl	8000618 <__aeabi_dmul>
 80101b6:	bd70      	pop	{r4, r5, r6, pc}

080101b8 <_strtod_l>:
 80101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101bc:	b0a3      	sub	sp, #140	; 0x8c
 80101be:	461f      	mov	r7, r3
 80101c0:	2300      	movs	r3, #0
 80101c2:	931e      	str	r3, [sp, #120]	; 0x78
 80101c4:	4ba4      	ldr	r3, [pc, #656]	; (8010458 <_strtod_l+0x2a0>)
 80101c6:	9219      	str	r2, [sp, #100]	; 0x64
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	9307      	str	r3, [sp, #28]
 80101cc:	4604      	mov	r4, r0
 80101ce:	4618      	mov	r0, r3
 80101d0:	4688      	mov	r8, r1
 80101d2:	f7f0 f80d 	bl	80001f0 <strlen>
 80101d6:	f04f 0a00 	mov.w	sl, #0
 80101da:	4605      	mov	r5, r0
 80101dc:	f04f 0b00 	mov.w	fp, #0
 80101e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80101e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80101e6:	781a      	ldrb	r2, [r3, #0]
 80101e8:	2a2b      	cmp	r2, #43	; 0x2b
 80101ea:	d04c      	beq.n	8010286 <_strtod_l+0xce>
 80101ec:	d839      	bhi.n	8010262 <_strtod_l+0xaa>
 80101ee:	2a0d      	cmp	r2, #13
 80101f0:	d832      	bhi.n	8010258 <_strtod_l+0xa0>
 80101f2:	2a08      	cmp	r2, #8
 80101f4:	d832      	bhi.n	801025c <_strtod_l+0xa4>
 80101f6:	2a00      	cmp	r2, #0
 80101f8:	d03c      	beq.n	8010274 <_strtod_l+0xbc>
 80101fa:	2300      	movs	r3, #0
 80101fc:	930e      	str	r3, [sp, #56]	; 0x38
 80101fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010200:	7833      	ldrb	r3, [r6, #0]
 8010202:	2b30      	cmp	r3, #48	; 0x30
 8010204:	f040 80b4 	bne.w	8010370 <_strtod_l+0x1b8>
 8010208:	7873      	ldrb	r3, [r6, #1]
 801020a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801020e:	2b58      	cmp	r3, #88	; 0x58
 8010210:	d16c      	bne.n	80102ec <_strtod_l+0x134>
 8010212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	ab1e      	add	r3, sp, #120	; 0x78
 8010218:	9702      	str	r7, [sp, #8]
 801021a:	9300      	str	r3, [sp, #0]
 801021c:	4a8f      	ldr	r2, [pc, #572]	; (801045c <_strtod_l+0x2a4>)
 801021e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010220:	a91d      	add	r1, sp, #116	; 0x74
 8010222:	4620      	mov	r0, r4
 8010224:	f001 fef6 	bl	8012014 <__gethex>
 8010228:	f010 0707 	ands.w	r7, r0, #7
 801022c:	4605      	mov	r5, r0
 801022e:	d005      	beq.n	801023c <_strtod_l+0x84>
 8010230:	2f06      	cmp	r7, #6
 8010232:	d12a      	bne.n	801028a <_strtod_l+0xd2>
 8010234:	3601      	adds	r6, #1
 8010236:	2300      	movs	r3, #0
 8010238:	961d      	str	r6, [sp, #116]	; 0x74
 801023a:	930e      	str	r3, [sp, #56]	; 0x38
 801023c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801023e:	2b00      	cmp	r3, #0
 8010240:	f040 8596 	bne.w	8010d70 <_strtod_l+0xbb8>
 8010244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010246:	b1db      	cbz	r3, 8010280 <_strtod_l+0xc8>
 8010248:	4652      	mov	r2, sl
 801024a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801024e:	ec43 2b10 	vmov	d0, r2, r3
 8010252:	b023      	add	sp, #140	; 0x8c
 8010254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010258:	2a20      	cmp	r2, #32
 801025a:	d1ce      	bne.n	80101fa <_strtod_l+0x42>
 801025c:	3301      	adds	r3, #1
 801025e:	931d      	str	r3, [sp, #116]	; 0x74
 8010260:	e7c0      	b.n	80101e4 <_strtod_l+0x2c>
 8010262:	2a2d      	cmp	r2, #45	; 0x2d
 8010264:	d1c9      	bne.n	80101fa <_strtod_l+0x42>
 8010266:	2201      	movs	r2, #1
 8010268:	920e      	str	r2, [sp, #56]	; 0x38
 801026a:	1c5a      	adds	r2, r3, #1
 801026c:	921d      	str	r2, [sp, #116]	; 0x74
 801026e:	785b      	ldrb	r3, [r3, #1]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d1c4      	bne.n	80101fe <_strtod_l+0x46>
 8010274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010276:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801027a:	2b00      	cmp	r3, #0
 801027c:	f040 8576 	bne.w	8010d6c <_strtod_l+0xbb4>
 8010280:	4652      	mov	r2, sl
 8010282:	465b      	mov	r3, fp
 8010284:	e7e3      	b.n	801024e <_strtod_l+0x96>
 8010286:	2200      	movs	r2, #0
 8010288:	e7ee      	b.n	8010268 <_strtod_l+0xb0>
 801028a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801028c:	b13a      	cbz	r2, 801029e <_strtod_l+0xe6>
 801028e:	2135      	movs	r1, #53	; 0x35
 8010290:	a820      	add	r0, sp, #128	; 0x80
 8010292:	f002 fec4 	bl	801301e <__copybits>
 8010296:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010298:	4620      	mov	r0, r4
 801029a:	f002 fa89 	bl	80127b0 <_Bfree>
 801029e:	3f01      	subs	r7, #1
 80102a0:	2f05      	cmp	r7, #5
 80102a2:	d807      	bhi.n	80102b4 <_strtod_l+0xfc>
 80102a4:	e8df f007 	tbb	[pc, r7]
 80102a8:	1d180b0e 	.word	0x1d180b0e
 80102ac:	030e      	.short	0x030e
 80102ae:	f04f 0b00 	mov.w	fp, #0
 80102b2:	46da      	mov	sl, fp
 80102b4:	0728      	lsls	r0, r5, #28
 80102b6:	d5c1      	bpl.n	801023c <_strtod_l+0x84>
 80102b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80102bc:	e7be      	b.n	801023c <_strtod_l+0x84>
 80102be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80102c2:	e7f7      	b.n	80102b4 <_strtod_l+0xfc>
 80102c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80102c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80102ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80102ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80102d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80102d6:	e7ed      	b.n	80102b4 <_strtod_l+0xfc>
 80102d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010460 <_strtod_l+0x2a8>
 80102dc:	f04f 0a00 	mov.w	sl, #0
 80102e0:	e7e8      	b.n	80102b4 <_strtod_l+0xfc>
 80102e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80102e6:	f04f 3aff 	mov.w	sl, #4294967295
 80102ea:	e7e3      	b.n	80102b4 <_strtod_l+0xfc>
 80102ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80102ee:	1c5a      	adds	r2, r3, #1
 80102f0:	921d      	str	r2, [sp, #116]	; 0x74
 80102f2:	785b      	ldrb	r3, [r3, #1]
 80102f4:	2b30      	cmp	r3, #48	; 0x30
 80102f6:	d0f9      	beq.n	80102ec <_strtod_l+0x134>
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d09f      	beq.n	801023c <_strtod_l+0x84>
 80102fc:	2301      	movs	r3, #1
 80102fe:	f04f 0900 	mov.w	r9, #0
 8010302:	9304      	str	r3, [sp, #16]
 8010304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010306:	930a      	str	r3, [sp, #40]	; 0x28
 8010308:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801030c:	464f      	mov	r7, r9
 801030e:	220a      	movs	r2, #10
 8010310:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010312:	7806      	ldrb	r6, [r0, #0]
 8010314:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010318:	b2d9      	uxtb	r1, r3
 801031a:	2909      	cmp	r1, #9
 801031c:	d92a      	bls.n	8010374 <_strtod_l+0x1bc>
 801031e:	9907      	ldr	r1, [sp, #28]
 8010320:	462a      	mov	r2, r5
 8010322:	f003 fa8c 	bl	801383e <strncmp>
 8010326:	b398      	cbz	r0, 8010390 <_strtod_l+0x1d8>
 8010328:	2000      	movs	r0, #0
 801032a:	4633      	mov	r3, r6
 801032c:	463d      	mov	r5, r7
 801032e:	9007      	str	r0, [sp, #28]
 8010330:	4602      	mov	r2, r0
 8010332:	2b65      	cmp	r3, #101	; 0x65
 8010334:	d001      	beq.n	801033a <_strtod_l+0x182>
 8010336:	2b45      	cmp	r3, #69	; 0x45
 8010338:	d118      	bne.n	801036c <_strtod_l+0x1b4>
 801033a:	b91d      	cbnz	r5, 8010344 <_strtod_l+0x18c>
 801033c:	9b04      	ldr	r3, [sp, #16]
 801033e:	4303      	orrs	r3, r0
 8010340:	d098      	beq.n	8010274 <_strtod_l+0xbc>
 8010342:	2500      	movs	r5, #0
 8010344:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010348:	f108 0301 	add.w	r3, r8, #1
 801034c:	931d      	str	r3, [sp, #116]	; 0x74
 801034e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010352:	2b2b      	cmp	r3, #43	; 0x2b
 8010354:	d075      	beq.n	8010442 <_strtod_l+0x28a>
 8010356:	2b2d      	cmp	r3, #45	; 0x2d
 8010358:	d07b      	beq.n	8010452 <_strtod_l+0x29a>
 801035a:	f04f 0c00 	mov.w	ip, #0
 801035e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010362:	2909      	cmp	r1, #9
 8010364:	f240 8082 	bls.w	801046c <_strtod_l+0x2b4>
 8010368:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801036c:	2600      	movs	r6, #0
 801036e:	e09d      	b.n	80104ac <_strtod_l+0x2f4>
 8010370:	2300      	movs	r3, #0
 8010372:	e7c4      	b.n	80102fe <_strtod_l+0x146>
 8010374:	2f08      	cmp	r7, #8
 8010376:	bfd8      	it	le
 8010378:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801037a:	f100 0001 	add.w	r0, r0, #1
 801037e:	bfda      	itte	le
 8010380:	fb02 3301 	mlale	r3, r2, r1, r3
 8010384:	9309      	strle	r3, [sp, #36]	; 0x24
 8010386:	fb02 3909 	mlagt	r9, r2, r9, r3
 801038a:	3701      	adds	r7, #1
 801038c:	901d      	str	r0, [sp, #116]	; 0x74
 801038e:	e7bf      	b.n	8010310 <_strtod_l+0x158>
 8010390:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010392:	195a      	adds	r2, r3, r5
 8010394:	921d      	str	r2, [sp, #116]	; 0x74
 8010396:	5d5b      	ldrb	r3, [r3, r5]
 8010398:	2f00      	cmp	r7, #0
 801039a:	d037      	beq.n	801040c <_strtod_l+0x254>
 801039c:	9007      	str	r0, [sp, #28]
 801039e:	463d      	mov	r5, r7
 80103a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80103a4:	2a09      	cmp	r2, #9
 80103a6:	d912      	bls.n	80103ce <_strtod_l+0x216>
 80103a8:	2201      	movs	r2, #1
 80103aa:	e7c2      	b.n	8010332 <_strtod_l+0x17a>
 80103ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80103ae:	1c5a      	adds	r2, r3, #1
 80103b0:	921d      	str	r2, [sp, #116]	; 0x74
 80103b2:	785b      	ldrb	r3, [r3, #1]
 80103b4:	3001      	adds	r0, #1
 80103b6:	2b30      	cmp	r3, #48	; 0x30
 80103b8:	d0f8      	beq.n	80103ac <_strtod_l+0x1f4>
 80103ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80103be:	2a08      	cmp	r2, #8
 80103c0:	f200 84db 	bhi.w	8010d7a <_strtod_l+0xbc2>
 80103c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80103c6:	9007      	str	r0, [sp, #28]
 80103c8:	2000      	movs	r0, #0
 80103ca:	920a      	str	r2, [sp, #40]	; 0x28
 80103cc:	4605      	mov	r5, r0
 80103ce:	3b30      	subs	r3, #48	; 0x30
 80103d0:	f100 0201 	add.w	r2, r0, #1
 80103d4:	d014      	beq.n	8010400 <_strtod_l+0x248>
 80103d6:	9907      	ldr	r1, [sp, #28]
 80103d8:	4411      	add	r1, r2
 80103da:	9107      	str	r1, [sp, #28]
 80103dc:	462a      	mov	r2, r5
 80103de:	eb00 0e05 	add.w	lr, r0, r5
 80103e2:	210a      	movs	r1, #10
 80103e4:	4572      	cmp	r2, lr
 80103e6:	d113      	bne.n	8010410 <_strtod_l+0x258>
 80103e8:	182a      	adds	r2, r5, r0
 80103ea:	2a08      	cmp	r2, #8
 80103ec:	f105 0501 	add.w	r5, r5, #1
 80103f0:	4405      	add	r5, r0
 80103f2:	dc1c      	bgt.n	801042e <_strtod_l+0x276>
 80103f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103f6:	220a      	movs	r2, #10
 80103f8:	fb02 3301 	mla	r3, r2, r1, r3
 80103fc:	9309      	str	r3, [sp, #36]	; 0x24
 80103fe:	2200      	movs	r2, #0
 8010400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010402:	1c59      	adds	r1, r3, #1
 8010404:	911d      	str	r1, [sp, #116]	; 0x74
 8010406:	785b      	ldrb	r3, [r3, #1]
 8010408:	4610      	mov	r0, r2
 801040a:	e7c9      	b.n	80103a0 <_strtod_l+0x1e8>
 801040c:	4638      	mov	r0, r7
 801040e:	e7d2      	b.n	80103b6 <_strtod_l+0x1fe>
 8010410:	2a08      	cmp	r2, #8
 8010412:	dc04      	bgt.n	801041e <_strtod_l+0x266>
 8010414:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010416:	434e      	muls	r6, r1
 8010418:	9609      	str	r6, [sp, #36]	; 0x24
 801041a:	3201      	adds	r2, #1
 801041c:	e7e2      	b.n	80103e4 <_strtod_l+0x22c>
 801041e:	f102 0c01 	add.w	ip, r2, #1
 8010422:	f1bc 0f10 	cmp.w	ip, #16
 8010426:	bfd8      	it	le
 8010428:	fb01 f909 	mulle.w	r9, r1, r9
 801042c:	e7f5      	b.n	801041a <_strtod_l+0x262>
 801042e:	2d10      	cmp	r5, #16
 8010430:	bfdc      	itt	le
 8010432:	220a      	movle	r2, #10
 8010434:	fb02 3909 	mlale	r9, r2, r9, r3
 8010438:	e7e1      	b.n	80103fe <_strtod_l+0x246>
 801043a:	2300      	movs	r3, #0
 801043c:	9307      	str	r3, [sp, #28]
 801043e:	2201      	movs	r2, #1
 8010440:	e77c      	b.n	801033c <_strtod_l+0x184>
 8010442:	f04f 0c00 	mov.w	ip, #0
 8010446:	f108 0302 	add.w	r3, r8, #2
 801044a:	931d      	str	r3, [sp, #116]	; 0x74
 801044c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010450:	e785      	b.n	801035e <_strtod_l+0x1a6>
 8010452:	f04f 0c01 	mov.w	ip, #1
 8010456:	e7f6      	b.n	8010446 <_strtod_l+0x28e>
 8010458:	080157fc 	.word	0x080157fc
 801045c:	08015548 	.word	0x08015548
 8010460:	7ff00000 	.word	0x7ff00000
 8010464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010466:	1c59      	adds	r1, r3, #1
 8010468:	911d      	str	r1, [sp, #116]	; 0x74
 801046a:	785b      	ldrb	r3, [r3, #1]
 801046c:	2b30      	cmp	r3, #48	; 0x30
 801046e:	d0f9      	beq.n	8010464 <_strtod_l+0x2ac>
 8010470:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010474:	2908      	cmp	r1, #8
 8010476:	f63f af79 	bhi.w	801036c <_strtod_l+0x1b4>
 801047a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801047e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010480:	9308      	str	r3, [sp, #32]
 8010482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010484:	1c59      	adds	r1, r3, #1
 8010486:	911d      	str	r1, [sp, #116]	; 0x74
 8010488:	785b      	ldrb	r3, [r3, #1]
 801048a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801048e:	2e09      	cmp	r6, #9
 8010490:	d937      	bls.n	8010502 <_strtod_l+0x34a>
 8010492:	9e08      	ldr	r6, [sp, #32]
 8010494:	1b89      	subs	r1, r1, r6
 8010496:	2908      	cmp	r1, #8
 8010498:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801049c:	dc02      	bgt.n	80104a4 <_strtod_l+0x2ec>
 801049e:	4576      	cmp	r6, lr
 80104a0:	bfa8      	it	ge
 80104a2:	4676      	movge	r6, lr
 80104a4:	f1bc 0f00 	cmp.w	ip, #0
 80104a8:	d000      	beq.n	80104ac <_strtod_l+0x2f4>
 80104aa:	4276      	negs	r6, r6
 80104ac:	2d00      	cmp	r5, #0
 80104ae:	d14f      	bne.n	8010550 <_strtod_l+0x398>
 80104b0:	9904      	ldr	r1, [sp, #16]
 80104b2:	4301      	orrs	r1, r0
 80104b4:	f47f aec2 	bne.w	801023c <_strtod_l+0x84>
 80104b8:	2a00      	cmp	r2, #0
 80104ba:	f47f aedb 	bne.w	8010274 <_strtod_l+0xbc>
 80104be:	2b69      	cmp	r3, #105	; 0x69
 80104c0:	d027      	beq.n	8010512 <_strtod_l+0x35a>
 80104c2:	dc24      	bgt.n	801050e <_strtod_l+0x356>
 80104c4:	2b49      	cmp	r3, #73	; 0x49
 80104c6:	d024      	beq.n	8010512 <_strtod_l+0x35a>
 80104c8:	2b4e      	cmp	r3, #78	; 0x4e
 80104ca:	f47f aed3 	bne.w	8010274 <_strtod_l+0xbc>
 80104ce:	499e      	ldr	r1, [pc, #632]	; (8010748 <_strtod_l+0x590>)
 80104d0:	a81d      	add	r0, sp, #116	; 0x74
 80104d2:	f001 fff7 	bl	80124c4 <__match>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f43f aecc 	beq.w	8010274 <_strtod_l+0xbc>
 80104dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	2b28      	cmp	r3, #40	; 0x28
 80104e2:	d12d      	bne.n	8010540 <_strtod_l+0x388>
 80104e4:	4999      	ldr	r1, [pc, #612]	; (801074c <_strtod_l+0x594>)
 80104e6:	aa20      	add	r2, sp, #128	; 0x80
 80104e8:	a81d      	add	r0, sp, #116	; 0x74
 80104ea:	f001 ffff 	bl	80124ec <__hexnan>
 80104ee:	2805      	cmp	r0, #5
 80104f0:	d126      	bne.n	8010540 <_strtod_l+0x388>
 80104f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80104f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80104fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010500:	e69c      	b.n	801023c <_strtod_l+0x84>
 8010502:	210a      	movs	r1, #10
 8010504:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010508:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801050c:	e7b9      	b.n	8010482 <_strtod_l+0x2ca>
 801050e:	2b6e      	cmp	r3, #110	; 0x6e
 8010510:	e7db      	b.n	80104ca <_strtod_l+0x312>
 8010512:	498f      	ldr	r1, [pc, #572]	; (8010750 <_strtod_l+0x598>)
 8010514:	a81d      	add	r0, sp, #116	; 0x74
 8010516:	f001 ffd5 	bl	80124c4 <__match>
 801051a:	2800      	cmp	r0, #0
 801051c:	f43f aeaa 	beq.w	8010274 <_strtod_l+0xbc>
 8010520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010522:	498c      	ldr	r1, [pc, #560]	; (8010754 <_strtod_l+0x59c>)
 8010524:	3b01      	subs	r3, #1
 8010526:	a81d      	add	r0, sp, #116	; 0x74
 8010528:	931d      	str	r3, [sp, #116]	; 0x74
 801052a:	f001 ffcb 	bl	80124c4 <__match>
 801052e:	b910      	cbnz	r0, 8010536 <_strtod_l+0x37e>
 8010530:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010532:	3301      	adds	r3, #1
 8010534:	931d      	str	r3, [sp, #116]	; 0x74
 8010536:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010764 <_strtod_l+0x5ac>
 801053a:	f04f 0a00 	mov.w	sl, #0
 801053e:	e67d      	b.n	801023c <_strtod_l+0x84>
 8010540:	4885      	ldr	r0, [pc, #532]	; (8010758 <_strtod_l+0x5a0>)
 8010542:	f003 f921 	bl	8013788 <nan>
 8010546:	ed8d 0b04 	vstr	d0, [sp, #16]
 801054a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801054e:	e675      	b.n	801023c <_strtod_l+0x84>
 8010550:	9b07      	ldr	r3, [sp, #28]
 8010552:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010554:	1af3      	subs	r3, r6, r3
 8010556:	2f00      	cmp	r7, #0
 8010558:	bf08      	it	eq
 801055a:	462f      	moveq	r7, r5
 801055c:	2d10      	cmp	r5, #16
 801055e:	9308      	str	r3, [sp, #32]
 8010560:	46a8      	mov	r8, r5
 8010562:	bfa8      	it	ge
 8010564:	f04f 0810 	movge.w	r8, #16
 8010568:	f7ef ffdc 	bl	8000524 <__aeabi_ui2d>
 801056c:	2d09      	cmp	r5, #9
 801056e:	4682      	mov	sl, r0
 8010570:	468b      	mov	fp, r1
 8010572:	dd13      	ble.n	801059c <_strtod_l+0x3e4>
 8010574:	4b79      	ldr	r3, [pc, #484]	; (801075c <_strtod_l+0x5a4>)
 8010576:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801057a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801057e:	f7f0 f84b 	bl	8000618 <__aeabi_dmul>
 8010582:	4682      	mov	sl, r0
 8010584:	4648      	mov	r0, r9
 8010586:	468b      	mov	fp, r1
 8010588:	f7ef ffcc 	bl	8000524 <__aeabi_ui2d>
 801058c:	4602      	mov	r2, r0
 801058e:	460b      	mov	r3, r1
 8010590:	4650      	mov	r0, sl
 8010592:	4659      	mov	r1, fp
 8010594:	f7ef fe8a 	bl	80002ac <__adddf3>
 8010598:	4682      	mov	sl, r0
 801059a:	468b      	mov	fp, r1
 801059c:	2d0f      	cmp	r5, #15
 801059e:	dc38      	bgt.n	8010612 <_strtod_l+0x45a>
 80105a0:	9b08      	ldr	r3, [sp, #32]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	f43f ae4a 	beq.w	801023c <_strtod_l+0x84>
 80105a8:	dd24      	ble.n	80105f4 <_strtod_l+0x43c>
 80105aa:	2b16      	cmp	r3, #22
 80105ac:	dc0b      	bgt.n	80105c6 <_strtod_l+0x40e>
 80105ae:	4d6b      	ldr	r5, [pc, #428]	; (801075c <_strtod_l+0x5a4>)
 80105b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80105b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80105b8:	4652      	mov	r2, sl
 80105ba:	465b      	mov	r3, fp
 80105bc:	f7f0 f82c 	bl	8000618 <__aeabi_dmul>
 80105c0:	4682      	mov	sl, r0
 80105c2:	468b      	mov	fp, r1
 80105c4:	e63a      	b.n	801023c <_strtod_l+0x84>
 80105c6:	9a08      	ldr	r2, [sp, #32]
 80105c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80105cc:	4293      	cmp	r3, r2
 80105ce:	db20      	blt.n	8010612 <_strtod_l+0x45a>
 80105d0:	4c62      	ldr	r4, [pc, #392]	; (801075c <_strtod_l+0x5a4>)
 80105d2:	f1c5 050f 	rsb	r5, r5, #15
 80105d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80105da:	4652      	mov	r2, sl
 80105dc:	465b      	mov	r3, fp
 80105de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105e2:	f7f0 f819 	bl	8000618 <__aeabi_dmul>
 80105e6:	9b08      	ldr	r3, [sp, #32]
 80105e8:	1b5d      	subs	r5, r3, r5
 80105ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80105ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80105f2:	e7e3      	b.n	80105bc <_strtod_l+0x404>
 80105f4:	9b08      	ldr	r3, [sp, #32]
 80105f6:	3316      	adds	r3, #22
 80105f8:	db0b      	blt.n	8010612 <_strtod_l+0x45a>
 80105fa:	9b07      	ldr	r3, [sp, #28]
 80105fc:	4a57      	ldr	r2, [pc, #348]	; (801075c <_strtod_l+0x5a4>)
 80105fe:	1b9e      	subs	r6, r3, r6
 8010600:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010608:	4650      	mov	r0, sl
 801060a:	4659      	mov	r1, fp
 801060c:	f7f0 f92e 	bl	800086c <__aeabi_ddiv>
 8010610:	e7d6      	b.n	80105c0 <_strtod_l+0x408>
 8010612:	9b08      	ldr	r3, [sp, #32]
 8010614:	eba5 0808 	sub.w	r8, r5, r8
 8010618:	4498      	add	r8, r3
 801061a:	f1b8 0f00 	cmp.w	r8, #0
 801061e:	dd71      	ble.n	8010704 <_strtod_l+0x54c>
 8010620:	f018 030f 	ands.w	r3, r8, #15
 8010624:	d00a      	beq.n	801063c <_strtod_l+0x484>
 8010626:	494d      	ldr	r1, [pc, #308]	; (801075c <_strtod_l+0x5a4>)
 8010628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801062c:	4652      	mov	r2, sl
 801062e:	465b      	mov	r3, fp
 8010630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010634:	f7ef fff0 	bl	8000618 <__aeabi_dmul>
 8010638:	4682      	mov	sl, r0
 801063a:	468b      	mov	fp, r1
 801063c:	f038 080f 	bics.w	r8, r8, #15
 8010640:	d04d      	beq.n	80106de <_strtod_l+0x526>
 8010642:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010646:	dd22      	ble.n	801068e <_strtod_l+0x4d6>
 8010648:	2500      	movs	r5, #0
 801064a:	462e      	mov	r6, r5
 801064c:	9509      	str	r5, [sp, #36]	; 0x24
 801064e:	9507      	str	r5, [sp, #28]
 8010650:	2322      	movs	r3, #34	; 0x22
 8010652:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010764 <_strtod_l+0x5ac>
 8010656:	6023      	str	r3, [r4, #0]
 8010658:	f04f 0a00 	mov.w	sl, #0
 801065c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801065e:	2b00      	cmp	r3, #0
 8010660:	f43f adec 	beq.w	801023c <_strtod_l+0x84>
 8010664:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010666:	4620      	mov	r0, r4
 8010668:	f002 f8a2 	bl	80127b0 <_Bfree>
 801066c:	9907      	ldr	r1, [sp, #28]
 801066e:	4620      	mov	r0, r4
 8010670:	f002 f89e 	bl	80127b0 <_Bfree>
 8010674:	4631      	mov	r1, r6
 8010676:	4620      	mov	r0, r4
 8010678:	f002 f89a 	bl	80127b0 <_Bfree>
 801067c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801067e:	4620      	mov	r0, r4
 8010680:	f002 f896 	bl	80127b0 <_Bfree>
 8010684:	4629      	mov	r1, r5
 8010686:	4620      	mov	r0, r4
 8010688:	f002 f892 	bl	80127b0 <_Bfree>
 801068c:	e5d6      	b.n	801023c <_strtod_l+0x84>
 801068e:	2300      	movs	r3, #0
 8010690:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010694:	4650      	mov	r0, sl
 8010696:	4659      	mov	r1, fp
 8010698:	4699      	mov	r9, r3
 801069a:	f1b8 0f01 	cmp.w	r8, #1
 801069e:	dc21      	bgt.n	80106e4 <_strtod_l+0x52c>
 80106a0:	b10b      	cbz	r3, 80106a6 <_strtod_l+0x4ee>
 80106a2:	4682      	mov	sl, r0
 80106a4:	468b      	mov	fp, r1
 80106a6:	4b2e      	ldr	r3, [pc, #184]	; (8010760 <_strtod_l+0x5a8>)
 80106a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80106ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80106b0:	4652      	mov	r2, sl
 80106b2:	465b      	mov	r3, fp
 80106b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80106b8:	f7ef ffae 	bl	8000618 <__aeabi_dmul>
 80106bc:	4b29      	ldr	r3, [pc, #164]	; (8010764 <_strtod_l+0x5ac>)
 80106be:	460a      	mov	r2, r1
 80106c0:	400b      	ands	r3, r1
 80106c2:	4929      	ldr	r1, [pc, #164]	; (8010768 <_strtod_l+0x5b0>)
 80106c4:	428b      	cmp	r3, r1
 80106c6:	4682      	mov	sl, r0
 80106c8:	d8be      	bhi.n	8010648 <_strtod_l+0x490>
 80106ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80106ce:	428b      	cmp	r3, r1
 80106d0:	bf86      	itte	hi
 80106d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801076c <_strtod_l+0x5b4>
 80106d6:	f04f 3aff 	movhi.w	sl, #4294967295
 80106da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80106de:	2300      	movs	r3, #0
 80106e0:	9304      	str	r3, [sp, #16]
 80106e2:	e081      	b.n	80107e8 <_strtod_l+0x630>
 80106e4:	f018 0f01 	tst.w	r8, #1
 80106e8:	d007      	beq.n	80106fa <_strtod_l+0x542>
 80106ea:	4b1d      	ldr	r3, [pc, #116]	; (8010760 <_strtod_l+0x5a8>)
 80106ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80106f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f4:	f7ef ff90 	bl	8000618 <__aeabi_dmul>
 80106f8:	2301      	movs	r3, #1
 80106fa:	f109 0901 	add.w	r9, r9, #1
 80106fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010702:	e7ca      	b.n	801069a <_strtod_l+0x4e2>
 8010704:	d0eb      	beq.n	80106de <_strtod_l+0x526>
 8010706:	f1c8 0800 	rsb	r8, r8, #0
 801070a:	f018 020f 	ands.w	r2, r8, #15
 801070e:	d00a      	beq.n	8010726 <_strtod_l+0x56e>
 8010710:	4b12      	ldr	r3, [pc, #72]	; (801075c <_strtod_l+0x5a4>)
 8010712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010716:	4650      	mov	r0, sl
 8010718:	4659      	mov	r1, fp
 801071a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071e:	f7f0 f8a5 	bl	800086c <__aeabi_ddiv>
 8010722:	4682      	mov	sl, r0
 8010724:	468b      	mov	fp, r1
 8010726:	ea5f 1828 	movs.w	r8, r8, asr #4
 801072a:	d0d8      	beq.n	80106de <_strtod_l+0x526>
 801072c:	f1b8 0f1f 	cmp.w	r8, #31
 8010730:	dd1e      	ble.n	8010770 <_strtod_l+0x5b8>
 8010732:	2500      	movs	r5, #0
 8010734:	462e      	mov	r6, r5
 8010736:	9509      	str	r5, [sp, #36]	; 0x24
 8010738:	9507      	str	r5, [sp, #28]
 801073a:	2322      	movs	r3, #34	; 0x22
 801073c:	f04f 0a00 	mov.w	sl, #0
 8010740:	f04f 0b00 	mov.w	fp, #0
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	e789      	b.n	801065c <_strtod_l+0x4a4>
 8010748:	08015519 	.word	0x08015519
 801074c:	0801555c 	.word	0x0801555c
 8010750:	08015511 	.word	0x08015511
 8010754:	0801569c 	.word	0x0801569c
 8010758:	080159b8 	.word	0x080159b8
 801075c:	08015898 	.word	0x08015898
 8010760:	08015870 	.word	0x08015870
 8010764:	7ff00000 	.word	0x7ff00000
 8010768:	7ca00000 	.word	0x7ca00000
 801076c:	7fefffff 	.word	0x7fefffff
 8010770:	f018 0310 	ands.w	r3, r8, #16
 8010774:	bf18      	it	ne
 8010776:	236a      	movne	r3, #106	; 0x6a
 8010778:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010b30 <_strtod_l+0x978>
 801077c:	9304      	str	r3, [sp, #16]
 801077e:	4650      	mov	r0, sl
 8010780:	4659      	mov	r1, fp
 8010782:	2300      	movs	r3, #0
 8010784:	f018 0f01 	tst.w	r8, #1
 8010788:	d004      	beq.n	8010794 <_strtod_l+0x5dc>
 801078a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801078e:	f7ef ff43 	bl	8000618 <__aeabi_dmul>
 8010792:	2301      	movs	r3, #1
 8010794:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010798:	f109 0908 	add.w	r9, r9, #8
 801079c:	d1f2      	bne.n	8010784 <_strtod_l+0x5cc>
 801079e:	b10b      	cbz	r3, 80107a4 <_strtod_l+0x5ec>
 80107a0:	4682      	mov	sl, r0
 80107a2:	468b      	mov	fp, r1
 80107a4:	9b04      	ldr	r3, [sp, #16]
 80107a6:	b1bb      	cbz	r3, 80107d8 <_strtod_l+0x620>
 80107a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80107ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	4659      	mov	r1, fp
 80107b4:	dd10      	ble.n	80107d8 <_strtod_l+0x620>
 80107b6:	2b1f      	cmp	r3, #31
 80107b8:	f340 8128 	ble.w	8010a0c <_strtod_l+0x854>
 80107bc:	2b34      	cmp	r3, #52	; 0x34
 80107be:	bfde      	ittt	le
 80107c0:	3b20      	suble	r3, #32
 80107c2:	f04f 32ff 	movle.w	r2, #4294967295
 80107c6:	fa02 f303 	lslle.w	r3, r2, r3
 80107ca:	f04f 0a00 	mov.w	sl, #0
 80107ce:	bfcc      	ite	gt
 80107d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80107d4:	ea03 0b01 	andle.w	fp, r3, r1
 80107d8:	2200      	movs	r2, #0
 80107da:	2300      	movs	r3, #0
 80107dc:	4650      	mov	r0, sl
 80107de:	4659      	mov	r1, fp
 80107e0:	f7f0 f982 	bl	8000ae8 <__aeabi_dcmpeq>
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d1a4      	bne.n	8010732 <_strtod_l+0x57a>
 80107e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80107ee:	462b      	mov	r3, r5
 80107f0:	463a      	mov	r2, r7
 80107f2:	4620      	mov	r0, r4
 80107f4:	f002 f848 	bl	8012888 <__s2b>
 80107f8:	9009      	str	r0, [sp, #36]	; 0x24
 80107fa:	2800      	cmp	r0, #0
 80107fc:	f43f af24 	beq.w	8010648 <_strtod_l+0x490>
 8010800:	9b07      	ldr	r3, [sp, #28]
 8010802:	1b9e      	subs	r6, r3, r6
 8010804:	9b08      	ldr	r3, [sp, #32]
 8010806:	2b00      	cmp	r3, #0
 8010808:	bfb4      	ite	lt
 801080a:	4633      	movlt	r3, r6
 801080c:	2300      	movge	r3, #0
 801080e:	9310      	str	r3, [sp, #64]	; 0x40
 8010810:	9b08      	ldr	r3, [sp, #32]
 8010812:	2500      	movs	r5, #0
 8010814:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010818:	9318      	str	r3, [sp, #96]	; 0x60
 801081a:	462e      	mov	r6, r5
 801081c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801081e:	4620      	mov	r0, r4
 8010820:	6859      	ldr	r1, [r3, #4]
 8010822:	f001 ff85 	bl	8012730 <_Balloc>
 8010826:	9007      	str	r0, [sp, #28]
 8010828:	2800      	cmp	r0, #0
 801082a:	f43f af11 	beq.w	8010650 <_strtod_l+0x498>
 801082e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010830:	691a      	ldr	r2, [r3, #16]
 8010832:	3202      	adds	r2, #2
 8010834:	f103 010c 	add.w	r1, r3, #12
 8010838:	0092      	lsls	r2, r2, #2
 801083a:	300c      	adds	r0, #12
 801083c:	f7fe fd0c 	bl	800f258 <memcpy>
 8010840:	ec4b ab10 	vmov	d0, sl, fp
 8010844:	aa20      	add	r2, sp, #128	; 0x80
 8010846:	a91f      	add	r1, sp, #124	; 0x7c
 8010848:	4620      	mov	r0, r4
 801084a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801084e:	f002 fb57 	bl	8012f00 <__d2b>
 8010852:	901e      	str	r0, [sp, #120]	; 0x78
 8010854:	2800      	cmp	r0, #0
 8010856:	f43f aefb 	beq.w	8010650 <_strtod_l+0x498>
 801085a:	2101      	movs	r1, #1
 801085c:	4620      	mov	r0, r4
 801085e:	f002 f8ad 	bl	80129bc <__i2b>
 8010862:	4606      	mov	r6, r0
 8010864:	2800      	cmp	r0, #0
 8010866:	f43f aef3 	beq.w	8010650 <_strtod_l+0x498>
 801086a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801086c:	9904      	ldr	r1, [sp, #16]
 801086e:	2b00      	cmp	r3, #0
 8010870:	bfab      	itete	ge
 8010872:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010874:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010876:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010878:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801087c:	bfac      	ite	ge
 801087e:	eb03 0902 	addge.w	r9, r3, r2
 8010882:	1ad7      	sublt	r7, r2, r3
 8010884:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010886:	eba3 0801 	sub.w	r8, r3, r1
 801088a:	4490      	add	r8, r2
 801088c:	4ba3      	ldr	r3, [pc, #652]	; (8010b1c <_strtod_l+0x964>)
 801088e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010892:	4598      	cmp	r8, r3
 8010894:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010898:	f280 80cc 	bge.w	8010a34 <_strtod_l+0x87c>
 801089c:	eba3 0308 	sub.w	r3, r3, r8
 80108a0:	2b1f      	cmp	r3, #31
 80108a2:	eba2 0203 	sub.w	r2, r2, r3
 80108a6:	f04f 0101 	mov.w	r1, #1
 80108aa:	f300 80b6 	bgt.w	8010a1a <_strtod_l+0x862>
 80108ae:	fa01 f303 	lsl.w	r3, r1, r3
 80108b2:	9311      	str	r3, [sp, #68]	; 0x44
 80108b4:	2300      	movs	r3, #0
 80108b6:	930c      	str	r3, [sp, #48]	; 0x30
 80108b8:	eb09 0802 	add.w	r8, r9, r2
 80108bc:	9b04      	ldr	r3, [sp, #16]
 80108be:	45c1      	cmp	r9, r8
 80108c0:	4417      	add	r7, r2
 80108c2:	441f      	add	r7, r3
 80108c4:	464b      	mov	r3, r9
 80108c6:	bfa8      	it	ge
 80108c8:	4643      	movge	r3, r8
 80108ca:	42bb      	cmp	r3, r7
 80108cc:	bfa8      	it	ge
 80108ce:	463b      	movge	r3, r7
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	bfc2      	ittt	gt
 80108d4:	eba8 0803 	subgt.w	r8, r8, r3
 80108d8:	1aff      	subgt	r7, r7, r3
 80108da:	eba9 0903 	subgt.w	r9, r9, r3
 80108de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	dd17      	ble.n	8010914 <_strtod_l+0x75c>
 80108e4:	4631      	mov	r1, r6
 80108e6:	461a      	mov	r2, r3
 80108e8:	4620      	mov	r0, r4
 80108ea:	f002 f923 	bl	8012b34 <__pow5mult>
 80108ee:	4606      	mov	r6, r0
 80108f0:	2800      	cmp	r0, #0
 80108f2:	f43f aead 	beq.w	8010650 <_strtod_l+0x498>
 80108f6:	4601      	mov	r1, r0
 80108f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80108fa:	4620      	mov	r0, r4
 80108fc:	f002 f874 	bl	80129e8 <__multiply>
 8010900:	900f      	str	r0, [sp, #60]	; 0x3c
 8010902:	2800      	cmp	r0, #0
 8010904:	f43f aea4 	beq.w	8010650 <_strtod_l+0x498>
 8010908:	991e      	ldr	r1, [sp, #120]	; 0x78
 801090a:	4620      	mov	r0, r4
 801090c:	f001 ff50 	bl	80127b0 <_Bfree>
 8010910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010912:	931e      	str	r3, [sp, #120]	; 0x78
 8010914:	f1b8 0f00 	cmp.w	r8, #0
 8010918:	f300 8091 	bgt.w	8010a3e <_strtod_l+0x886>
 801091c:	9b08      	ldr	r3, [sp, #32]
 801091e:	2b00      	cmp	r3, #0
 8010920:	dd08      	ble.n	8010934 <_strtod_l+0x77c>
 8010922:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010924:	9907      	ldr	r1, [sp, #28]
 8010926:	4620      	mov	r0, r4
 8010928:	f002 f904 	bl	8012b34 <__pow5mult>
 801092c:	9007      	str	r0, [sp, #28]
 801092e:	2800      	cmp	r0, #0
 8010930:	f43f ae8e 	beq.w	8010650 <_strtod_l+0x498>
 8010934:	2f00      	cmp	r7, #0
 8010936:	dd08      	ble.n	801094a <_strtod_l+0x792>
 8010938:	9907      	ldr	r1, [sp, #28]
 801093a:	463a      	mov	r2, r7
 801093c:	4620      	mov	r0, r4
 801093e:	f002 f953 	bl	8012be8 <__lshift>
 8010942:	9007      	str	r0, [sp, #28]
 8010944:	2800      	cmp	r0, #0
 8010946:	f43f ae83 	beq.w	8010650 <_strtod_l+0x498>
 801094a:	f1b9 0f00 	cmp.w	r9, #0
 801094e:	dd08      	ble.n	8010962 <_strtod_l+0x7aa>
 8010950:	4631      	mov	r1, r6
 8010952:	464a      	mov	r2, r9
 8010954:	4620      	mov	r0, r4
 8010956:	f002 f947 	bl	8012be8 <__lshift>
 801095a:	4606      	mov	r6, r0
 801095c:	2800      	cmp	r0, #0
 801095e:	f43f ae77 	beq.w	8010650 <_strtod_l+0x498>
 8010962:	9a07      	ldr	r2, [sp, #28]
 8010964:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010966:	4620      	mov	r0, r4
 8010968:	f002 f9c6 	bl	8012cf8 <__mdiff>
 801096c:	4605      	mov	r5, r0
 801096e:	2800      	cmp	r0, #0
 8010970:	f43f ae6e 	beq.w	8010650 <_strtod_l+0x498>
 8010974:	68c3      	ldr	r3, [r0, #12]
 8010976:	930f      	str	r3, [sp, #60]	; 0x3c
 8010978:	2300      	movs	r3, #0
 801097a:	60c3      	str	r3, [r0, #12]
 801097c:	4631      	mov	r1, r6
 801097e:	f002 f99f 	bl	8012cc0 <__mcmp>
 8010982:	2800      	cmp	r0, #0
 8010984:	da65      	bge.n	8010a52 <_strtod_l+0x89a>
 8010986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010988:	ea53 030a 	orrs.w	r3, r3, sl
 801098c:	f040 8087 	bne.w	8010a9e <_strtod_l+0x8e6>
 8010990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010994:	2b00      	cmp	r3, #0
 8010996:	f040 8082 	bne.w	8010a9e <_strtod_l+0x8e6>
 801099a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801099e:	0d1b      	lsrs	r3, r3, #20
 80109a0:	051b      	lsls	r3, r3, #20
 80109a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80109a6:	d97a      	bls.n	8010a9e <_strtod_l+0x8e6>
 80109a8:	696b      	ldr	r3, [r5, #20]
 80109aa:	b913      	cbnz	r3, 80109b2 <_strtod_l+0x7fa>
 80109ac:	692b      	ldr	r3, [r5, #16]
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	dd75      	ble.n	8010a9e <_strtod_l+0x8e6>
 80109b2:	4629      	mov	r1, r5
 80109b4:	2201      	movs	r2, #1
 80109b6:	4620      	mov	r0, r4
 80109b8:	f002 f916 	bl	8012be8 <__lshift>
 80109bc:	4631      	mov	r1, r6
 80109be:	4605      	mov	r5, r0
 80109c0:	f002 f97e 	bl	8012cc0 <__mcmp>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	dd6a      	ble.n	8010a9e <_strtod_l+0x8e6>
 80109c8:	9904      	ldr	r1, [sp, #16]
 80109ca:	4a55      	ldr	r2, [pc, #340]	; (8010b20 <_strtod_l+0x968>)
 80109cc:	465b      	mov	r3, fp
 80109ce:	2900      	cmp	r1, #0
 80109d0:	f000 8085 	beq.w	8010ade <_strtod_l+0x926>
 80109d4:	ea02 010b 	and.w	r1, r2, fp
 80109d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80109dc:	dc7f      	bgt.n	8010ade <_strtod_l+0x926>
 80109de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80109e2:	f77f aeaa 	ble.w	801073a <_strtod_l+0x582>
 80109e6:	4a4f      	ldr	r2, [pc, #316]	; (8010b24 <_strtod_l+0x96c>)
 80109e8:	2300      	movs	r3, #0
 80109ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80109ee:	4650      	mov	r0, sl
 80109f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80109f4:	4659      	mov	r1, fp
 80109f6:	f7ef fe0f 	bl	8000618 <__aeabi_dmul>
 80109fa:	460b      	mov	r3, r1
 80109fc:	4303      	orrs	r3, r0
 80109fe:	bf08      	it	eq
 8010a00:	2322      	moveq	r3, #34	; 0x22
 8010a02:	4682      	mov	sl, r0
 8010a04:	468b      	mov	fp, r1
 8010a06:	bf08      	it	eq
 8010a08:	6023      	streq	r3, [r4, #0]
 8010a0a:	e62b      	b.n	8010664 <_strtod_l+0x4ac>
 8010a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a10:	fa02 f303 	lsl.w	r3, r2, r3
 8010a14:	ea03 0a0a 	and.w	sl, r3, sl
 8010a18:	e6de      	b.n	80107d8 <_strtod_l+0x620>
 8010a1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010a1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010a22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010a26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010a2a:	fa01 f308 	lsl.w	r3, r1, r8
 8010a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8010a30:	9111      	str	r1, [sp, #68]	; 0x44
 8010a32:	e741      	b.n	80108b8 <_strtod_l+0x700>
 8010a34:	2300      	movs	r3, #0
 8010a36:	930c      	str	r3, [sp, #48]	; 0x30
 8010a38:	2301      	movs	r3, #1
 8010a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8010a3c:	e73c      	b.n	80108b8 <_strtod_l+0x700>
 8010a3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010a40:	4642      	mov	r2, r8
 8010a42:	4620      	mov	r0, r4
 8010a44:	f002 f8d0 	bl	8012be8 <__lshift>
 8010a48:	901e      	str	r0, [sp, #120]	; 0x78
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	f47f af66 	bne.w	801091c <_strtod_l+0x764>
 8010a50:	e5fe      	b.n	8010650 <_strtod_l+0x498>
 8010a52:	465f      	mov	r7, fp
 8010a54:	d16e      	bne.n	8010b34 <_strtod_l+0x97c>
 8010a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a5c:	b342      	cbz	r2, 8010ab0 <_strtod_l+0x8f8>
 8010a5e:	4a32      	ldr	r2, [pc, #200]	; (8010b28 <_strtod_l+0x970>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d128      	bne.n	8010ab6 <_strtod_l+0x8fe>
 8010a64:	9b04      	ldr	r3, [sp, #16]
 8010a66:	4650      	mov	r0, sl
 8010a68:	b1eb      	cbz	r3, 8010aa6 <_strtod_l+0x8ee>
 8010a6a:	4a2d      	ldr	r2, [pc, #180]	; (8010b20 <_strtod_l+0x968>)
 8010a6c:	403a      	ands	r2, r7
 8010a6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010a72:	f04f 31ff 	mov.w	r1, #4294967295
 8010a76:	d819      	bhi.n	8010aac <_strtod_l+0x8f4>
 8010a78:	0d12      	lsrs	r2, r2, #20
 8010a7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8010a82:	4298      	cmp	r0, r3
 8010a84:	d117      	bne.n	8010ab6 <_strtod_l+0x8fe>
 8010a86:	4b29      	ldr	r3, [pc, #164]	; (8010b2c <_strtod_l+0x974>)
 8010a88:	429f      	cmp	r7, r3
 8010a8a:	d102      	bne.n	8010a92 <_strtod_l+0x8da>
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	f43f addf 	beq.w	8010650 <_strtod_l+0x498>
 8010a92:	4b23      	ldr	r3, [pc, #140]	; (8010b20 <_strtod_l+0x968>)
 8010a94:	403b      	ands	r3, r7
 8010a96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010a9a:	f04f 0a00 	mov.w	sl, #0
 8010a9e:	9b04      	ldr	r3, [sp, #16]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d1a0      	bne.n	80109e6 <_strtod_l+0x82e>
 8010aa4:	e5de      	b.n	8010664 <_strtod_l+0x4ac>
 8010aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8010aaa:	e7ea      	b.n	8010a82 <_strtod_l+0x8ca>
 8010aac:	460b      	mov	r3, r1
 8010aae:	e7e8      	b.n	8010a82 <_strtod_l+0x8ca>
 8010ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8010ab4:	d088      	beq.n	80109c8 <_strtod_l+0x810>
 8010ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ab8:	b1db      	cbz	r3, 8010af2 <_strtod_l+0x93a>
 8010aba:	423b      	tst	r3, r7
 8010abc:	d0ef      	beq.n	8010a9e <_strtod_l+0x8e6>
 8010abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ac0:	9a04      	ldr	r2, [sp, #16]
 8010ac2:	4650      	mov	r0, sl
 8010ac4:	4659      	mov	r1, fp
 8010ac6:	b1c3      	cbz	r3, 8010afa <_strtod_l+0x942>
 8010ac8:	f7ff fb5a 	bl	8010180 <sulp>
 8010acc:	4602      	mov	r2, r0
 8010ace:	460b      	mov	r3, r1
 8010ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010ad4:	f7ef fbea 	bl	80002ac <__adddf3>
 8010ad8:	4682      	mov	sl, r0
 8010ada:	468b      	mov	fp, r1
 8010adc:	e7df      	b.n	8010a9e <_strtod_l+0x8e6>
 8010ade:	4013      	ands	r3, r2
 8010ae0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010ae4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010ae8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010aec:	f04f 3aff 	mov.w	sl, #4294967295
 8010af0:	e7d5      	b.n	8010a9e <_strtod_l+0x8e6>
 8010af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010af4:	ea13 0f0a 	tst.w	r3, sl
 8010af8:	e7e0      	b.n	8010abc <_strtod_l+0x904>
 8010afa:	f7ff fb41 	bl	8010180 <sulp>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b06:	f7ef fbcf 	bl	80002a8 <__aeabi_dsub>
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	4682      	mov	sl, r0
 8010b10:	468b      	mov	fp, r1
 8010b12:	f7ef ffe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	d0c1      	beq.n	8010a9e <_strtod_l+0x8e6>
 8010b1a:	e60e      	b.n	801073a <_strtod_l+0x582>
 8010b1c:	fffffc02 	.word	0xfffffc02
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	39500000 	.word	0x39500000
 8010b28:	000fffff 	.word	0x000fffff
 8010b2c:	7fefffff 	.word	0x7fefffff
 8010b30:	08015570 	.word	0x08015570
 8010b34:	4631      	mov	r1, r6
 8010b36:	4628      	mov	r0, r5
 8010b38:	f002 fa3e 	bl	8012fb8 <__ratio>
 8010b3c:	ec59 8b10 	vmov	r8, r9, d0
 8010b40:	ee10 0a10 	vmov	r0, s0
 8010b44:	2200      	movs	r2, #0
 8010b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b4a:	4649      	mov	r1, r9
 8010b4c:	f7ef ffe0 	bl	8000b10 <__aeabi_dcmple>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d07c      	beq.n	8010c4e <_strtod_l+0xa96>
 8010b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d04c      	beq.n	8010bf4 <_strtod_l+0xa3c>
 8010b5a:	4b95      	ldr	r3, [pc, #596]	; (8010db0 <_strtod_l+0xbf8>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010b62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010db0 <_strtod_l+0xbf8>
 8010b66:	f04f 0800 	mov.w	r8, #0
 8010b6a:	4b92      	ldr	r3, [pc, #584]	; (8010db4 <_strtod_l+0xbfc>)
 8010b6c:	403b      	ands	r3, r7
 8010b6e:	9311      	str	r3, [sp, #68]	; 0x44
 8010b70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010b72:	4b91      	ldr	r3, [pc, #580]	; (8010db8 <_strtod_l+0xc00>)
 8010b74:	429a      	cmp	r2, r3
 8010b76:	f040 80b2 	bne.w	8010cde <_strtod_l+0xb26>
 8010b7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010b82:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010b86:	ec4b ab10 	vmov	d0, sl, fp
 8010b8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010b8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010b92:	f002 f939 	bl	8012e08 <__ulp>
 8010b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010b9a:	ec53 2b10 	vmov	r2, r3, d0
 8010b9e:	f7ef fd3b 	bl	8000618 <__aeabi_dmul>
 8010ba2:	4652      	mov	r2, sl
 8010ba4:	465b      	mov	r3, fp
 8010ba6:	f7ef fb81 	bl	80002ac <__adddf3>
 8010baa:	460b      	mov	r3, r1
 8010bac:	4981      	ldr	r1, [pc, #516]	; (8010db4 <_strtod_l+0xbfc>)
 8010bae:	4a83      	ldr	r2, [pc, #524]	; (8010dbc <_strtod_l+0xc04>)
 8010bb0:	4019      	ands	r1, r3
 8010bb2:	4291      	cmp	r1, r2
 8010bb4:	4682      	mov	sl, r0
 8010bb6:	d95e      	bls.n	8010c76 <_strtod_l+0xabe>
 8010bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d103      	bne.n	8010bca <_strtod_l+0xa12>
 8010bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	f43f ad43 	beq.w	8010650 <_strtod_l+0x498>
 8010bca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010dc8 <_strtod_l+0xc10>
 8010bce:	f04f 3aff 	mov.w	sl, #4294967295
 8010bd2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f001 fdeb 	bl	80127b0 <_Bfree>
 8010bda:	9907      	ldr	r1, [sp, #28]
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f001 fde7 	bl	80127b0 <_Bfree>
 8010be2:	4631      	mov	r1, r6
 8010be4:	4620      	mov	r0, r4
 8010be6:	f001 fde3 	bl	80127b0 <_Bfree>
 8010bea:	4629      	mov	r1, r5
 8010bec:	4620      	mov	r0, r4
 8010bee:	f001 fddf 	bl	80127b0 <_Bfree>
 8010bf2:	e613      	b.n	801081c <_strtod_l+0x664>
 8010bf4:	f1ba 0f00 	cmp.w	sl, #0
 8010bf8:	d11b      	bne.n	8010c32 <_strtod_l+0xa7a>
 8010bfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bfe:	b9f3      	cbnz	r3, 8010c3e <_strtod_l+0xa86>
 8010c00:	4b6b      	ldr	r3, [pc, #428]	; (8010db0 <_strtod_l+0xbf8>)
 8010c02:	2200      	movs	r2, #0
 8010c04:	4640      	mov	r0, r8
 8010c06:	4649      	mov	r1, r9
 8010c08:	f7ef ff78 	bl	8000afc <__aeabi_dcmplt>
 8010c0c:	b9d0      	cbnz	r0, 8010c44 <_strtod_l+0xa8c>
 8010c0e:	4640      	mov	r0, r8
 8010c10:	4649      	mov	r1, r9
 8010c12:	4b6b      	ldr	r3, [pc, #428]	; (8010dc0 <_strtod_l+0xc08>)
 8010c14:	2200      	movs	r2, #0
 8010c16:	f7ef fcff 	bl	8000618 <__aeabi_dmul>
 8010c1a:	4680      	mov	r8, r0
 8010c1c:	4689      	mov	r9, r1
 8010c1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010c22:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010c26:	931b      	str	r3, [sp, #108]	; 0x6c
 8010c28:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010c2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010c30:	e79b      	b.n	8010b6a <_strtod_l+0x9b2>
 8010c32:	f1ba 0f01 	cmp.w	sl, #1
 8010c36:	d102      	bne.n	8010c3e <_strtod_l+0xa86>
 8010c38:	2f00      	cmp	r7, #0
 8010c3a:	f43f ad7e 	beq.w	801073a <_strtod_l+0x582>
 8010c3e:	4b61      	ldr	r3, [pc, #388]	; (8010dc4 <_strtod_l+0xc0c>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	e78c      	b.n	8010b5e <_strtod_l+0x9a6>
 8010c44:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010dc0 <_strtod_l+0xc08>
 8010c48:	f04f 0800 	mov.w	r8, #0
 8010c4c:	e7e7      	b.n	8010c1e <_strtod_l+0xa66>
 8010c4e:	4b5c      	ldr	r3, [pc, #368]	; (8010dc0 <_strtod_l+0xc08>)
 8010c50:	4640      	mov	r0, r8
 8010c52:	4649      	mov	r1, r9
 8010c54:	2200      	movs	r2, #0
 8010c56:	f7ef fcdf 	bl	8000618 <__aeabi_dmul>
 8010c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c5c:	4680      	mov	r8, r0
 8010c5e:	4689      	mov	r9, r1
 8010c60:	b933      	cbnz	r3, 8010c70 <_strtod_l+0xab8>
 8010c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c66:	9012      	str	r0, [sp, #72]	; 0x48
 8010c68:	9313      	str	r3, [sp, #76]	; 0x4c
 8010c6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010c6e:	e7dd      	b.n	8010c2c <_strtod_l+0xa74>
 8010c70:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010c74:	e7f9      	b.n	8010c6a <_strtod_l+0xab2>
 8010c76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010c7a:	9b04      	ldr	r3, [sp, #16]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d1a8      	bne.n	8010bd2 <_strtod_l+0xa1a>
 8010c80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010c86:	0d1b      	lsrs	r3, r3, #20
 8010c88:	051b      	lsls	r3, r3, #20
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d1a1      	bne.n	8010bd2 <_strtod_l+0xa1a>
 8010c8e:	4640      	mov	r0, r8
 8010c90:	4649      	mov	r1, r9
 8010c92:	f7f0 f821 	bl	8000cd8 <__aeabi_d2lz>
 8010c96:	f7ef fc91 	bl	80005bc <__aeabi_l2d>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	4640      	mov	r0, r8
 8010ca0:	4649      	mov	r1, r9
 8010ca2:	f7ef fb01 	bl	80002a8 <__aeabi_dsub>
 8010ca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010ca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cac:	ea43 030a 	orr.w	r3, r3, sl
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	4680      	mov	r8, r0
 8010cb4:	4689      	mov	r9, r1
 8010cb6:	d053      	beq.n	8010d60 <_strtod_l+0xba8>
 8010cb8:	a335      	add	r3, pc, #212	; (adr r3, 8010d90 <_strtod_l+0xbd8>)
 8010cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cbe:	f7ef ff1d 	bl	8000afc <__aeabi_dcmplt>
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	f47f acce 	bne.w	8010664 <_strtod_l+0x4ac>
 8010cc8:	a333      	add	r3, pc, #204	; (adr r3, 8010d98 <_strtod_l+0xbe0>)
 8010cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cce:	4640      	mov	r0, r8
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	f7ef ff31 	bl	8000b38 <__aeabi_dcmpgt>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	f43f af7b 	beq.w	8010bd2 <_strtod_l+0xa1a>
 8010cdc:	e4c2      	b.n	8010664 <_strtod_l+0x4ac>
 8010cde:	9b04      	ldr	r3, [sp, #16]
 8010ce0:	b333      	cbz	r3, 8010d30 <_strtod_l+0xb78>
 8010ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ce4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010ce8:	d822      	bhi.n	8010d30 <_strtod_l+0xb78>
 8010cea:	a32d      	add	r3, pc, #180	; (adr r3, 8010da0 <_strtod_l+0xbe8>)
 8010cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf0:	4640      	mov	r0, r8
 8010cf2:	4649      	mov	r1, r9
 8010cf4:	f7ef ff0c 	bl	8000b10 <__aeabi_dcmple>
 8010cf8:	b1a0      	cbz	r0, 8010d24 <_strtod_l+0xb6c>
 8010cfa:	4649      	mov	r1, r9
 8010cfc:	4640      	mov	r0, r8
 8010cfe:	f7ef ff63 	bl	8000bc8 <__aeabi_d2uiz>
 8010d02:	2801      	cmp	r0, #1
 8010d04:	bf38      	it	cc
 8010d06:	2001      	movcc	r0, #1
 8010d08:	f7ef fc0c 	bl	8000524 <__aeabi_ui2d>
 8010d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d0e:	4680      	mov	r8, r0
 8010d10:	4689      	mov	r9, r1
 8010d12:	bb13      	cbnz	r3, 8010d5a <_strtod_l+0xba2>
 8010d14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d18:	9014      	str	r0, [sp, #80]	; 0x50
 8010d1a:	9315      	str	r3, [sp, #84]	; 0x54
 8010d1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010d20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010d2c:	1a9b      	subs	r3, r3, r2
 8010d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8010d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d34:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010d38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010d3c:	f002 f864 	bl	8012e08 <__ulp>
 8010d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d44:	ec53 2b10 	vmov	r2, r3, d0
 8010d48:	f7ef fc66 	bl	8000618 <__aeabi_dmul>
 8010d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010d50:	f7ef faac 	bl	80002ac <__adddf3>
 8010d54:	4682      	mov	sl, r0
 8010d56:	468b      	mov	fp, r1
 8010d58:	e78f      	b.n	8010c7a <_strtod_l+0xac2>
 8010d5a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8010d5e:	e7dd      	b.n	8010d1c <_strtod_l+0xb64>
 8010d60:	a311      	add	r3, pc, #68	; (adr r3, 8010da8 <_strtod_l+0xbf0>)
 8010d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d66:	f7ef fec9 	bl	8000afc <__aeabi_dcmplt>
 8010d6a:	e7b4      	b.n	8010cd6 <_strtod_l+0xb1e>
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8010d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010d72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010d74:	6013      	str	r3, [r2, #0]
 8010d76:	f7ff ba65 	b.w	8010244 <_strtod_l+0x8c>
 8010d7a:	2b65      	cmp	r3, #101	; 0x65
 8010d7c:	f43f ab5d 	beq.w	801043a <_strtod_l+0x282>
 8010d80:	2b45      	cmp	r3, #69	; 0x45
 8010d82:	f43f ab5a 	beq.w	801043a <_strtod_l+0x282>
 8010d86:	2201      	movs	r2, #1
 8010d88:	f7ff bb92 	b.w	80104b0 <_strtod_l+0x2f8>
 8010d8c:	f3af 8000 	nop.w
 8010d90:	94a03595 	.word	0x94a03595
 8010d94:	3fdfffff 	.word	0x3fdfffff
 8010d98:	35afe535 	.word	0x35afe535
 8010d9c:	3fe00000 	.word	0x3fe00000
 8010da0:	ffc00000 	.word	0xffc00000
 8010da4:	41dfffff 	.word	0x41dfffff
 8010da8:	94a03595 	.word	0x94a03595
 8010dac:	3fcfffff 	.word	0x3fcfffff
 8010db0:	3ff00000 	.word	0x3ff00000
 8010db4:	7ff00000 	.word	0x7ff00000
 8010db8:	7fe00000 	.word	0x7fe00000
 8010dbc:	7c9fffff 	.word	0x7c9fffff
 8010dc0:	3fe00000 	.word	0x3fe00000
 8010dc4:	bff00000 	.word	0xbff00000
 8010dc8:	7fefffff 	.word	0x7fefffff

08010dcc <_strtod_r>:
 8010dcc:	4b01      	ldr	r3, [pc, #4]	; (8010dd4 <_strtod_r+0x8>)
 8010dce:	f7ff b9f3 	b.w	80101b8 <_strtod_l>
 8010dd2:	bf00      	nop
 8010dd4:	20000200 	.word	0x20000200

08010dd8 <_strtol_l.isra.0>:
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dde:	d001      	beq.n	8010de4 <_strtol_l.isra.0+0xc>
 8010de0:	2b24      	cmp	r3, #36	; 0x24
 8010de2:	d906      	bls.n	8010df2 <_strtol_l.isra.0+0x1a>
 8010de4:	f7fe fa0e 	bl	800f204 <__errno>
 8010de8:	2316      	movs	r3, #22
 8010dea:	6003      	str	r3, [r0, #0]
 8010dec:	2000      	movs	r0, #0
 8010dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010df2:	4f3a      	ldr	r7, [pc, #232]	; (8010edc <_strtol_l.isra.0+0x104>)
 8010df4:	468e      	mov	lr, r1
 8010df6:	4676      	mov	r6, lr
 8010df8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010dfc:	5de5      	ldrb	r5, [r4, r7]
 8010dfe:	f015 0508 	ands.w	r5, r5, #8
 8010e02:	d1f8      	bne.n	8010df6 <_strtol_l.isra.0+0x1e>
 8010e04:	2c2d      	cmp	r4, #45	; 0x2d
 8010e06:	d134      	bne.n	8010e72 <_strtol_l.isra.0+0x9a>
 8010e08:	f89e 4000 	ldrb.w	r4, [lr]
 8010e0c:	f04f 0801 	mov.w	r8, #1
 8010e10:	f106 0e02 	add.w	lr, r6, #2
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d05c      	beq.n	8010ed2 <_strtol_l.isra.0+0xfa>
 8010e18:	2b10      	cmp	r3, #16
 8010e1a:	d10c      	bne.n	8010e36 <_strtol_l.isra.0+0x5e>
 8010e1c:	2c30      	cmp	r4, #48	; 0x30
 8010e1e:	d10a      	bne.n	8010e36 <_strtol_l.isra.0+0x5e>
 8010e20:	f89e 4000 	ldrb.w	r4, [lr]
 8010e24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010e28:	2c58      	cmp	r4, #88	; 0x58
 8010e2a:	d14d      	bne.n	8010ec8 <_strtol_l.isra.0+0xf0>
 8010e2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010e30:	2310      	movs	r3, #16
 8010e32:	f10e 0e02 	add.w	lr, lr, #2
 8010e36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8010e3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010e3e:	2600      	movs	r6, #0
 8010e40:	fbbc f9f3 	udiv	r9, ip, r3
 8010e44:	4635      	mov	r5, r6
 8010e46:	fb03 ca19 	mls	sl, r3, r9, ip
 8010e4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8010e4e:	2f09      	cmp	r7, #9
 8010e50:	d818      	bhi.n	8010e84 <_strtol_l.isra.0+0xac>
 8010e52:	463c      	mov	r4, r7
 8010e54:	42a3      	cmp	r3, r4
 8010e56:	dd24      	ble.n	8010ea2 <_strtol_l.isra.0+0xca>
 8010e58:	2e00      	cmp	r6, #0
 8010e5a:	db1f      	blt.n	8010e9c <_strtol_l.isra.0+0xc4>
 8010e5c:	45a9      	cmp	r9, r5
 8010e5e:	d31d      	bcc.n	8010e9c <_strtol_l.isra.0+0xc4>
 8010e60:	d101      	bne.n	8010e66 <_strtol_l.isra.0+0x8e>
 8010e62:	45a2      	cmp	sl, r4
 8010e64:	db1a      	blt.n	8010e9c <_strtol_l.isra.0+0xc4>
 8010e66:	fb05 4503 	mla	r5, r5, r3, r4
 8010e6a:	2601      	movs	r6, #1
 8010e6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010e70:	e7eb      	b.n	8010e4a <_strtol_l.isra.0+0x72>
 8010e72:	2c2b      	cmp	r4, #43	; 0x2b
 8010e74:	bf08      	it	eq
 8010e76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8010e7a:	46a8      	mov	r8, r5
 8010e7c:	bf08      	it	eq
 8010e7e:	f106 0e02 	addeq.w	lr, r6, #2
 8010e82:	e7c7      	b.n	8010e14 <_strtol_l.isra.0+0x3c>
 8010e84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010e88:	2f19      	cmp	r7, #25
 8010e8a:	d801      	bhi.n	8010e90 <_strtol_l.isra.0+0xb8>
 8010e8c:	3c37      	subs	r4, #55	; 0x37
 8010e8e:	e7e1      	b.n	8010e54 <_strtol_l.isra.0+0x7c>
 8010e90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010e94:	2f19      	cmp	r7, #25
 8010e96:	d804      	bhi.n	8010ea2 <_strtol_l.isra.0+0xca>
 8010e98:	3c57      	subs	r4, #87	; 0x57
 8010e9a:	e7db      	b.n	8010e54 <_strtol_l.isra.0+0x7c>
 8010e9c:	f04f 36ff 	mov.w	r6, #4294967295
 8010ea0:	e7e4      	b.n	8010e6c <_strtol_l.isra.0+0x94>
 8010ea2:	2e00      	cmp	r6, #0
 8010ea4:	da05      	bge.n	8010eb2 <_strtol_l.isra.0+0xda>
 8010ea6:	2322      	movs	r3, #34	; 0x22
 8010ea8:	6003      	str	r3, [r0, #0]
 8010eaa:	4665      	mov	r5, ip
 8010eac:	b942      	cbnz	r2, 8010ec0 <_strtol_l.isra.0+0xe8>
 8010eae:	4628      	mov	r0, r5
 8010eb0:	e79d      	b.n	8010dee <_strtol_l.isra.0+0x16>
 8010eb2:	f1b8 0f00 	cmp.w	r8, #0
 8010eb6:	d000      	beq.n	8010eba <_strtol_l.isra.0+0xe2>
 8010eb8:	426d      	negs	r5, r5
 8010eba:	2a00      	cmp	r2, #0
 8010ebc:	d0f7      	beq.n	8010eae <_strtol_l.isra.0+0xd6>
 8010ebe:	b10e      	cbz	r6, 8010ec4 <_strtol_l.isra.0+0xec>
 8010ec0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8010ec4:	6011      	str	r1, [r2, #0]
 8010ec6:	e7f2      	b.n	8010eae <_strtol_l.isra.0+0xd6>
 8010ec8:	2430      	movs	r4, #48	; 0x30
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1b3      	bne.n	8010e36 <_strtol_l.isra.0+0x5e>
 8010ece:	2308      	movs	r3, #8
 8010ed0:	e7b1      	b.n	8010e36 <_strtol_l.isra.0+0x5e>
 8010ed2:	2c30      	cmp	r4, #48	; 0x30
 8010ed4:	d0a4      	beq.n	8010e20 <_strtol_l.isra.0+0x48>
 8010ed6:	230a      	movs	r3, #10
 8010ed8:	e7ad      	b.n	8010e36 <_strtol_l.isra.0+0x5e>
 8010eda:	bf00      	nop
 8010edc:	08015599 	.word	0x08015599

08010ee0 <_strtol_r>:
 8010ee0:	f7ff bf7a 	b.w	8010dd8 <_strtol_l.isra.0>

08010ee4 <quorem>:
 8010ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	6903      	ldr	r3, [r0, #16]
 8010eea:	690c      	ldr	r4, [r1, #16]
 8010eec:	42a3      	cmp	r3, r4
 8010eee:	4607      	mov	r7, r0
 8010ef0:	f2c0 8081 	blt.w	8010ff6 <quorem+0x112>
 8010ef4:	3c01      	subs	r4, #1
 8010ef6:	f101 0814 	add.w	r8, r1, #20
 8010efa:	f100 0514 	add.w	r5, r0, #20
 8010efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f02:	9301      	str	r3, [sp, #4]
 8010f04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010f14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f18:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f1c:	d331      	bcc.n	8010f82 <quorem+0x9e>
 8010f1e:	f04f 0e00 	mov.w	lr, #0
 8010f22:	4640      	mov	r0, r8
 8010f24:	46ac      	mov	ip, r5
 8010f26:	46f2      	mov	sl, lr
 8010f28:	f850 2b04 	ldr.w	r2, [r0], #4
 8010f2c:	b293      	uxth	r3, r2
 8010f2e:	fb06 e303 	mla	r3, r6, r3, lr
 8010f32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	ebaa 0303 	sub.w	r3, sl, r3
 8010f3c:	0c12      	lsrs	r2, r2, #16
 8010f3e:	f8dc a000 	ldr.w	sl, [ip]
 8010f42:	fb06 e202 	mla	r2, r6, r2, lr
 8010f46:	fa13 f38a 	uxtah	r3, r3, sl
 8010f4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010f4e:	fa1f fa82 	uxth.w	sl, r2
 8010f52:	f8dc 2000 	ldr.w	r2, [ip]
 8010f56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010f5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f64:	4581      	cmp	r9, r0
 8010f66:	f84c 3b04 	str.w	r3, [ip], #4
 8010f6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010f6e:	d2db      	bcs.n	8010f28 <quorem+0x44>
 8010f70:	f855 300b 	ldr.w	r3, [r5, fp]
 8010f74:	b92b      	cbnz	r3, 8010f82 <quorem+0x9e>
 8010f76:	9b01      	ldr	r3, [sp, #4]
 8010f78:	3b04      	subs	r3, #4
 8010f7a:	429d      	cmp	r5, r3
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	d32e      	bcc.n	8010fde <quorem+0xfa>
 8010f80:	613c      	str	r4, [r7, #16]
 8010f82:	4638      	mov	r0, r7
 8010f84:	f001 fe9c 	bl	8012cc0 <__mcmp>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	db24      	blt.n	8010fd6 <quorem+0xf2>
 8010f8c:	3601      	adds	r6, #1
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f04f 0c00 	mov.w	ip, #0
 8010f94:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f98:	f8d0 e000 	ldr.w	lr, [r0]
 8010f9c:	b293      	uxth	r3, r2
 8010f9e:	ebac 0303 	sub.w	r3, ip, r3
 8010fa2:	0c12      	lsrs	r2, r2, #16
 8010fa4:	fa13 f38e 	uxtah	r3, r3, lr
 8010fa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010fac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010fb6:	45c1      	cmp	r9, r8
 8010fb8:	f840 3b04 	str.w	r3, [r0], #4
 8010fbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010fc0:	d2e8      	bcs.n	8010f94 <quorem+0xb0>
 8010fc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fca:	b922      	cbnz	r2, 8010fd6 <quorem+0xf2>
 8010fcc:	3b04      	subs	r3, #4
 8010fce:	429d      	cmp	r5, r3
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	d30a      	bcc.n	8010fea <quorem+0x106>
 8010fd4:	613c      	str	r4, [r7, #16]
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	b003      	add	sp, #12
 8010fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fde:	6812      	ldr	r2, [r2, #0]
 8010fe0:	3b04      	subs	r3, #4
 8010fe2:	2a00      	cmp	r2, #0
 8010fe4:	d1cc      	bne.n	8010f80 <quorem+0x9c>
 8010fe6:	3c01      	subs	r4, #1
 8010fe8:	e7c7      	b.n	8010f7a <quorem+0x96>
 8010fea:	6812      	ldr	r2, [r2, #0]
 8010fec:	3b04      	subs	r3, #4
 8010fee:	2a00      	cmp	r2, #0
 8010ff0:	d1f0      	bne.n	8010fd4 <quorem+0xf0>
 8010ff2:	3c01      	subs	r4, #1
 8010ff4:	e7eb      	b.n	8010fce <quorem+0xea>
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	e7ee      	b.n	8010fd8 <quorem+0xf4>
 8010ffa:	0000      	movs	r0, r0
 8010ffc:	0000      	movs	r0, r0
	...

08011000 <_dtoa_r>:
 8011000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011004:	ed2d 8b02 	vpush	{d8}
 8011008:	ec57 6b10 	vmov	r6, r7, d0
 801100c:	b095      	sub	sp, #84	; 0x54
 801100e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011010:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011014:	9105      	str	r1, [sp, #20]
 8011016:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801101a:	4604      	mov	r4, r0
 801101c:	9209      	str	r2, [sp, #36]	; 0x24
 801101e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011020:	b975      	cbnz	r5, 8011040 <_dtoa_r+0x40>
 8011022:	2010      	movs	r0, #16
 8011024:	f001 fb6a 	bl	80126fc <malloc>
 8011028:	4602      	mov	r2, r0
 801102a:	6260      	str	r0, [r4, #36]	; 0x24
 801102c:	b920      	cbnz	r0, 8011038 <_dtoa_r+0x38>
 801102e:	4bb2      	ldr	r3, [pc, #712]	; (80112f8 <_dtoa_r+0x2f8>)
 8011030:	21ea      	movs	r1, #234	; 0xea
 8011032:	48b2      	ldr	r0, [pc, #712]	; (80112fc <_dtoa_r+0x2fc>)
 8011034:	f002 fcf6 	bl	8013a24 <__assert_func>
 8011038:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801103c:	6005      	str	r5, [r0, #0]
 801103e:	60c5      	str	r5, [r0, #12]
 8011040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011042:	6819      	ldr	r1, [r3, #0]
 8011044:	b151      	cbz	r1, 801105c <_dtoa_r+0x5c>
 8011046:	685a      	ldr	r2, [r3, #4]
 8011048:	604a      	str	r2, [r1, #4]
 801104a:	2301      	movs	r3, #1
 801104c:	4093      	lsls	r3, r2
 801104e:	608b      	str	r3, [r1, #8]
 8011050:	4620      	mov	r0, r4
 8011052:	f001 fbad 	bl	80127b0 <_Bfree>
 8011056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011058:	2200      	movs	r2, #0
 801105a:	601a      	str	r2, [r3, #0]
 801105c:	1e3b      	subs	r3, r7, #0
 801105e:	bfb9      	ittee	lt
 8011060:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011064:	9303      	strlt	r3, [sp, #12]
 8011066:	2300      	movge	r3, #0
 8011068:	f8c8 3000 	strge.w	r3, [r8]
 801106c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011070:	4ba3      	ldr	r3, [pc, #652]	; (8011300 <_dtoa_r+0x300>)
 8011072:	bfbc      	itt	lt
 8011074:	2201      	movlt	r2, #1
 8011076:	f8c8 2000 	strlt.w	r2, [r8]
 801107a:	ea33 0309 	bics.w	r3, r3, r9
 801107e:	d11b      	bne.n	80110b8 <_dtoa_r+0xb8>
 8011080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011082:	f242 730f 	movw	r3, #9999	; 0x270f
 8011086:	6013      	str	r3, [r2, #0]
 8011088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801108c:	4333      	orrs	r3, r6
 801108e:	f000 857a 	beq.w	8011b86 <_dtoa_r+0xb86>
 8011092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011094:	b963      	cbnz	r3, 80110b0 <_dtoa_r+0xb0>
 8011096:	4b9b      	ldr	r3, [pc, #620]	; (8011304 <_dtoa_r+0x304>)
 8011098:	e024      	b.n	80110e4 <_dtoa_r+0xe4>
 801109a:	4b9b      	ldr	r3, [pc, #620]	; (8011308 <_dtoa_r+0x308>)
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	3308      	adds	r3, #8
 80110a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80110a2:	6013      	str	r3, [r2, #0]
 80110a4:	9800      	ldr	r0, [sp, #0]
 80110a6:	b015      	add	sp, #84	; 0x54
 80110a8:	ecbd 8b02 	vpop	{d8}
 80110ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b0:	4b94      	ldr	r3, [pc, #592]	; (8011304 <_dtoa_r+0x304>)
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	3303      	adds	r3, #3
 80110b6:	e7f3      	b.n	80110a0 <_dtoa_r+0xa0>
 80110b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110bc:	2200      	movs	r2, #0
 80110be:	ec51 0b17 	vmov	r0, r1, d7
 80110c2:	2300      	movs	r3, #0
 80110c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80110c8:	f7ef fd0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80110cc:	4680      	mov	r8, r0
 80110ce:	b158      	cbz	r0, 80110e8 <_dtoa_r+0xe8>
 80110d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80110d2:	2301      	movs	r3, #1
 80110d4:	6013      	str	r3, [r2, #0]
 80110d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f000 8551 	beq.w	8011b80 <_dtoa_r+0xb80>
 80110de:	488b      	ldr	r0, [pc, #556]	; (801130c <_dtoa_r+0x30c>)
 80110e0:	6018      	str	r0, [r3, #0]
 80110e2:	1e43      	subs	r3, r0, #1
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	e7dd      	b.n	80110a4 <_dtoa_r+0xa4>
 80110e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80110ec:	aa12      	add	r2, sp, #72	; 0x48
 80110ee:	a913      	add	r1, sp, #76	; 0x4c
 80110f0:	4620      	mov	r0, r4
 80110f2:	f001 ff05 	bl	8012f00 <__d2b>
 80110f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80110fa:	4683      	mov	fp, r0
 80110fc:	2d00      	cmp	r5, #0
 80110fe:	d07c      	beq.n	80111fa <_dtoa_r+0x1fa>
 8011100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011102:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801110a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801110e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011112:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801111a:	4b7d      	ldr	r3, [pc, #500]	; (8011310 <_dtoa_r+0x310>)
 801111c:	2200      	movs	r2, #0
 801111e:	4630      	mov	r0, r6
 8011120:	4639      	mov	r1, r7
 8011122:	f7ef f8c1 	bl	80002a8 <__aeabi_dsub>
 8011126:	a36e      	add	r3, pc, #440	; (adr r3, 80112e0 <_dtoa_r+0x2e0>)
 8011128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112c:	f7ef fa74 	bl	8000618 <__aeabi_dmul>
 8011130:	a36d      	add	r3, pc, #436	; (adr r3, 80112e8 <_dtoa_r+0x2e8>)
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	f7ef f8b9 	bl	80002ac <__adddf3>
 801113a:	4606      	mov	r6, r0
 801113c:	4628      	mov	r0, r5
 801113e:	460f      	mov	r7, r1
 8011140:	f7ef fa00 	bl	8000544 <__aeabi_i2d>
 8011144:	a36a      	add	r3, pc, #424	; (adr r3, 80112f0 <_dtoa_r+0x2f0>)
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	f7ef fa65 	bl	8000618 <__aeabi_dmul>
 801114e:	4602      	mov	r2, r0
 8011150:	460b      	mov	r3, r1
 8011152:	4630      	mov	r0, r6
 8011154:	4639      	mov	r1, r7
 8011156:	f7ef f8a9 	bl	80002ac <__adddf3>
 801115a:	4606      	mov	r6, r0
 801115c:	460f      	mov	r7, r1
 801115e:	f7ef fd0b 	bl	8000b78 <__aeabi_d2iz>
 8011162:	2200      	movs	r2, #0
 8011164:	4682      	mov	sl, r0
 8011166:	2300      	movs	r3, #0
 8011168:	4630      	mov	r0, r6
 801116a:	4639      	mov	r1, r7
 801116c:	f7ef fcc6 	bl	8000afc <__aeabi_dcmplt>
 8011170:	b148      	cbz	r0, 8011186 <_dtoa_r+0x186>
 8011172:	4650      	mov	r0, sl
 8011174:	f7ef f9e6 	bl	8000544 <__aeabi_i2d>
 8011178:	4632      	mov	r2, r6
 801117a:	463b      	mov	r3, r7
 801117c:	f7ef fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8011180:	b908      	cbnz	r0, 8011186 <_dtoa_r+0x186>
 8011182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011186:	f1ba 0f16 	cmp.w	sl, #22
 801118a:	d854      	bhi.n	8011236 <_dtoa_r+0x236>
 801118c:	4b61      	ldr	r3, [pc, #388]	; (8011314 <_dtoa_r+0x314>)
 801118e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801119a:	f7ef fcaf 	bl	8000afc <__aeabi_dcmplt>
 801119e:	2800      	cmp	r0, #0
 80111a0:	d04b      	beq.n	801123a <_dtoa_r+0x23a>
 80111a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111a6:	2300      	movs	r3, #0
 80111a8:	930e      	str	r3, [sp, #56]	; 0x38
 80111aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80111ac:	1b5d      	subs	r5, r3, r5
 80111ae:	1e6b      	subs	r3, r5, #1
 80111b0:	9304      	str	r3, [sp, #16]
 80111b2:	bf43      	ittte	mi
 80111b4:	2300      	movmi	r3, #0
 80111b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80111ba:	9304      	strmi	r3, [sp, #16]
 80111bc:	f04f 0800 	movpl.w	r8, #0
 80111c0:	f1ba 0f00 	cmp.w	sl, #0
 80111c4:	db3b      	blt.n	801123e <_dtoa_r+0x23e>
 80111c6:	9b04      	ldr	r3, [sp, #16]
 80111c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80111cc:	4453      	add	r3, sl
 80111ce:	9304      	str	r3, [sp, #16]
 80111d0:	2300      	movs	r3, #0
 80111d2:	9306      	str	r3, [sp, #24]
 80111d4:	9b05      	ldr	r3, [sp, #20]
 80111d6:	2b09      	cmp	r3, #9
 80111d8:	d869      	bhi.n	80112ae <_dtoa_r+0x2ae>
 80111da:	2b05      	cmp	r3, #5
 80111dc:	bfc4      	itt	gt
 80111de:	3b04      	subgt	r3, #4
 80111e0:	9305      	strgt	r3, [sp, #20]
 80111e2:	9b05      	ldr	r3, [sp, #20]
 80111e4:	f1a3 0302 	sub.w	r3, r3, #2
 80111e8:	bfcc      	ite	gt
 80111ea:	2500      	movgt	r5, #0
 80111ec:	2501      	movle	r5, #1
 80111ee:	2b03      	cmp	r3, #3
 80111f0:	d869      	bhi.n	80112c6 <_dtoa_r+0x2c6>
 80111f2:	e8df f003 	tbb	[pc, r3]
 80111f6:	4e2c      	.short	0x4e2c
 80111f8:	5a4c      	.short	0x5a4c
 80111fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80111fe:	441d      	add	r5, r3
 8011200:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011204:	2b20      	cmp	r3, #32
 8011206:	bfc1      	itttt	gt
 8011208:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801120c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011210:	fa09 f303 	lslgt.w	r3, r9, r3
 8011214:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011218:	bfda      	itte	le
 801121a:	f1c3 0320 	rsble	r3, r3, #32
 801121e:	fa06 f003 	lslle.w	r0, r6, r3
 8011222:	4318      	orrgt	r0, r3
 8011224:	f7ef f97e 	bl	8000524 <__aeabi_ui2d>
 8011228:	2301      	movs	r3, #1
 801122a:	4606      	mov	r6, r0
 801122c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011230:	3d01      	subs	r5, #1
 8011232:	9310      	str	r3, [sp, #64]	; 0x40
 8011234:	e771      	b.n	801111a <_dtoa_r+0x11a>
 8011236:	2301      	movs	r3, #1
 8011238:	e7b6      	b.n	80111a8 <_dtoa_r+0x1a8>
 801123a:	900e      	str	r0, [sp, #56]	; 0x38
 801123c:	e7b5      	b.n	80111aa <_dtoa_r+0x1aa>
 801123e:	f1ca 0300 	rsb	r3, sl, #0
 8011242:	9306      	str	r3, [sp, #24]
 8011244:	2300      	movs	r3, #0
 8011246:	eba8 080a 	sub.w	r8, r8, sl
 801124a:	930d      	str	r3, [sp, #52]	; 0x34
 801124c:	e7c2      	b.n	80111d4 <_dtoa_r+0x1d4>
 801124e:	2300      	movs	r3, #0
 8011250:	9308      	str	r3, [sp, #32]
 8011252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011254:	2b00      	cmp	r3, #0
 8011256:	dc39      	bgt.n	80112cc <_dtoa_r+0x2cc>
 8011258:	f04f 0901 	mov.w	r9, #1
 801125c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011260:	464b      	mov	r3, r9
 8011262:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011266:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011268:	2200      	movs	r2, #0
 801126a:	6042      	str	r2, [r0, #4]
 801126c:	2204      	movs	r2, #4
 801126e:	f102 0614 	add.w	r6, r2, #20
 8011272:	429e      	cmp	r6, r3
 8011274:	6841      	ldr	r1, [r0, #4]
 8011276:	d92f      	bls.n	80112d8 <_dtoa_r+0x2d8>
 8011278:	4620      	mov	r0, r4
 801127a:	f001 fa59 	bl	8012730 <_Balloc>
 801127e:	9000      	str	r0, [sp, #0]
 8011280:	2800      	cmp	r0, #0
 8011282:	d14b      	bne.n	801131c <_dtoa_r+0x31c>
 8011284:	4b24      	ldr	r3, [pc, #144]	; (8011318 <_dtoa_r+0x318>)
 8011286:	4602      	mov	r2, r0
 8011288:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801128c:	e6d1      	b.n	8011032 <_dtoa_r+0x32>
 801128e:	2301      	movs	r3, #1
 8011290:	e7de      	b.n	8011250 <_dtoa_r+0x250>
 8011292:	2300      	movs	r3, #0
 8011294:	9308      	str	r3, [sp, #32]
 8011296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011298:	eb0a 0903 	add.w	r9, sl, r3
 801129c:	f109 0301 	add.w	r3, r9, #1
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	9301      	str	r3, [sp, #4]
 80112a4:	bfb8      	it	lt
 80112a6:	2301      	movlt	r3, #1
 80112a8:	e7dd      	b.n	8011266 <_dtoa_r+0x266>
 80112aa:	2301      	movs	r3, #1
 80112ac:	e7f2      	b.n	8011294 <_dtoa_r+0x294>
 80112ae:	2501      	movs	r5, #1
 80112b0:	2300      	movs	r3, #0
 80112b2:	9305      	str	r3, [sp, #20]
 80112b4:	9508      	str	r5, [sp, #32]
 80112b6:	f04f 39ff 	mov.w	r9, #4294967295
 80112ba:	2200      	movs	r2, #0
 80112bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80112c0:	2312      	movs	r3, #18
 80112c2:	9209      	str	r2, [sp, #36]	; 0x24
 80112c4:	e7cf      	b.n	8011266 <_dtoa_r+0x266>
 80112c6:	2301      	movs	r3, #1
 80112c8:	9308      	str	r3, [sp, #32]
 80112ca:	e7f4      	b.n	80112b6 <_dtoa_r+0x2b6>
 80112cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80112d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80112d4:	464b      	mov	r3, r9
 80112d6:	e7c6      	b.n	8011266 <_dtoa_r+0x266>
 80112d8:	3101      	adds	r1, #1
 80112da:	6041      	str	r1, [r0, #4]
 80112dc:	0052      	lsls	r2, r2, #1
 80112de:	e7c6      	b.n	801126e <_dtoa_r+0x26e>
 80112e0:	636f4361 	.word	0x636f4361
 80112e4:	3fd287a7 	.word	0x3fd287a7
 80112e8:	8b60c8b3 	.word	0x8b60c8b3
 80112ec:	3fc68a28 	.word	0x3fc68a28
 80112f0:	509f79fb 	.word	0x509f79fb
 80112f4:	3fd34413 	.word	0x3fd34413
 80112f8:	080156a6 	.word	0x080156a6
 80112fc:	080156bd 	.word	0x080156bd
 8011300:	7ff00000 	.word	0x7ff00000
 8011304:	080156a2 	.word	0x080156a2
 8011308:	08015699 	.word	0x08015699
 801130c:	0801551d 	.word	0x0801551d
 8011310:	3ff80000 	.word	0x3ff80000
 8011314:	08015898 	.word	0x08015898
 8011318:	0801571c 	.word	0x0801571c
 801131c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801131e:	9a00      	ldr	r2, [sp, #0]
 8011320:	601a      	str	r2, [r3, #0]
 8011322:	9b01      	ldr	r3, [sp, #4]
 8011324:	2b0e      	cmp	r3, #14
 8011326:	f200 80ad 	bhi.w	8011484 <_dtoa_r+0x484>
 801132a:	2d00      	cmp	r5, #0
 801132c:	f000 80aa 	beq.w	8011484 <_dtoa_r+0x484>
 8011330:	f1ba 0f00 	cmp.w	sl, #0
 8011334:	dd36      	ble.n	80113a4 <_dtoa_r+0x3a4>
 8011336:	4ac3      	ldr	r2, [pc, #780]	; (8011644 <_dtoa_r+0x644>)
 8011338:	f00a 030f 	and.w	r3, sl, #15
 801133c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011340:	ed93 7b00 	vldr	d7, [r3]
 8011344:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011348:	ea4f 172a 	mov.w	r7, sl, asr #4
 801134c:	eeb0 8a47 	vmov.f32	s16, s14
 8011350:	eef0 8a67 	vmov.f32	s17, s15
 8011354:	d016      	beq.n	8011384 <_dtoa_r+0x384>
 8011356:	4bbc      	ldr	r3, [pc, #752]	; (8011648 <_dtoa_r+0x648>)
 8011358:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801135c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011360:	f7ef fa84 	bl	800086c <__aeabi_ddiv>
 8011364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011368:	f007 070f 	and.w	r7, r7, #15
 801136c:	2503      	movs	r5, #3
 801136e:	4eb6      	ldr	r6, [pc, #728]	; (8011648 <_dtoa_r+0x648>)
 8011370:	b957      	cbnz	r7, 8011388 <_dtoa_r+0x388>
 8011372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011376:	ec53 2b18 	vmov	r2, r3, d8
 801137a:	f7ef fa77 	bl	800086c <__aeabi_ddiv>
 801137e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011382:	e029      	b.n	80113d8 <_dtoa_r+0x3d8>
 8011384:	2502      	movs	r5, #2
 8011386:	e7f2      	b.n	801136e <_dtoa_r+0x36e>
 8011388:	07f9      	lsls	r1, r7, #31
 801138a:	d508      	bpl.n	801139e <_dtoa_r+0x39e>
 801138c:	ec51 0b18 	vmov	r0, r1, d8
 8011390:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011394:	f7ef f940 	bl	8000618 <__aeabi_dmul>
 8011398:	ec41 0b18 	vmov	d8, r0, r1
 801139c:	3501      	adds	r5, #1
 801139e:	107f      	asrs	r7, r7, #1
 80113a0:	3608      	adds	r6, #8
 80113a2:	e7e5      	b.n	8011370 <_dtoa_r+0x370>
 80113a4:	f000 80a6 	beq.w	80114f4 <_dtoa_r+0x4f4>
 80113a8:	f1ca 0600 	rsb	r6, sl, #0
 80113ac:	4ba5      	ldr	r3, [pc, #660]	; (8011644 <_dtoa_r+0x644>)
 80113ae:	4fa6      	ldr	r7, [pc, #664]	; (8011648 <_dtoa_r+0x648>)
 80113b0:	f006 020f 	and.w	r2, r6, #15
 80113b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80113b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80113c0:	f7ef f92a 	bl	8000618 <__aeabi_dmul>
 80113c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113c8:	1136      	asrs	r6, r6, #4
 80113ca:	2300      	movs	r3, #0
 80113cc:	2502      	movs	r5, #2
 80113ce:	2e00      	cmp	r6, #0
 80113d0:	f040 8085 	bne.w	80114de <_dtoa_r+0x4de>
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1d2      	bne.n	801137e <_dtoa_r+0x37e>
 80113d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113da:	2b00      	cmp	r3, #0
 80113dc:	f000 808c 	beq.w	80114f8 <_dtoa_r+0x4f8>
 80113e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80113e4:	4b99      	ldr	r3, [pc, #612]	; (801164c <_dtoa_r+0x64c>)
 80113e6:	2200      	movs	r2, #0
 80113e8:	4630      	mov	r0, r6
 80113ea:	4639      	mov	r1, r7
 80113ec:	f7ef fb86 	bl	8000afc <__aeabi_dcmplt>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	f000 8081 	beq.w	80114f8 <_dtoa_r+0x4f8>
 80113f6:	9b01      	ldr	r3, [sp, #4]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d07d      	beq.n	80114f8 <_dtoa_r+0x4f8>
 80113fc:	f1b9 0f00 	cmp.w	r9, #0
 8011400:	dd3c      	ble.n	801147c <_dtoa_r+0x47c>
 8011402:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011406:	9307      	str	r3, [sp, #28]
 8011408:	2200      	movs	r2, #0
 801140a:	4b91      	ldr	r3, [pc, #580]	; (8011650 <_dtoa_r+0x650>)
 801140c:	4630      	mov	r0, r6
 801140e:	4639      	mov	r1, r7
 8011410:	f7ef f902 	bl	8000618 <__aeabi_dmul>
 8011414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011418:	3501      	adds	r5, #1
 801141a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801141e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011422:	4628      	mov	r0, r5
 8011424:	f7ef f88e 	bl	8000544 <__aeabi_i2d>
 8011428:	4632      	mov	r2, r6
 801142a:	463b      	mov	r3, r7
 801142c:	f7ef f8f4 	bl	8000618 <__aeabi_dmul>
 8011430:	4b88      	ldr	r3, [pc, #544]	; (8011654 <_dtoa_r+0x654>)
 8011432:	2200      	movs	r2, #0
 8011434:	f7ee ff3a 	bl	80002ac <__adddf3>
 8011438:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801143c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011440:	9303      	str	r3, [sp, #12]
 8011442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011444:	2b00      	cmp	r3, #0
 8011446:	d15c      	bne.n	8011502 <_dtoa_r+0x502>
 8011448:	4b83      	ldr	r3, [pc, #524]	; (8011658 <_dtoa_r+0x658>)
 801144a:	2200      	movs	r2, #0
 801144c:	4630      	mov	r0, r6
 801144e:	4639      	mov	r1, r7
 8011450:	f7ee ff2a 	bl	80002a8 <__aeabi_dsub>
 8011454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011458:	4606      	mov	r6, r0
 801145a:	460f      	mov	r7, r1
 801145c:	f7ef fb6c 	bl	8000b38 <__aeabi_dcmpgt>
 8011460:	2800      	cmp	r0, #0
 8011462:	f040 8296 	bne.w	8011992 <_dtoa_r+0x992>
 8011466:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801146a:	4630      	mov	r0, r6
 801146c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011470:	4639      	mov	r1, r7
 8011472:	f7ef fb43 	bl	8000afc <__aeabi_dcmplt>
 8011476:	2800      	cmp	r0, #0
 8011478:	f040 8288 	bne.w	801198c <_dtoa_r+0x98c>
 801147c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011480:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011486:	2b00      	cmp	r3, #0
 8011488:	f2c0 8158 	blt.w	801173c <_dtoa_r+0x73c>
 801148c:	f1ba 0f0e 	cmp.w	sl, #14
 8011490:	f300 8154 	bgt.w	801173c <_dtoa_r+0x73c>
 8011494:	4b6b      	ldr	r3, [pc, #428]	; (8011644 <_dtoa_r+0x644>)
 8011496:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801149a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801149e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	f280 80e3 	bge.w	801166c <_dtoa_r+0x66c>
 80114a6:	9b01      	ldr	r3, [sp, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	f300 80df 	bgt.w	801166c <_dtoa_r+0x66c>
 80114ae:	f040 826d 	bne.w	801198c <_dtoa_r+0x98c>
 80114b2:	4b69      	ldr	r3, [pc, #420]	; (8011658 <_dtoa_r+0x658>)
 80114b4:	2200      	movs	r2, #0
 80114b6:	4640      	mov	r0, r8
 80114b8:	4649      	mov	r1, r9
 80114ba:	f7ef f8ad 	bl	8000618 <__aeabi_dmul>
 80114be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114c2:	f7ef fb2f 	bl	8000b24 <__aeabi_dcmpge>
 80114c6:	9e01      	ldr	r6, [sp, #4]
 80114c8:	4637      	mov	r7, r6
 80114ca:	2800      	cmp	r0, #0
 80114cc:	f040 8243 	bne.w	8011956 <_dtoa_r+0x956>
 80114d0:	9d00      	ldr	r5, [sp, #0]
 80114d2:	2331      	movs	r3, #49	; 0x31
 80114d4:	f805 3b01 	strb.w	r3, [r5], #1
 80114d8:	f10a 0a01 	add.w	sl, sl, #1
 80114dc:	e23f      	b.n	801195e <_dtoa_r+0x95e>
 80114de:	07f2      	lsls	r2, r6, #31
 80114e0:	d505      	bpl.n	80114ee <_dtoa_r+0x4ee>
 80114e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114e6:	f7ef f897 	bl	8000618 <__aeabi_dmul>
 80114ea:	3501      	adds	r5, #1
 80114ec:	2301      	movs	r3, #1
 80114ee:	1076      	asrs	r6, r6, #1
 80114f0:	3708      	adds	r7, #8
 80114f2:	e76c      	b.n	80113ce <_dtoa_r+0x3ce>
 80114f4:	2502      	movs	r5, #2
 80114f6:	e76f      	b.n	80113d8 <_dtoa_r+0x3d8>
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80114fe:	930c      	str	r3, [sp, #48]	; 0x30
 8011500:	e78d      	b.n	801141e <_dtoa_r+0x41e>
 8011502:	9900      	ldr	r1, [sp, #0]
 8011504:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011508:	4b4e      	ldr	r3, [pc, #312]	; (8011644 <_dtoa_r+0x644>)
 801150a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801150e:	4401      	add	r1, r0
 8011510:	9102      	str	r1, [sp, #8]
 8011512:	9908      	ldr	r1, [sp, #32]
 8011514:	eeb0 8a47 	vmov.f32	s16, s14
 8011518:	eef0 8a67 	vmov.f32	s17, s15
 801151c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011520:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011524:	2900      	cmp	r1, #0
 8011526:	d045      	beq.n	80115b4 <_dtoa_r+0x5b4>
 8011528:	494c      	ldr	r1, [pc, #304]	; (801165c <_dtoa_r+0x65c>)
 801152a:	2000      	movs	r0, #0
 801152c:	f7ef f99e 	bl	800086c <__aeabi_ddiv>
 8011530:	ec53 2b18 	vmov	r2, r3, d8
 8011534:	f7ee feb8 	bl	80002a8 <__aeabi_dsub>
 8011538:	9d00      	ldr	r5, [sp, #0]
 801153a:	ec41 0b18 	vmov	d8, r0, r1
 801153e:	4639      	mov	r1, r7
 8011540:	4630      	mov	r0, r6
 8011542:	f7ef fb19 	bl	8000b78 <__aeabi_d2iz>
 8011546:	900c      	str	r0, [sp, #48]	; 0x30
 8011548:	f7ee fffc 	bl	8000544 <__aeabi_i2d>
 801154c:	4602      	mov	r2, r0
 801154e:	460b      	mov	r3, r1
 8011550:	4630      	mov	r0, r6
 8011552:	4639      	mov	r1, r7
 8011554:	f7ee fea8 	bl	80002a8 <__aeabi_dsub>
 8011558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801155a:	3330      	adds	r3, #48	; 0x30
 801155c:	f805 3b01 	strb.w	r3, [r5], #1
 8011560:	ec53 2b18 	vmov	r2, r3, d8
 8011564:	4606      	mov	r6, r0
 8011566:	460f      	mov	r7, r1
 8011568:	f7ef fac8 	bl	8000afc <__aeabi_dcmplt>
 801156c:	2800      	cmp	r0, #0
 801156e:	d165      	bne.n	801163c <_dtoa_r+0x63c>
 8011570:	4632      	mov	r2, r6
 8011572:	463b      	mov	r3, r7
 8011574:	4935      	ldr	r1, [pc, #212]	; (801164c <_dtoa_r+0x64c>)
 8011576:	2000      	movs	r0, #0
 8011578:	f7ee fe96 	bl	80002a8 <__aeabi_dsub>
 801157c:	ec53 2b18 	vmov	r2, r3, d8
 8011580:	f7ef fabc 	bl	8000afc <__aeabi_dcmplt>
 8011584:	2800      	cmp	r0, #0
 8011586:	f040 80b9 	bne.w	80116fc <_dtoa_r+0x6fc>
 801158a:	9b02      	ldr	r3, [sp, #8]
 801158c:	429d      	cmp	r5, r3
 801158e:	f43f af75 	beq.w	801147c <_dtoa_r+0x47c>
 8011592:	4b2f      	ldr	r3, [pc, #188]	; (8011650 <_dtoa_r+0x650>)
 8011594:	ec51 0b18 	vmov	r0, r1, d8
 8011598:	2200      	movs	r2, #0
 801159a:	f7ef f83d 	bl	8000618 <__aeabi_dmul>
 801159e:	4b2c      	ldr	r3, [pc, #176]	; (8011650 <_dtoa_r+0x650>)
 80115a0:	ec41 0b18 	vmov	d8, r0, r1
 80115a4:	2200      	movs	r2, #0
 80115a6:	4630      	mov	r0, r6
 80115a8:	4639      	mov	r1, r7
 80115aa:	f7ef f835 	bl	8000618 <__aeabi_dmul>
 80115ae:	4606      	mov	r6, r0
 80115b0:	460f      	mov	r7, r1
 80115b2:	e7c4      	b.n	801153e <_dtoa_r+0x53e>
 80115b4:	ec51 0b17 	vmov	r0, r1, d7
 80115b8:	f7ef f82e 	bl	8000618 <__aeabi_dmul>
 80115bc:	9b02      	ldr	r3, [sp, #8]
 80115be:	9d00      	ldr	r5, [sp, #0]
 80115c0:	930c      	str	r3, [sp, #48]	; 0x30
 80115c2:	ec41 0b18 	vmov	d8, r0, r1
 80115c6:	4639      	mov	r1, r7
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7ef fad5 	bl	8000b78 <__aeabi_d2iz>
 80115ce:	9011      	str	r0, [sp, #68]	; 0x44
 80115d0:	f7ee ffb8 	bl	8000544 <__aeabi_i2d>
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	4630      	mov	r0, r6
 80115da:	4639      	mov	r1, r7
 80115dc:	f7ee fe64 	bl	80002a8 <__aeabi_dsub>
 80115e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115e2:	3330      	adds	r3, #48	; 0x30
 80115e4:	f805 3b01 	strb.w	r3, [r5], #1
 80115e8:	9b02      	ldr	r3, [sp, #8]
 80115ea:	429d      	cmp	r5, r3
 80115ec:	4606      	mov	r6, r0
 80115ee:	460f      	mov	r7, r1
 80115f0:	f04f 0200 	mov.w	r2, #0
 80115f4:	d134      	bne.n	8011660 <_dtoa_r+0x660>
 80115f6:	4b19      	ldr	r3, [pc, #100]	; (801165c <_dtoa_r+0x65c>)
 80115f8:	ec51 0b18 	vmov	r0, r1, d8
 80115fc:	f7ee fe56 	bl	80002ac <__adddf3>
 8011600:	4602      	mov	r2, r0
 8011602:	460b      	mov	r3, r1
 8011604:	4630      	mov	r0, r6
 8011606:	4639      	mov	r1, r7
 8011608:	f7ef fa96 	bl	8000b38 <__aeabi_dcmpgt>
 801160c:	2800      	cmp	r0, #0
 801160e:	d175      	bne.n	80116fc <_dtoa_r+0x6fc>
 8011610:	ec53 2b18 	vmov	r2, r3, d8
 8011614:	4911      	ldr	r1, [pc, #68]	; (801165c <_dtoa_r+0x65c>)
 8011616:	2000      	movs	r0, #0
 8011618:	f7ee fe46 	bl	80002a8 <__aeabi_dsub>
 801161c:	4602      	mov	r2, r0
 801161e:	460b      	mov	r3, r1
 8011620:	4630      	mov	r0, r6
 8011622:	4639      	mov	r1, r7
 8011624:	f7ef fa6a 	bl	8000afc <__aeabi_dcmplt>
 8011628:	2800      	cmp	r0, #0
 801162a:	f43f af27 	beq.w	801147c <_dtoa_r+0x47c>
 801162e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011630:	1e6b      	subs	r3, r5, #1
 8011632:	930c      	str	r3, [sp, #48]	; 0x30
 8011634:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011638:	2b30      	cmp	r3, #48	; 0x30
 801163a:	d0f8      	beq.n	801162e <_dtoa_r+0x62e>
 801163c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011640:	e04a      	b.n	80116d8 <_dtoa_r+0x6d8>
 8011642:	bf00      	nop
 8011644:	08015898 	.word	0x08015898
 8011648:	08015870 	.word	0x08015870
 801164c:	3ff00000 	.word	0x3ff00000
 8011650:	40240000 	.word	0x40240000
 8011654:	401c0000 	.word	0x401c0000
 8011658:	40140000 	.word	0x40140000
 801165c:	3fe00000 	.word	0x3fe00000
 8011660:	4baf      	ldr	r3, [pc, #700]	; (8011920 <_dtoa_r+0x920>)
 8011662:	f7ee ffd9 	bl	8000618 <__aeabi_dmul>
 8011666:	4606      	mov	r6, r0
 8011668:	460f      	mov	r7, r1
 801166a:	e7ac      	b.n	80115c6 <_dtoa_r+0x5c6>
 801166c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011670:	9d00      	ldr	r5, [sp, #0]
 8011672:	4642      	mov	r2, r8
 8011674:	464b      	mov	r3, r9
 8011676:	4630      	mov	r0, r6
 8011678:	4639      	mov	r1, r7
 801167a:	f7ef f8f7 	bl	800086c <__aeabi_ddiv>
 801167e:	f7ef fa7b 	bl	8000b78 <__aeabi_d2iz>
 8011682:	9002      	str	r0, [sp, #8]
 8011684:	f7ee ff5e 	bl	8000544 <__aeabi_i2d>
 8011688:	4642      	mov	r2, r8
 801168a:	464b      	mov	r3, r9
 801168c:	f7ee ffc4 	bl	8000618 <__aeabi_dmul>
 8011690:	4602      	mov	r2, r0
 8011692:	460b      	mov	r3, r1
 8011694:	4630      	mov	r0, r6
 8011696:	4639      	mov	r1, r7
 8011698:	f7ee fe06 	bl	80002a8 <__aeabi_dsub>
 801169c:	9e02      	ldr	r6, [sp, #8]
 801169e:	9f01      	ldr	r7, [sp, #4]
 80116a0:	3630      	adds	r6, #48	; 0x30
 80116a2:	f805 6b01 	strb.w	r6, [r5], #1
 80116a6:	9e00      	ldr	r6, [sp, #0]
 80116a8:	1bae      	subs	r6, r5, r6
 80116aa:	42b7      	cmp	r7, r6
 80116ac:	4602      	mov	r2, r0
 80116ae:	460b      	mov	r3, r1
 80116b0:	d137      	bne.n	8011722 <_dtoa_r+0x722>
 80116b2:	f7ee fdfb 	bl	80002ac <__adddf3>
 80116b6:	4642      	mov	r2, r8
 80116b8:	464b      	mov	r3, r9
 80116ba:	4606      	mov	r6, r0
 80116bc:	460f      	mov	r7, r1
 80116be:	f7ef fa3b 	bl	8000b38 <__aeabi_dcmpgt>
 80116c2:	b9c8      	cbnz	r0, 80116f8 <_dtoa_r+0x6f8>
 80116c4:	4642      	mov	r2, r8
 80116c6:	464b      	mov	r3, r9
 80116c8:	4630      	mov	r0, r6
 80116ca:	4639      	mov	r1, r7
 80116cc:	f7ef fa0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80116d0:	b110      	cbz	r0, 80116d8 <_dtoa_r+0x6d8>
 80116d2:	9b02      	ldr	r3, [sp, #8]
 80116d4:	07d9      	lsls	r1, r3, #31
 80116d6:	d40f      	bmi.n	80116f8 <_dtoa_r+0x6f8>
 80116d8:	4620      	mov	r0, r4
 80116da:	4659      	mov	r1, fp
 80116dc:	f001 f868 	bl	80127b0 <_Bfree>
 80116e0:	2300      	movs	r3, #0
 80116e2:	702b      	strb	r3, [r5, #0]
 80116e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80116e6:	f10a 0001 	add.w	r0, sl, #1
 80116ea:	6018      	str	r0, [r3, #0]
 80116ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f43f acd8 	beq.w	80110a4 <_dtoa_r+0xa4>
 80116f4:	601d      	str	r5, [r3, #0]
 80116f6:	e4d5      	b.n	80110a4 <_dtoa_r+0xa4>
 80116f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80116fc:	462b      	mov	r3, r5
 80116fe:	461d      	mov	r5, r3
 8011700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011704:	2a39      	cmp	r2, #57	; 0x39
 8011706:	d108      	bne.n	801171a <_dtoa_r+0x71a>
 8011708:	9a00      	ldr	r2, [sp, #0]
 801170a:	429a      	cmp	r2, r3
 801170c:	d1f7      	bne.n	80116fe <_dtoa_r+0x6fe>
 801170e:	9a07      	ldr	r2, [sp, #28]
 8011710:	9900      	ldr	r1, [sp, #0]
 8011712:	3201      	adds	r2, #1
 8011714:	9207      	str	r2, [sp, #28]
 8011716:	2230      	movs	r2, #48	; 0x30
 8011718:	700a      	strb	r2, [r1, #0]
 801171a:	781a      	ldrb	r2, [r3, #0]
 801171c:	3201      	adds	r2, #1
 801171e:	701a      	strb	r2, [r3, #0]
 8011720:	e78c      	b.n	801163c <_dtoa_r+0x63c>
 8011722:	4b7f      	ldr	r3, [pc, #508]	; (8011920 <_dtoa_r+0x920>)
 8011724:	2200      	movs	r2, #0
 8011726:	f7ee ff77 	bl	8000618 <__aeabi_dmul>
 801172a:	2200      	movs	r2, #0
 801172c:	2300      	movs	r3, #0
 801172e:	4606      	mov	r6, r0
 8011730:	460f      	mov	r7, r1
 8011732:	f7ef f9d9 	bl	8000ae8 <__aeabi_dcmpeq>
 8011736:	2800      	cmp	r0, #0
 8011738:	d09b      	beq.n	8011672 <_dtoa_r+0x672>
 801173a:	e7cd      	b.n	80116d8 <_dtoa_r+0x6d8>
 801173c:	9a08      	ldr	r2, [sp, #32]
 801173e:	2a00      	cmp	r2, #0
 8011740:	f000 80c4 	beq.w	80118cc <_dtoa_r+0x8cc>
 8011744:	9a05      	ldr	r2, [sp, #20]
 8011746:	2a01      	cmp	r2, #1
 8011748:	f300 80a8 	bgt.w	801189c <_dtoa_r+0x89c>
 801174c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801174e:	2a00      	cmp	r2, #0
 8011750:	f000 80a0 	beq.w	8011894 <_dtoa_r+0x894>
 8011754:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011758:	9e06      	ldr	r6, [sp, #24]
 801175a:	4645      	mov	r5, r8
 801175c:	9a04      	ldr	r2, [sp, #16]
 801175e:	2101      	movs	r1, #1
 8011760:	441a      	add	r2, r3
 8011762:	4620      	mov	r0, r4
 8011764:	4498      	add	r8, r3
 8011766:	9204      	str	r2, [sp, #16]
 8011768:	f001 f928 	bl	80129bc <__i2b>
 801176c:	4607      	mov	r7, r0
 801176e:	2d00      	cmp	r5, #0
 8011770:	dd0b      	ble.n	801178a <_dtoa_r+0x78a>
 8011772:	9b04      	ldr	r3, [sp, #16]
 8011774:	2b00      	cmp	r3, #0
 8011776:	dd08      	ble.n	801178a <_dtoa_r+0x78a>
 8011778:	42ab      	cmp	r3, r5
 801177a:	9a04      	ldr	r2, [sp, #16]
 801177c:	bfa8      	it	ge
 801177e:	462b      	movge	r3, r5
 8011780:	eba8 0803 	sub.w	r8, r8, r3
 8011784:	1aed      	subs	r5, r5, r3
 8011786:	1ad3      	subs	r3, r2, r3
 8011788:	9304      	str	r3, [sp, #16]
 801178a:	9b06      	ldr	r3, [sp, #24]
 801178c:	b1fb      	cbz	r3, 80117ce <_dtoa_r+0x7ce>
 801178e:	9b08      	ldr	r3, [sp, #32]
 8011790:	2b00      	cmp	r3, #0
 8011792:	f000 809f 	beq.w	80118d4 <_dtoa_r+0x8d4>
 8011796:	2e00      	cmp	r6, #0
 8011798:	dd11      	ble.n	80117be <_dtoa_r+0x7be>
 801179a:	4639      	mov	r1, r7
 801179c:	4632      	mov	r2, r6
 801179e:	4620      	mov	r0, r4
 80117a0:	f001 f9c8 	bl	8012b34 <__pow5mult>
 80117a4:	465a      	mov	r2, fp
 80117a6:	4601      	mov	r1, r0
 80117a8:	4607      	mov	r7, r0
 80117aa:	4620      	mov	r0, r4
 80117ac:	f001 f91c 	bl	80129e8 <__multiply>
 80117b0:	4659      	mov	r1, fp
 80117b2:	9007      	str	r0, [sp, #28]
 80117b4:	4620      	mov	r0, r4
 80117b6:	f000 fffb 	bl	80127b0 <_Bfree>
 80117ba:	9b07      	ldr	r3, [sp, #28]
 80117bc:	469b      	mov	fp, r3
 80117be:	9b06      	ldr	r3, [sp, #24]
 80117c0:	1b9a      	subs	r2, r3, r6
 80117c2:	d004      	beq.n	80117ce <_dtoa_r+0x7ce>
 80117c4:	4659      	mov	r1, fp
 80117c6:	4620      	mov	r0, r4
 80117c8:	f001 f9b4 	bl	8012b34 <__pow5mult>
 80117cc:	4683      	mov	fp, r0
 80117ce:	2101      	movs	r1, #1
 80117d0:	4620      	mov	r0, r4
 80117d2:	f001 f8f3 	bl	80129bc <__i2b>
 80117d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117d8:	2b00      	cmp	r3, #0
 80117da:	4606      	mov	r6, r0
 80117dc:	dd7c      	ble.n	80118d8 <_dtoa_r+0x8d8>
 80117de:	461a      	mov	r2, r3
 80117e0:	4601      	mov	r1, r0
 80117e2:	4620      	mov	r0, r4
 80117e4:	f001 f9a6 	bl	8012b34 <__pow5mult>
 80117e8:	9b05      	ldr	r3, [sp, #20]
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	4606      	mov	r6, r0
 80117ee:	dd76      	ble.n	80118de <_dtoa_r+0x8de>
 80117f0:	2300      	movs	r3, #0
 80117f2:	9306      	str	r3, [sp, #24]
 80117f4:	6933      	ldr	r3, [r6, #16]
 80117f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80117fa:	6918      	ldr	r0, [r3, #16]
 80117fc:	f001 f88e 	bl	801291c <__hi0bits>
 8011800:	f1c0 0020 	rsb	r0, r0, #32
 8011804:	9b04      	ldr	r3, [sp, #16]
 8011806:	4418      	add	r0, r3
 8011808:	f010 001f 	ands.w	r0, r0, #31
 801180c:	f000 8086 	beq.w	801191c <_dtoa_r+0x91c>
 8011810:	f1c0 0320 	rsb	r3, r0, #32
 8011814:	2b04      	cmp	r3, #4
 8011816:	dd7f      	ble.n	8011918 <_dtoa_r+0x918>
 8011818:	f1c0 001c 	rsb	r0, r0, #28
 801181c:	9b04      	ldr	r3, [sp, #16]
 801181e:	4403      	add	r3, r0
 8011820:	4480      	add	r8, r0
 8011822:	4405      	add	r5, r0
 8011824:	9304      	str	r3, [sp, #16]
 8011826:	f1b8 0f00 	cmp.w	r8, #0
 801182a:	dd05      	ble.n	8011838 <_dtoa_r+0x838>
 801182c:	4659      	mov	r1, fp
 801182e:	4642      	mov	r2, r8
 8011830:	4620      	mov	r0, r4
 8011832:	f001 f9d9 	bl	8012be8 <__lshift>
 8011836:	4683      	mov	fp, r0
 8011838:	9b04      	ldr	r3, [sp, #16]
 801183a:	2b00      	cmp	r3, #0
 801183c:	dd05      	ble.n	801184a <_dtoa_r+0x84a>
 801183e:	4631      	mov	r1, r6
 8011840:	461a      	mov	r2, r3
 8011842:	4620      	mov	r0, r4
 8011844:	f001 f9d0 	bl	8012be8 <__lshift>
 8011848:	4606      	mov	r6, r0
 801184a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801184c:	2b00      	cmp	r3, #0
 801184e:	d069      	beq.n	8011924 <_dtoa_r+0x924>
 8011850:	4631      	mov	r1, r6
 8011852:	4658      	mov	r0, fp
 8011854:	f001 fa34 	bl	8012cc0 <__mcmp>
 8011858:	2800      	cmp	r0, #0
 801185a:	da63      	bge.n	8011924 <_dtoa_r+0x924>
 801185c:	2300      	movs	r3, #0
 801185e:	4659      	mov	r1, fp
 8011860:	220a      	movs	r2, #10
 8011862:	4620      	mov	r0, r4
 8011864:	f000 ffc6 	bl	80127f4 <__multadd>
 8011868:	9b08      	ldr	r3, [sp, #32]
 801186a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801186e:	4683      	mov	fp, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	f000 818f 	beq.w	8011b94 <_dtoa_r+0xb94>
 8011876:	4639      	mov	r1, r7
 8011878:	2300      	movs	r3, #0
 801187a:	220a      	movs	r2, #10
 801187c:	4620      	mov	r0, r4
 801187e:	f000 ffb9 	bl	80127f4 <__multadd>
 8011882:	f1b9 0f00 	cmp.w	r9, #0
 8011886:	4607      	mov	r7, r0
 8011888:	f300 808e 	bgt.w	80119a8 <_dtoa_r+0x9a8>
 801188c:	9b05      	ldr	r3, [sp, #20]
 801188e:	2b02      	cmp	r3, #2
 8011890:	dc50      	bgt.n	8011934 <_dtoa_r+0x934>
 8011892:	e089      	b.n	80119a8 <_dtoa_r+0x9a8>
 8011894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011896:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801189a:	e75d      	b.n	8011758 <_dtoa_r+0x758>
 801189c:	9b01      	ldr	r3, [sp, #4]
 801189e:	1e5e      	subs	r6, r3, #1
 80118a0:	9b06      	ldr	r3, [sp, #24]
 80118a2:	42b3      	cmp	r3, r6
 80118a4:	bfbf      	itttt	lt
 80118a6:	9b06      	ldrlt	r3, [sp, #24]
 80118a8:	9606      	strlt	r6, [sp, #24]
 80118aa:	1af2      	sublt	r2, r6, r3
 80118ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80118ae:	bfb6      	itet	lt
 80118b0:	189b      	addlt	r3, r3, r2
 80118b2:	1b9e      	subge	r6, r3, r6
 80118b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80118b6:	9b01      	ldr	r3, [sp, #4]
 80118b8:	bfb8      	it	lt
 80118ba:	2600      	movlt	r6, #0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	bfb5      	itete	lt
 80118c0:	eba8 0503 	sublt.w	r5, r8, r3
 80118c4:	9b01      	ldrge	r3, [sp, #4]
 80118c6:	2300      	movlt	r3, #0
 80118c8:	4645      	movge	r5, r8
 80118ca:	e747      	b.n	801175c <_dtoa_r+0x75c>
 80118cc:	9e06      	ldr	r6, [sp, #24]
 80118ce:	9f08      	ldr	r7, [sp, #32]
 80118d0:	4645      	mov	r5, r8
 80118d2:	e74c      	b.n	801176e <_dtoa_r+0x76e>
 80118d4:	9a06      	ldr	r2, [sp, #24]
 80118d6:	e775      	b.n	80117c4 <_dtoa_r+0x7c4>
 80118d8:	9b05      	ldr	r3, [sp, #20]
 80118da:	2b01      	cmp	r3, #1
 80118dc:	dc18      	bgt.n	8011910 <_dtoa_r+0x910>
 80118de:	9b02      	ldr	r3, [sp, #8]
 80118e0:	b9b3      	cbnz	r3, 8011910 <_dtoa_r+0x910>
 80118e2:	9b03      	ldr	r3, [sp, #12]
 80118e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118e8:	b9a3      	cbnz	r3, 8011914 <_dtoa_r+0x914>
 80118ea:	9b03      	ldr	r3, [sp, #12]
 80118ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80118f0:	0d1b      	lsrs	r3, r3, #20
 80118f2:	051b      	lsls	r3, r3, #20
 80118f4:	b12b      	cbz	r3, 8011902 <_dtoa_r+0x902>
 80118f6:	9b04      	ldr	r3, [sp, #16]
 80118f8:	3301      	adds	r3, #1
 80118fa:	9304      	str	r3, [sp, #16]
 80118fc:	f108 0801 	add.w	r8, r8, #1
 8011900:	2301      	movs	r3, #1
 8011902:	9306      	str	r3, [sp, #24]
 8011904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011906:	2b00      	cmp	r3, #0
 8011908:	f47f af74 	bne.w	80117f4 <_dtoa_r+0x7f4>
 801190c:	2001      	movs	r0, #1
 801190e:	e779      	b.n	8011804 <_dtoa_r+0x804>
 8011910:	2300      	movs	r3, #0
 8011912:	e7f6      	b.n	8011902 <_dtoa_r+0x902>
 8011914:	9b02      	ldr	r3, [sp, #8]
 8011916:	e7f4      	b.n	8011902 <_dtoa_r+0x902>
 8011918:	d085      	beq.n	8011826 <_dtoa_r+0x826>
 801191a:	4618      	mov	r0, r3
 801191c:	301c      	adds	r0, #28
 801191e:	e77d      	b.n	801181c <_dtoa_r+0x81c>
 8011920:	40240000 	.word	0x40240000
 8011924:	9b01      	ldr	r3, [sp, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	dc38      	bgt.n	801199c <_dtoa_r+0x99c>
 801192a:	9b05      	ldr	r3, [sp, #20]
 801192c:	2b02      	cmp	r3, #2
 801192e:	dd35      	ble.n	801199c <_dtoa_r+0x99c>
 8011930:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011934:	f1b9 0f00 	cmp.w	r9, #0
 8011938:	d10d      	bne.n	8011956 <_dtoa_r+0x956>
 801193a:	4631      	mov	r1, r6
 801193c:	464b      	mov	r3, r9
 801193e:	2205      	movs	r2, #5
 8011940:	4620      	mov	r0, r4
 8011942:	f000 ff57 	bl	80127f4 <__multadd>
 8011946:	4601      	mov	r1, r0
 8011948:	4606      	mov	r6, r0
 801194a:	4658      	mov	r0, fp
 801194c:	f001 f9b8 	bl	8012cc0 <__mcmp>
 8011950:	2800      	cmp	r0, #0
 8011952:	f73f adbd 	bgt.w	80114d0 <_dtoa_r+0x4d0>
 8011956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011958:	9d00      	ldr	r5, [sp, #0]
 801195a:	ea6f 0a03 	mvn.w	sl, r3
 801195e:	f04f 0800 	mov.w	r8, #0
 8011962:	4631      	mov	r1, r6
 8011964:	4620      	mov	r0, r4
 8011966:	f000 ff23 	bl	80127b0 <_Bfree>
 801196a:	2f00      	cmp	r7, #0
 801196c:	f43f aeb4 	beq.w	80116d8 <_dtoa_r+0x6d8>
 8011970:	f1b8 0f00 	cmp.w	r8, #0
 8011974:	d005      	beq.n	8011982 <_dtoa_r+0x982>
 8011976:	45b8      	cmp	r8, r7
 8011978:	d003      	beq.n	8011982 <_dtoa_r+0x982>
 801197a:	4641      	mov	r1, r8
 801197c:	4620      	mov	r0, r4
 801197e:	f000 ff17 	bl	80127b0 <_Bfree>
 8011982:	4639      	mov	r1, r7
 8011984:	4620      	mov	r0, r4
 8011986:	f000 ff13 	bl	80127b0 <_Bfree>
 801198a:	e6a5      	b.n	80116d8 <_dtoa_r+0x6d8>
 801198c:	2600      	movs	r6, #0
 801198e:	4637      	mov	r7, r6
 8011990:	e7e1      	b.n	8011956 <_dtoa_r+0x956>
 8011992:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011994:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011998:	4637      	mov	r7, r6
 801199a:	e599      	b.n	80114d0 <_dtoa_r+0x4d0>
 801199c:	9b08      	ldr	r3, [sp, #32]
 801199e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	f000 80fd 	beq.w	8011ba2 <_dtoa_r+0xba2>
 80119a8:	2d00      	cmp	r5, #0
 80119aa:	dd05      	ble.n	80119b8 <_dtoa_r+0x9b8>
 80119ac:	4639      	mov	r1, r7
 80119ae:	462a      	mov	r2, r5
 80119b0:	4620      	mov	r0, r4
 80119b2:	f001 f919 	bl	8012be8 <__lshift>
 80119b6:	4607      	mov	r7, r0
 80119b8:	9b06      	ldr	r3, [sp, #24]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d05c      	beq.n	8011a78 <_dtoa_r+0xa78>
 80119be:	6879      	ldr	r1, [r7, #4]
 80119c0:	4620      	mov	r0, r4
 80119c2:	f000 feb5 	bl	8012730 <_Balloc>
 80119c6:	4605      	mov	r5, r0
 80119c8:	b928      	cbnz	r0, 80119d6 <_dtoa_r+0x9d6>
 80119ca:	4b80      	ldr	r3, [pc, #512]	; (8011bcc <_dtoa_r+0xbcc>)
 80119cc:	4602      	mov	r2, r0
 80119ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80119d2:	f7ff bb2e 	b.w	8011032 <_dtoa_r+0x32>
 80119d6:	693a      	ldr	r2, [r7, #16]
 80119d8:	3202      	adds	r2, #2
 80119da:	0092      	lsls	r2, r2, #2
 80119dc:	f107 010c 	add.w	r1, r7, #12
 80119e0:	300c      	adds	r0, #12
 80119e2:	f7fd fc39 	bl	800f258 <memcpy>
 80119e6:	2201      	movs	r2, #1
 80119e8:	4629      	mov	r1, r5
 80119ea:	4620      	mov	r0, r4
 80119ec:	f001 f8fc 	bl	8012be8 <__lshift>
 80119f0:	9b00      	ldr	r3, [sp, #0]
 80119f2:	3301      	adds	r3, #1
 80119f4:	9301      	str	r3, [sp, #4]
 80119f6:	9b00      	ldr	r3, [sp, #0]
 80119f8:	444b      	add	r3, r9
 80119fa:	9307      	str	r3, [sp, #28]
 80119fc:	9b02      	ldr	r3, [sp, #8]
 80119fe:	f003 0301 	and.w	r3, r3, #1
 8011a02:	46b8      	mov	r8, r7
 8011a04:	9306      	str	r3, [sp, #24]
 8011a06:	4607      	mov	r7, r0
 8011a08:	9b01      	ldr	r3, [sp, #4]
 8011a0a:	4631      	mov	r1, r6
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	4658      	mov	r0, fp
 8011a10:	9302      	str	r3, [sp, #8]
 8011a12:	f7ff fa67 	bl	8010ee4 <quorem>
 8011a16:	4603      	mov	r3, r0
 8011a18:	3330      	adds	r3, #48	; 0x30
 8011a1a:	9004      	str	r0, [sp, #16]
 8011a1c:	4641      	mov	r1, r8
 8011a1e:	4658      	mov	r0, fp
 8011a20:	9308      	str	r3, [sp, #32]
 8011a22:	f001 f94d 	bl	8012cc0 <__mcmp>
 8011a26:	463a      	mov	r2, r7
 8011a28:	4681      	mov	r9, r0
 8011a2a:	4631      	mov	r1, r6
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f001 f963 	bl	8012cf8 <__mdiff>
 8011a32:	68c2      	ldr	r2, [r0, #12]
 8011a34:	9b08      	ldr	r3, [sp, #32]
 8011a36:	4605      	mov	r5, r0
 8011a38:	bb02      	cbnz	r2, 8011a7c <_dtoa_r+0xa7c>
 8011a3a:	4601      	mov	r1, r0
 8011a3c:	4658      	mov	r0, fp
 8011a3e:	f001 f93f 	bl	8012cc0 <__mcmp>
 8011a42:	9b08      	ldr	r3, [sp, #32]
 8011a44:	4602      	mov	r2, r0
 8011a46:	4629      	mov	r1, r5
 8011a48:	4620      	mov	r0, r4
 8011a4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011a4e:	f000 feaf 	bl	80127b0 <_Bfree>
 8011a52:	9b05      	ldr	r3, [sp, #20]
 8011a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a56:	9d01      	ldr	r5, [sp, #4]
 8011a58:	ea43 0102 	orr.w	r1, r3, r2
 8011a5c:	9b06      	ldr	r3, [sp, #24]
 8011a5e:	430b      	orrs	r3, r1
 8011a60:	9b08      	ldr	r3, [sp, #32]
 8011a62:	d10d      	bne.n	8011a80 <_dtoa_r+0xa80>
 8011a64:	2b39      	cmp	r3, #57	; 0x39
 8011a66:	d029      	beq.n	8011abc <_dtoa_r+0xabc>
 8011a68:	f1b9 0f00 	cmp.w	r9, #0
 8011a6c:	dd01      	ble.n	8011a72 <_dtoa_r+0xa72>
 8011a6e:	9b04      	ldr	r3, [sp, #16]
 8011a70:	3331      	adds	r3, #49	; 0x31
 8011a72:	9a02      	ldr	r2, [sp, #8]
 8011a74:	7013      	strb	r3, [r2, #0]
 8011a76:	e774      	b.n	8011962 <_dtoa_r+0x962>
 8011a78:	4638      	mov	r0, r7
 8011a7a:	e7b9      	b.n	80119f0 <_dtoa_r+0x9f0>
 8011a7c:	2201      	movs	r2, #1
 8011a7e:	e7e2      	b.n	8011a46 <_dtoa_r+0xa46>
 8011a80:	f1b9 0f00 	cmp.w	r9, #0
 8011a84:	db06      	blt.n	8011a94 <_dtoa_r+0xa94>
 8011a86:	9905      	ldr	r1, [sp, #20]
 8011a88:	ea41 0909 	orr.w	r9, r1, r9
 8011a8c:	9906      	ldr	r1, [sp, #24]
 8011a8e:	ea59 0101 	orrs.w	r1, r9, r1
 8011a92:	d120      	bne.n	8011ad6 <_dtoa_r+0xad6>
 8011a94:	2a00      	cmp	r2, #0
 8011a96:	ddec      	ble.n	8011a72 <_dtoa_r+0xa72>
 8011a98:	4659      	mov	r1, fp
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	9301      	str	r3, [sp, #4]
 8011aa0:	f001 f8a2 	bl	8012be8 <__lshift>
 8011aa4:	4631      	mov	r1, r6
 8011aa6:	4683      	mov	fp, r0
 8011aa8:	f001 f90a 	bl	8012cc0 <__mcmp>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	9b01      	ldr	r3, [sp, #4]
 8011ab0:	dc02      	bgt.n	8011ab8 <_dtoa_r+0xab8>
 8011ab2:	d1de      	bne.n	8011a72 <_dtoa_r+0xa72>
 8011ab4:	07da      	lsls	r2, r3, #31
 8011ab6:	d5dc      	bpl.n	8011a72 <_dtoa_r+0xa72>
 8011ab8:	2b39      	cmp	r3, #57	; 0x39
 8011aba:	d1d8      	bne.n	8011a6e <_dtoa_r+0xa6e>
 8011abc:	9a02      	ldr	r2, [sp, #8]
 8011abe:	2339      	movs	r3, #57	; 0x39
 8011ac0:	7013      	strb	r3, [r2, #0]
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	461d      	mov	r5, r3
 8011ac6:	3b01      	subs	r3, #1
 8011ac8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011acc:	2a39      	cmp	r2, #57	; 0x39
 8011ace:	d050      	beq.n	8011b72 <_dtoa_r+0xb72>
 8011ad0:	3201      	adds	r2, #1
 8011ad2:	701a      	strb	r2, [r3, #0]
 8011ad4:	e745      	b.n	8011962 <_dtoa_r+0x962>
 8011ad6:	2a00      	cmp	r2, #0
 8011ad8:	dd03      	ble.n	8011ae2 <_dtoa_r+0xae2>
 8011ada:	2b39      	cmp	r3, #57	; 0x39
 8011adc:	d0ee      	beq.n	8011abc <_dtoa_r+0xabc>
 8011ade:	3301      	adds	r3, #1
 8011ae0:	e7c7      	b.n	8011a72 <_dtoa_r+0xa72>
 8011ae2:	9a01      	ldr	r2, [sp, #4]
 8011ae4:	9907      	ldr	r1, [sp, #28]
 8011ae6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011aea:	428a      	cmp	r2, r1
 8011aec:	d02a      	beq.n	8011b44 <_dtoa_r+0xb44>
 8011aee:	4659      	mov	r1, fp
 8011af0:	2300      	movs	r3, #0
 8011af2:	220a      	movs	r2, #10
 8011af4:	4620      	mov	r0, r4
 8011af6:	f000 fe7d 	bl	80127f4 <__multadd>
 8011afa:	45b8      	cmp	r8, r7
 8011afc:	4683      	mov	fp, r0
 8011afe:	f04f 0300 	mov.w	r3, #0
 8011b02:	f04f 020a 	mov.w	r2, #10
 8011b06:	4641      	mov	r1, r8
 8011b08:	4620      	mov	r0, r4
 8011b0a:	d107      	bne.n	8011b1c <_dtoa_r+0xb1c>
 8011b0c:	f000 fe72 	bl	80127f4 <__multadd>
 8011b10:	4680      	mov	r8, r0
 8011b12:	4607      	mov	r7, r0
 8011b14:	9b01      	ldr	r3, [sp, #4]
 8011b16:	3301      	adds	r3, #1
 8011b18:	9301      	str	r3, [sp, #4]
 8011b1a:	e775      	b.n	8011a08 <_dtoa_r+0xa08>
 8011b1c:	f000 fe6a 	bl	80127f4 <__multadd>
 8011b20:	4639      	mov	r1, r7
 8011b22:	4680      	mov	r8, r0
 8011b24:	2300      	movs	r3, #0
 8011b26:	220a      	movs	r2, #10
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f000 fe63 	bl	80127f4 <__multadd>
 8011b2e:	4607      	mov	r7, r0
 8011b30:	e7f0      	b.n	8011b14 <_dtoa_r+0xb14>
 8011b32:	f1b9 0f00 	cmp.w	r9, #0
 8011b36:	9a00      	ldr	r2, [sp, #0]
 8011b38:	bfcc      	ite	gt
 8011b3a:	464d      	movgt	r5, r9
 8011b3c:	2501      	movle	r5, #1
 8011b3e:	4415      	add	r5, r2
 8011b40:	f04f 0800 	mov.w	r8, #0
 8011b44:	4659      	mov	r1, fp
 8011b46:	2201      	movs	r2, #1
 8011b48:	4620      	mov	r0, r4
 8011b4a:	9301      	str	r3, [sp, #4]
 8011b4c:	f001 f84c 	bl	8012be8 <__lshift>
 8011b50:	4631      	mov	r1, r6
 8011b52:	4683      	mov	fp, r0
 8011b54:	f001 f8b4 	bl	8012cc0 <__mcmp>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	dcb2      	bgt.n	8011ac2 <_dtoa_r+0xac2>
 8011b5c:	d102      	bne.n	8011b64 <_dtoa_r+0xb64>
 8011b5e:	9b01      	ldr	r3, [sp, #4]
 8011b60:	07db      	lsls	r3, r3, #31
 8011b62:	d4ae      	bmi.n	8011ac2 <_dtoa_r+0xac2>
 8011b64:	462b      	mov	r3, r5
 8011b66:	461d      	mov	r5, r3
 8011b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b6c:	2a30      	cmp	r2, #48	; 0x30
 8011b6e:	d0fa      	beq.n	8011b66 <_dtoa_r+0xb66>
 8011b70:	e6f7      	b.n	8011962 <_dtoa_r+0x962>
 8011b72:	9a00      	ldr	r2, [sp, #0]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d1a5      	bne.n	8011ac4 <_dtoa_r+0xac4>
 8011b78:	f10a 0a01 	add.w	sl, sl, #1
 8011b7c:	2331      	movs	r3, #49	; 0x31
 8011b7e:	e779      	b.n	8011a74 <_dtoa_r+0xa74>
 8011b80:	4b13      	ldr	r3, [pc, #76]	; (8011bd0 <_dtoa_r+0xbd0>)
 8011b82:	f7ff baaf 	b.w	80110e4 <_dtoa_r+0xe4>
 8011b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	f47f aa86 	bne.w	801109a <_dtoa_r+0x9a>
 8011b8e:	4b11      	ldr	r3, [pc, #68]	; (8011bd4 <_dtoa_r+0xbd4>)
 8011b90:	f7ff baa8 	b.w	80110e4 <_dtoa_r+0xe4>
 8011b94:	f1b9 0f00 	cmp.w	r9, #0
 8011b98:	dc03      	bgt.n	8011ba2 <_dtoa_r+0xba2>
 8011b9a:	9b05      	ldr	r3, [sp, #20]
 8011b9c:	2b02      	cmp	r3, #2
 8011b9e:	f73f aec9 	bgt.w	8011934 <_dtoa_r+0x934>
 8011ba2:	9d00      	ldr	r5, [sp, #0]
 8011ba4:	4631      	mov	r1, r6
 8011ba6:	4658      	mov	r0, fp
 8011ba8:	f7ff f99c 	bl	8010ee4 <quorem>
 8011bac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011bb0:	f805 3b01 	strb.w	r3, [r5], #1
 8011bb4:	9a00      	ldr	r2, [sp, #0]
 8011bb6:	1aaa      	subs	r2, r5, r2
 8011bb8:	4591      	cmp	r9, r2
 8011bba:	ddba      	ble.n	8011b32 <_dtoa_r+0xb32>
 8011bbc:	4659      	mov	r1, fp
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	220a      	movs	r2, #10
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f000 fe16 	bl	80127f4 <__multadd>
 8011bc8:	4683      	mov	fp, r0
 8011bca:	e7eb      	b.n	8011ba4 <_dtoa_r+0xba4>
 8011bcc:	0801571c 	.word	0x0801571c
 8011bd0:	0801551c 	.word	0x0801551c
 8011bd4:	08015699 	.word	0x08015699

08011bd8 <__sflush_r>:
 8011bd8:	898a      	ldrh	r2, [r1, #12]
 8011bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bde:	4605      	mov	r5, r0
 8011be0:	0710      	lsls	r0, r2, #28
 8011be2:	460c      	mov	r4, r1
 8011be4:	d458      	bmi.n	8011c98 <__sflush_r+0xc0>
 8011be6:	684b      	ldr	r3, [r1, #4]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	dc05      	bgt.n	8011bf8 <__sflush_r+0x20>
 8011bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	dc02      	bgt.n	8011bf8 <__sflush_r+0x20>
 8011bf2:	2000      	movs	r0, #0
 8011bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bfa:	2e00      	cmp	r6, #0
 8011bfc:	d0f9      	beq.n	8011bf2 <__sflush_r+0x1a>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011c04:	682f      	ldr	r7, [r5, #0]
 8011c06:	602b      	str	r3, [r5, #0]
 8011c08:	d032      	beq.n	8011c70 <__sflush_r+0x98>
 8011c0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c0c:	89a3      	ldrh	r3, [r4, #12]
 8011c0e:	075a      	lsls	r2, r3, #29
 8011c10:	d505      	bpl.n	8011c1e <__sflush_r+0x46>
 8011c12:	6863      	ldr	r3, [r4, #4]
 8011c14:	1ac0      	subs	r0, r0, r3
 8011c16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c18:	b10b      	cbz	r3, 8011c1e <__sflush_r+0x46>
 8011c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c1c:	1ac0      	subs	r0, r0, r3
 8011c1e:	2300      	movs	r3, #0
 8011c20:	4602      	mov	r2, r0
 8011c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c24:	6a21      	ldr	r1, [r4, #32]
 8011c26:	4628      	mov	r0, r5
 8011c28:	47b0      	blx	r6
 8011c2a:	1c43      	adds	r3, r0, #1
 8011c2c:	89a3      	ldrh	r3, [r4, #12]
 8011c2e:	d106      	bne.n	8011c3e <__sflush_r+0x66>
 8011c30:	6829      	ldr	r1, [r5, #0]
 8011c32:	291d      	cmp	r1, #29
 8011c34:	d82c      	bhi.n	8011c90 <__sflush_r+0xb8>
 8011c36:	4a2a      	ldr	r2, [pc, #168]	; (8011ce0 <__sflush_r+0x108>)
 8011c38:	40ca      	lsrs	r2, r1
 8011c3a:	07d6      	lsls	r6, r2, #31
 8011c3c:	d528      	bpl.n	8011c90 <__sflush_r+0xb8>
 8011c3e:	2200      	movs	r2, #0
 8011c40:	6062      	str	r2, [r4, #4]
 8011c42:	04d9      	lsls	r1, r3, #19
 8011c44:	6922      	ldr	r2, [r4, #16]
 8011c46:	6022      	str	r2, [r4, #0]
 8011c48:	d504      	bpl.n	8011c54 <__sflush_r+0x7c>
 8011c4a:	1c42      	adds	r2, r0, #1
 8011c4c:	d101      	bne.n	8011c52 <__sflush_r+0x7a>
 8011c4e:	682b      	ldr	r3, [r5, #0]
 8011c50:	b903      	cbnz	r3, 8011c54 <__sflush_r+0x7c>
 8011c52:	6560      	str	r0, [r4, #84]	; 0x54
 8011c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c56:	602f      	str	r7, [r5, #0]
 8011c58:	2900      	cmp	r1, #0
 8011c5a:	d0ca      	beq.n	8011bf2 <__sflush_r+0x1a>
 8011c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c60:	4299      	cmp	r1, r3
 8011c62:	d002      	beq.n	8011c6a <__sflush_r+0x92>
 8011c64:	4628      	mov	r0, r5
 8011c66:	f001 fa2d 	bl	80130c4 <_free_r>
 8011c6a:	2000      	movs	r0, #0
 8011c6c:	6360      	str	r0, [r4, #52]	; 0x34
 8011c6e:	e7c1      	b.n	8011bf4 <__sflush_r+0x1c>
 8011c70:	6a21      	ldr	r1, [r4, #32]
 8011c72:	2301      	movs	r3, #1
 8011c74:	4628      	mov	r0, r5
 8011c76:	47b0      	blx	r6
 8011c78:	1c41      	adds	r1, r0, #1
 8011c7a:	d1c7      	bne.n	8011c0c <__sflush_r+0x34>
 8011c7c:	682b      	ldr	r3, [r5, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d0c4      	beq.n	8011c0c <__sflush_r+0x34>
 8011c82:	2b1d      	cmp	r3, #29
 8011c84:	d001      	beq.n	8011c8a <__sflush_r+0xb2>
 8011c86:	2b16      	cmp	r3, #22
 8011c88:	d101      	bne.n	8011c8e <__sflush_r+0xb6>
 8011c8a:	602f      	str	r7, [r5, #0]
 8011c8c:	e7b1      	b.n	8011bf2 <__sflush_r+0x1a>
 8011c8e:	89a3      	ldrh	r3, [r4, #12]
 8011c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c94:	81a3      	strh	r3, [r4, #12]
 8011c96:	e7ad      	b.n	8011bf4 <__sflush_r+0x1c>
 8011c98:	690f      	ldr	r7, [r1, #16]
 8011c9a:	2f00      	cmp	r7, #0
 8011c9c:	d0a9      	beq.n	8011bf2 <__sflush_r+0x1a>
 8011c9e:	0793      	lsls	r3, r2, #30
 8011ca0:	680e      	ldr	r6, [r1, #0]
 8011ca2:	bf08      	it	eq
 8011ca4:	694b      	ldreq	r3, [r1, #20]
 8011ca6:	600f      	str	r7, [r1, #0]
 8011ca8:	bf18      	it	ne
 8011caa:	2300      	movne	r3, #0
 8011cac:	eba6 0807 	sub.w	r8, r6, r7
 8011cb0:	608b      	str	r3, [r1, #8]
 8011cb2:	f1b8 0f00 	cmp.w	r8, #0
 8011cb6:	dd9c      	ble.n	8011bf2 <__sflush_r+0x1a>
 8011cb8:	6a21      	ldr	r1, [r4, #32]
 8011cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011cbc:	4643      	mov	r3, r8
 8011cbe:	463a      	mov	r2, r7
 8011cc0:	4628      	mov	r0, r5
 8011cc2:	47b0      	blx	r6
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	dc06      	bgt.n	8011cd6 <__sflush_r+0xfe>
 8011cc8:	89a3      	ldrh	r3, [r4, #12]
 8011cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cce:	81a3      	strh	r3, [r4, #12]
 8011cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd4:	e78e      	b.n	8011bf4 <__sflush_r+0x1c>
 8011cd6:	4407      	add	r7, r0
 8011cd8:	eba8 0800 	sub.w	r8, r8, r0
 8011cdc:	e7e9      	b.n	8011cb2 <__sflush_r+0xda>
 8011cde:	bf00      	nop
 8011ce0:	20400001 	.word	0x20400001

08011ce4 <_fflush_r>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	690b      	ldr	r3, [r1, #16]
 8011ce8:	4605      	mov	r5, r0
 8011cea:	460c      	mov	r4, r1
 8011cec:	b913      	cbnz	r3, 8011cf4 <_fflush_r+0x10>
 8011cee:	2500      	movs	r5, #0
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	bd38      	pop	{r3, r4, r5, pc}
 8011cf4:	b118      	cbz	r0, 8011cfe <_fflush_r+0x1a>
 8011cf6:	6983      	ldr	r3, [r0, #24]
 8011cf8:	b90b      	cbnz	r3, 8011cfe <_fflush_r+0x1a>
 8011cfa:	f000 f887 	bl	8011e0c <__sinit>
 8011cfe:	4b14      	ldr	r3, [pc, #80]	; (8011d50 <_fflush_r+0x6c>)
 8011d00:	429c      	cmp	r4, r3
 8011d02:	d11b      	bne.n	8011d3c <_fflush_r+0x58>
 8011d04:	686c      	ldr	r4, [r5, #4]
 8011d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d0ef      	beq.n	8011cee <_fflush_r+0xa>
 8011d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011d10:	07d0      	lsls	r0, r2, #31
 8011d12:	d404      	bmi.n	8011d1e <_fflush_r+0x3a>
 8011d14:	0599      	lsls	r1, r3, #22
 8011d16:	d402      	bmi.n	8011d1e <_fflush_r+0x3a>
 8011d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d1a:	f000 fc88 	bl	801262e <__retarget_lock_acquire_recursive>
 8011d1e:	4628      	mov	r0, r5
 8011d20:	4621      	mov	r1, r4
 8011d22:	f7ff ff59 	bl	8011bd8 <__sflush_r>
 8011d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d28:	07da      	lsls	r2, r3, #31
 8011d2a:	4605      	mov	r5, r0
 8011d2c:	d4e0      	bmi.n	8011cf0 <_fflush_r+0xc>
 8011d2e:	89a3      	ldrh	r3, [r4, #12]
 8011d30:	059b      	lsls	r3, r3, #22
 8011d32:	d4dd      	bmi.n	8011cf0 <_fflush_r+0xc>
 8011d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d36:	f000 fc7b 	bl	8012630 <__retarget_lock_release_recursive>
 8011d3a:	e7d9      	b.n	8011cf0 <_fflush_r+0xc>
 8011d3c:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <_fflush_r+0x70>)
 8011d3e:	429c      	cmp	r4, r3
 8011d40:	d101      	bne.n	8011d46 <_fflush_r+0x62>
 8011d42:	68ac      	ldr	r4, [r5, #8]
 8011d44:	e7df      	b.n	8011d06 <_fflush_r+0x22>
 8011d46:	4b04      	ldr	r3, [pc, #16]	; (8011d58 <_fflush_r+0x74>)
 8011d48:	429c      	cmp	r4, r3
 8011d4a:	bf08      	it	eq
 8011d4c:	68ec      	ldreq	r4, [r5, #12]
 8011d4e:	e7da      	b.n	8011d06 <_fflush_r+0x22>
 8011d50:	08015750 	.word	0x08015750
 8011d54:	08015770 	.word	0x08015770
 8011d58:	08015730 	.word	0x08015730

08011d5c <std>:
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	b510      	push	{r4, lr}
 8011d60:	4604      	mov	r4, r0
 8011d62:	e9c0 3300 	strd	r3, r3, [r0]
 8011d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d6a:	6083      	str	r3, [r0, #8]
 8011d6c:	8181      	strh	r1, [r0, #12]
 8011d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8011d70:	81c2      	strh	r2, [r0, #14]
 8011d72:	6183      	str	r3, [r0, #24]
 8011d74:	4619      	mov	r1, r3
 8011d76:	2208      	movs	r2, #8
 8011d78:	305c      	adds	r0, #92	; 0x5c
 8011d7a:	f7fd fa7b 	bl	800f274 <memset>
 8011d7e:	4b05      	ldr	r3, [pc, #20]	; (8011d94 <std+0x38>)
 8011d80:	6263      	str	r3, [r4, #36]	; 0x24
 8011d82:	4b05      	ldr	r3, [pc, #20]	; (8011d98 <std+0x3c>)
 8011d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d86:	4b05      	ldr	r3, [pc, #20]	; (8011d9c <std+0x40>)
 8011d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d8a:	4b05      	ldr	r3, [pc, #20]	; (8011da0 <std+0x44>)
 8011d8c:	6224      	str	r4, [r4, #32]
 8011d8e:	6323      	str	r3, [r4, #48]	; 0x30
 8011d90:	bd10      	pop	{r4, pc}
 8011d92:	bf00      	nop
 8011d94:	080137b9 	.word	0x080137b9
 8011d98:	080137db 	.word	0x080137db
 8011d9c:	08013813 	.word	0x08013813
 8011da0:	08013837 	.word	0x08013837

08011da4 <_cleanup_r>:
 8011da4:	4901      	ldr	r1, [pc, #4]	; (8011dac <_cleanup_r+0x8>)
 8011da6:	f000 b8af 	b.w	8011f08 <_fwalk_reent>
 8011daa:	bf00      	nop
 8011dac:	08011ce5 	.word	0x08011ce5

08011db0 <__sfmoreglue>:
 8011db0:	b570      	push	{r4, r5, r6, lr}
 8011db2:	1e4a      	subs	r2, r1, #1
 8011db4:	2568      	movs	r5, #104	; 0x68
 8011db6:	4355      	muls	r5, r2
 8011db8:	460e      	mov	r6, r1
 8011dba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011dbe:	f001 f9d1 	bl	8013164 <_malloc_r>
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	b140      	cbz	r0, 8011dd8 <__sfmoreglue+0x28>
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	e9c0 1600 	strd	r1, r6, [r0]
 8011dcc:	300c      	adds	r0, #12
 8011dce:	60a0      	str	r0, [r4, #8]
 8011dd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011dd4:	f7fd fa4e 	bl	800f274 <memset>
 8011dd8:	4620      	mov	r0, r4
 8011dda:	bd70      	pop	{r4, r5, r6, pc}

08011ddc <__sfp_lock_acquire>:
 8011ddc:	4801      	ldr	r0, [pc, #4]	; (8011de4 <__sfp_lock_acquire+0x8>)
 8011dde:	f000 bc26 	b.w	801262e <__retarget_lock_acquire_recursive>
 8011de2:	bf00      	nop
 8011de4:	20005884 	.word	0x20005884

08011de8 <__sfp_lock_release>:
 8011de8:	4801      	ldr	r0, [pc, #4]	; (8011df0 <__sfp_lock_release+0x8>)
 8011dea:	f000 bc21 	b.w	8012630 <__retarget_lock_release_recursive>
 8011dee:	bf00      	nop
 8011df0:	20005884 	.word	0x20005884

08011df4 <__sinit_lock_acquire>:
 8011df4:	4801      	ldr	r0, [pc, #4]	; (8011dfc <__sinit_lock_acquire+0x8>)
 8011df6:	f000 bc1a 	b.w	801262e <__retarget_lock_acquire_recursive>
 8011dfa:	bf00      	nop
 8011dfc:	2000587f 	.word	0x2000587f

08011e00 <__sinit_lock_release>:
 8011e00:	4801      	ldr	r0, [pc, #4]	; (8011e08 <__sinit_lock_release+0x8>)
 8011e02:	f000 bc15 	b.w	8012630 <__retarget_lock_release_recursive>
 8011e06:	bf00      	nop
 8011e08:	2000587f 	.word	0x2000587f

08011e0c <__sinit>:
 8011e0c:	b510      	push	{r4, lr}
 8011e0e:	4604      	mov	r4, r0
 8011e10:	f7ff fff0 	bl	8011df4 <__sinit_lock_acquire>
 8011e14:	69a3      	ldr	r3, [r4, #24]
 8011e16:	b11b      	cbz	r3, 8011e20 <__sinit+0x14>
 8011e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e1c:	f7ff bff0 	b.w	8011e00 <__sinit_lock_release>
 8011e20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011e24:	6523      	str	r3, [r4, #80]	; 0x50
 8011e26:	4b13      	ldr	r3, [pc, #76]	; (8011e74 <__sinit+0x68>)
 8011e28:	4a13      	ldr	r2, [pc, #76]	; (8011e78 <__sinit+0x6c>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011e2e:	42a3      	cmp	r3, r4
 8011e30:	bf04      	itt	eq
 8011e32:	2301      	moveq	r3, #1
 8011e34:	61a3      	streq	r3, [r4, #24]
 8011e36:	4620      	mov	r0, r4
 8011e38:	f000 f820 	bl	8011e7c <__sfp>
 8011e3c:	6060      	str	r0, [r4, #4]
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f000 f81c 	bl	8011e7c <__sfp>
 8011e44:	60a0      	str	r0, [r4, #8]
 8011e46:	4620      	mov	r0, r4
 8011e48:	f000 f818 	bl	8011e7c <__sfp>
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	60e0      	str	r0, [r4, #12]
 8011e50:	2104      	movs	r1, #4
 8011e52:	6860      	ldr	r0, [r4, #4]
 8011e54:	f7ff ff82 	bl	8011d5c <std>
 8011e58:	68a0      	ldr	r0, [r4, #8]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	2109      	movs	r1, #9
 8011e5e:	f7ff ff7d 	bl	8011d5c <std>
 8011e62:	68e0      	ldr	r0, [r4, #12]
 8011e64:	2202      	movs	r2, #2
 8011e66:	2112      	movs	r1, #18
 8011e68:	f7ff ff78 	bl	8011d5c <std>
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	61a3      	str	r3, [r4, #24]
 8011e70:	e7d2      	b.n	8011e18 <__sinit+0xc>
 8011e72:	bf00      	nop
 8011e74:	08015508 	.word	0x08015508
 8011e78:	08011da5 	.word	0x08011da5

08011e7c <__sfp>:
 8011e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e7e:	4607      	mov	r7, r0
 8011e80:	f7ff ffac 	bl	8011ddc <__sfp_lock_acquire>
 8011e84:	4b1e      	ldr	r3, [pc, #120]	; (8011f00 <__sfp+0x84>)
 8011e86:	681e      	ldr	r6, [r3, #0]
 8011e88:	69b3      	ldr	r3, [r6, #24]
 8011e8a:	b913      	cbnz	r3, 8011e92 <__sfp+0x16>
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f7ff ffbd 	bl	8011e0c <__sinit>
 8011e92:	3648      	adds	r6, #72	; 0x48
 8011e94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	d503      	bpl.n	8011ea4 <__sfp+0x28>
 8011e9c:	6833      	ldr	r3, [r6, #0]
 8011e9e:	b30b      	cbz	r3, 8011ee4 <__sfp+0x68>
 8011ea0:	6836      	ldr	r6, [r6, #0]
 8011ea2:	e7f7      	b.n	8011e94 <__sfp+0x18>
 8011ea4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ea8:	b9d5      	cbnz	r5, 8011ee0 <__sfp+0x64>
 8011eaa:	4b16      	ldr	r3, [pc, #88]	; (8011f04 <__sfp+0x88>)
 8011eac:	60e3      	str	r3, [r4, #12]
 8011eae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011eb2:	6665      	str	r5, [r4, #100]	; 0x64
 8011eb4:	f000 fbba 	bl	801262c <__retarget_lock_init_recursive>
 8011eb8:	f7ff ff96 	bl	8011de8 <__sfp_lock_release>
 8011ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011ec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011ec4:	6025      	str	r5, [r4, #0]
 8011ec6:	61a5      	str	r5, [r4, #24]
 8011ec8:	2208      	movs	r2, #8
 8011eca:	4629      	mov	r1, r5
 8011ecc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ed0:	f7fd f9d0 	bl	800f274 <memset>
 8011ed4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ed8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011edc:	4620      	mov	r0, r4
 8011ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee0:	3468      	adds	r4, #104	; 0x68
 8011ee2:	e7d9      	b.n	8011e98 <__sfp+0x1c>
 8011ee4:	2104      	movs	r1, #4
 8011ee6:	4638      	mov	r0, r7
 8011ee8:	f7ff ff62 	bl	8011db0 <__sfmoreglue>
 8011eec:	4604      	mov	r4, r0
 8011eee:	6030      	str	r0, [r6, #0]
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d1d5      	bne.n	8011ea0 <__sfp+0x24>
 8011ef4:	f7ff ff78 	bl	8011de8 <__sfp_lock_release>
 8011ef8:	230c      	movs	r3, #12
 8011efa:	603b      	str	r3, [r7, #0]
 8011efc:	e7ee      	b.n	8011edc <__sfp+0x60>
 8011efe:	bf00      	nop
 8011f00:	08015508 	.word	0x08015508
 8011f04:	ffff0001 	.word	0xffff0001

08011f08 <_fwalk_reent>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	4606      	mov	r6, r0
 8011f0e:	4688      	mov	r8, r1
 8011f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011f14:	2700      	movs	r7, #0
 8011f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8011f1e:	d505      	bpl.n	8011f2c <_fwalk_reent+0x24>
 8011f20:	6824      	ldr	r4, [r4, #0]
 8011f22:	2c00      	cmp	r4, #0
 8011f24:	d1f7      	bne.n	8011f16 <_fwalk_reent+0xe>
 8011f26:	4638      	mov	r0, r7
 8011f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f2c:	89ab      	ldrh	r3, [r5, #12]
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d907      	bls.n	8011f42 <_fwalk_reent+0x3a>
 8011f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f36:	3301      	adds	r3, #1
 8011f38:	d003      	beq.n	8011f42 <_fwalk_reent+0x3a>
 8011f3a:	4629      	mov	r1, r5
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	47c0      	blx	r8
 8011f40:	4307      	orrs	r7, r0
 8011f42:	3568      	adds	r5, #104	; 0x68
 8011f44:	e7e9      	b.n	8011f1a <_fwalk_reent+0x12>

08011f46 <rshift>:
 8011f46:	6903      	ldr	r3, [r0, #16]
 8011f48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011f54:	f100 0414 	add.w	r4, r0, #20
 8011f58:	dd45      	ble.n	8011fe6 <rshift+0xa0>
 8011f5a:	f011 011f 	ands.w	r1, r1, #31
 8011f5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011f62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011f66:	d10c      	bne.n	8011f82 <rshift+0x3c>
 8011f68:	f100 0710 	add.w	r7, r0, #16
 8011f6c:	4629      	mov	r1, r5
 8011f6e:	42b1      	cmp	r1, r6
 8011f70:	d334      	bcc.n	8011fdc <rshift+0x96>
 8011f72:	1a9b      	subs	r3, r3, r2
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	1eea      	subs	r2, r5, #3
 8011f78:	4296      	cmp	r6, r2
 8011f7a:	bf38      	it	cc
 8011f7c:	2300      	movcc	r3, #0
 8011f7e:	4423      	add	r3, r4
 8011f80:	e015      	b.n	8011fae <rshift+0x68>
 8011f82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011f86:	f1c1 0820 	rsb	r8, r1, #32
 8011f8a:	40cf      	lsrs	r7, r1
 8011f8c:	f105 0e04 	add.w	lr, r5, #4
 8011f90:	46a1      	mov	r9, r4
 8011f92:	4576      	cmp	r6, lr
 8011f94:	46f4      	mov	ip, lr
 8011f96:	d815      	bhi.n	8011fc4 <rshift+0x7e>
 8011f98:	1a9b      	subs	r3, r3, r2
 8011f9a:	009a      	lsls	r2, r3, #2
 8011f9c:	3a04      	subs	r2, #4
 8011f9e:	3501      	adds	r5, #1
 8011fa0:	42ae      	cmp	r6, r5
 8011fa2:	bf38      	it	cc
 8011fa4:	2200      	movcc	r2, #0
 8011fa6:	18a3      	adds	r3, r4, r2
 8011fa8:	50a7      	str	r7, [r4, r2]
 8011faa:	b107      	cbz	r7, 8011fae <rshift+0x68>
 8011fac:	3304      	adds	r3, #4
 8011fae:	1b1a      	subs	r2, r3, r4
 8011fb0:	42a3      	cmp	r3, r4
 8011fb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011fb6:	bf08      	it	eq
 8011fb8:	2300      	moveq	r3, #0
 8011fba:	6102      	str	r2, [r0, #16]
 8011fbc:	bf08      	it	eq
 8011fbe:	6143      	streq	r3, [r0, #20]
 8011fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fc4:	f8dc c000 	ldr.w	ip, [ip]
 8011fc8:	fa0c fc08 	lsl.w	ip, ip, r8
 8011fcc:	ea4c 0707 	orr.w	r7, ip, r7
 8011fd0:	f849 7b04 	str.w	r7, [r9], #4
 8011fd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011fd8:	40cf      	lsrs	r7, r1
 8011fda:	e7da      	b.n	8011f92 <rshift+0x4c>
 8011fdc:	f851 cb04 	ldr.w	ip, [r1], #4
 8011fe0:	f847 cf04 	str.w	ip, [r7, #4]!
 8011fe4:	e7c3      	b.n	8011f6e <rshift+0x28>
 8011fe6:	4623      	mov	r3, r4
 8011fe8:	e7e1      	b.n	8011fae <rshift+0x68>

08011fea <__hexdig_fun>:
 8011fea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011fee:	2b09      	cmp	r3, #9
 8011ff0:	d802      	bhi.n	8011ff8 <__hexdig_fun+0xe>
 8011ff2:	3820      	subs	r0, #32
 8011ff4:	b2c0      	uxtb	r0, r0
 8011ff6:	4770      	bx	lr
 8011ff8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011ffc:	2b05      	cmp	r3, #5
 8011ffe:	d801      	bhi.n	8012004 <__hexdig_fun+0x1a>
 8012000:	3847      	subs	r0, #71	; 0x47
 8012002:	e7f7      	b.n	8011ff4 <__hexdig_fun+0xa>
 8012004:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012008:	2b05      	cmp	r3, #5
 801200a:	d801      	bhi.n	8012010 <__hexdig_fun+0x26>
 801200c:	3827      	subs	r0, #39	; 0x27
 801200e:	e7f1      	b.n	8011ff4 <__hexdig_fun+0xa>
 8012010:	2000      	movs	r0, #0
 8012012:	4770      	bx	lr

08012014 <__gethex>:
 8012014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012018:	ed2d 8b02 	vpush	{d8}
 801201c:	b089      	sub	sp, #36	; 0x24
 801201e:	ee08 0a10 	vmov	s16, r0
 8012022:	9304      	str	r3, [sp, #16]
 8012024:	4bbc      	ldr	r3, [pc, #752]	; (8012318 <__gethex+0x304>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	9301      	str	r3, [sp, #4]
 801202a:	4618      	mov	r0, r3
 801202c:	468b      	mov	fp, r1
 801202e:	4690      	mov	r8, r2
 8012030:	f7ee f8de 	bl	80001f0 <strlen>
 8012034:	9b01      	ldr	r3, [sp, #4]
 8012036:	f8db 2000 	ldr.w	r2, [fp]
 801203a:	4403      	add	r3, r0
 801203c:	4682      	mov	sl, r0
 801203e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012042:	9305      	str	r3, [sp, #20]
 8012044:	1c93      	adds	r3, r2, #2
 8012046:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801204a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801204e:	32fe      	adds	r2, #254	; 0xfe
 8012050:	18d1      	adds	r1, r2, r3
 8012052:	461f      	mov	r7, r3
 8012054:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012058:	9100      	str	r1, [sp, #0]
 801205a:	2830      	cmp	r0, #48	; 0x30
 801205c:	d0f8      	beq.n	8012050 <__gethex+0x3c>
 801205e:	f7ff ffc4 	bl	8011fea <__hexdig_fun>
 8012062:	4604      	mov	r4, r0
 8012064:	2800      	cmp	r0, #0
 8012066:	d13a      	bne.n	80120de <__gethex+0xca>
 8012068:	9901      	ldr	r1, [sp, #4]
 801206a:	4652      	mov	r2, sl
 801206c:	4638      	mov	r0, r7
 801206e:	f001 fbe6 	bl	801383e <strncmp>
 8012072:	4605      	mov	r5, r0
 8012074:	2800      	cmp	r0, #0
 8012076:	d168      	bne.n	801214a <__gethex+0x136>
 8012078:	f817 000a 	ldrb.w	r0, [r7, sl]
 801207c:	eb07 060a 	add.w	r6, r7, sl
 8012080:	f7ff ffb3 	bl	8011fea <__hexdig_fun>
 8012084:	2800      	cmp	r0, #0
 8012086:	d062      	beq.n	801214e <__gethex+0x13a>
 8012088:	4633      	mov	r3, r6
 801208a:	7818      	ldrb	r0, [r3, #0]
 801208c:	2830      	cmp	r0, #48	; 0x30
 801208e:	461f      	mov	r7, r3
 8012090:	f103 0301 	add.w	r3, r3, #1
 8012094:	d0f9      	beq.n	801208a <__gethex+0x76>
 8012096:	f7ff ffa8 	bl	8011fea <__hexdig_fun>
 801209a:	2301      	movs	r3, #1
 801209c:	fab0 f480 	clz	r4, r0
 80120a0:	0964      	lsrs	r4, r4, #5
 80120a2:	4635      	mov	r5, r6
 80120a4:	9300      	str	r3, [sp, #0]
 80120a6:	463a      	mov	r2, r7
 80120a8:	4616      	mov	r6, r2
 80120aa:	3201      	adds	r2, #1
 80120ac:	7830      	ldrb	r0, [r6, #0]
 80120ae:	f7ff ff9c 	bl	8011fea <__hexdig_fun>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d1f8      	bne.n	80120a8 <__gethex+0x94>
 80120b6:	9901      	ldr	r1, [sp, #4]
 80120b8:	4652      	mov	r2, sl
 80120ba:	4630      	mov	r0, r6
 80120bc:	f001 fbbf 	bl	801383e <strncmp>
 80120c0:	b980      	cbnz	r0, 80120e4 <__gethex+0xd0>
 80120c2:	b94d      	cbnz	r5, 80120d8 <__gethex+0xc4>
 80120c4:	eb06 050a 	add.w	r5, r6, sl
 80120c8:	462a      	mov	r2, r5
 80120ca:	4616      	mov	r6, r2
 80120cc:	3201      	adds	r2, #1
 80120ce:	7830      	ldrb	r0, [r6, #0]
 80120d0:	f7ff ff8b 	bl	8011fea <__hexdig_fun>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d1f8      	bne.n	80120ca <__gethex+0xb6>
 80120d8:	1bad      	subs	r5, r5, r6
 80120da:	00ad      	lsls	r5, r5, #2
 80120dc:	e004      	b.n	80120e8 <__gethex+0xd4>
 80120de:	2400      	movs	r4, #0
 80120e0:	4625      	mov	r5, r4
 80120e2:	e7e0      	b.n	80120a6 <__gethex+0x92>
 80120e4:	2d00      	cmp	r5, #0
 80120e6:	d1f7      	bne.n	80120d8 <__gethex+0xc4>
 80120e8:	7833      	ldrb	r3, [r6, #0]
 80120ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80120ee:	2b50      	cmp	r3, #80	; 0x50
 80120f0:	d13b      	bne.n	801216a <__gethex+0x156>
 80120f2:	7873      	ldrb	r3, [r6, #1]
 80120f4:	2b2b      	cmp	r3, #43	; 0x2b
 80120f6:	d02c      	beq.n	8012152 <__gethex+0x13e>
 80120f8:	2b2d      	cmp	r3, #45	; 0x2d
 80120fa:	d02e      	beq.n	801215a <__gethex+0x146>
 80120fc:	1c71      	adds	r1, r6, #1
 80120fe:	f04f 0900 	mov.w	r9, #0
 8012102:	7808      	ldrb	r0, [r1, #0]
 8012104:	f7ff ff71 	bl	8011fea <__hexdig_fun>
 8012108:	1e43      	subs	r3, r0, #1
 801210a:	b2db      	uxtb	r3, r3
 801210c:	2b18      	cmp	r3, #24
 801210e:	d82c      	bhi.n	801216a <__gethex+0x156>
 8012110:	f1a0 0210 	sub.w	r2, r0, #16
 8012114:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012118:	f7ff ff67 	bl	8011fea <__hexdig_fun>
 801211c:	1e43      	subs	r3, r0, #1
 801211e:	b2db      	uxtb	r3, r3
 8012120:	2b18      	cmp	r3, #24
 8012122:	d91d      	bls.n	8012160 <__gethex+0x14c>
 8012124:	f1b9 0f00 	cmp.w	r9, #0
 8012128:	d000      	beq.n	801212c <__gethex+0x118>
 801212a:	4252      	negs	r2, r2
 801212c:	4415      	add	r5, r2
 801212e:	f8cb 1000 	str.w	r1, [fp]
 8012132:	b1e4      	cbz	r4, 801216e <__gethex+0x15a>
 8012134:	9b00      	ldr	r3, [sp, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	bf14      	ite	ne
 801213a:	2700      	movne	r7, #0
 801213c:	2706      	moveq	r7, #6
 801213e:	4638      	mov	r0, r7
 8012140:	b009      	add	sp, #36	; 0x24
 8012142:	ecbd 8b02 	vpop	{d8}
 8012146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214a:	463e      	mov	r6, r7
 801214c:	4625      	mov	r5, r4
 801214e:	2401      	movs	r4, #1
 8012150:	e7ca      	b.n	80120e8 <__gethex+0xd4>
 8012152:	f04f 0900 	mov.w	r9, #0
 8012156:	1cb1      	adds	r1, r6, #2
 8012158:	e7d3      	b.n	8012102 <__gethex+0xee>
 801215a:	f04f 0901 	mov.w	r9, #1
 801215e:	e7fa      	b.n	8012156 <__gethex+0x142>
 8012160:	230a      	movs	r3, #10
 8012162:	fb03 0202 	mla	r2, r3, r2, r0
 8012166:	3a10      	subs	r2, #16
 8012168:	e7d4      	b.n	8012114 <__gethex+0x100>
 801216a:	4631      	mov	r1, r6
 801216c:	e7df      	b.n	801212e <__gethex+0x11a>
 801216e:	1bf3      	subs	r3, r6, r7
 8012170:	3b01      	subs	r3, #1
 8012172:	4621      	mov	r1, r4
 8012174:	2b07      	cmp	r3, #7
 8012176:	dc0b      	bgt.n	8012190 <__gethex+0x17c>
 8012178:	ee18 0a10 	vmov	r0, s16
 801217c:	f000 fad8 	bl	8012730 <_Balloc>
 8012180:	4604      	mov	r4, r0
 8012182:	b940      	cbnz	r0, 8012196 <__gethex+0x182>
 8012184:	4b65      	ldr	r3, [pc, #404]	; (801231c <__gethex+0x308>)
 8012186:	4602      	mov	r2, r0
 8012188:	21de      	movs	r1, #222	; 0xde
 801218a:	4865      	ldr	r0, [pc, #404]	; (8012320 <__gethex+0x30c>)
 801218c:	f001 fc4a 	bl	8013a24 <__assert_func>
 8012190:	3101      	adds	r1, #1
 8012192:	105b      	asrs	r3, r3, #1
 8012194:	e7ee      	b.n	8012174 <__gethex+0x160>
 8012196:	f100 0914 	add.w	r9, r0, #20
 801219a:	f04f 0b00 	mov.w	fp, #0
 801219e:	f1ca 0301 	rsb	r3, sl, #1
 80121a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80121a6:	f8cd b000 	str.w	fp, [sp]
 80121aa:	9306      	str	r3, [sp, #24]
 80121ac:	42b7      	cmp	r7, r6
 80121ae:	d340      	bcc.n	8012232 <__gethex+0x21e>
 80121b0:	9802      	ldr	r0, [sp, #8]
 80121b2:	9b00      	ldr	r3, [sp, #0]
 80121b4:	f840 3b04 	str.w	r3, [r0], #4
 80121b8:	eba0 0009 	sub.w	r0, r0, r9
 80121bc:	1080      	asrs	r0, r0, #2
 80121be:	0146      	lsls	r6, r0, #5
 80121c0:	6120      	str	r0, [r4, #16]
 80121c2:	4618      	mov	r0, r3
 80121c4:	f000 fbaa 	bl	801291c <__hi0bits>
 80121c8:	1a30      	subs	r0, r6, r0
 80121ca:	f8d8 6000 	ldr.w	r6, [r8]
 80121ce:	42b0      	cmp	r0, r6
 80121d0:	dd63      	ble.n	801229a <__gethex+0x286>
 80121d2:	1b87      	subs	r7, r0, r6
 80121d4:	4639      	mov	r1, r7
 80121d6:	4620      	mov	r0, r4
 80121d8:	f000 ff44 	bl	8013064 <__any_on>
 80121dc:	4682      	mov	sl, r0
 80121de:	b1a8      	cbz	r0, 801220c <__gethex+0x1f8>
 80121e0:	1e7b      	subs	r3, r7, #1
 80121e2:	1159      	asrs	r1, r3, #5
 80121e4:	f003 021f 	and.w	r2, r3, #31
 80121e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80121ec:	f04f 0a01 	mov.w	sl, #1
 80121f0:	fa0a f202 	lsl.w	r2, sl, r2
 80121f4:	420a      	tst	r2, r1
 80121f6:	d009      	beq.n	801220c <__gethex+0x1f8>
 80121f8:	4553      	cmp	r3, sl
 80121fa:	dd05      	ble.n	8012208 <__gethex+0x1f4>
 80121fc:	1eb9      	subs	r1, r7, #2
 80121fe:	4620      	mov	r0, r4
 8012200:	f000 ff30 	bl	8013064 <__any_on>
 8012204:	2800      	cmp	r0, #0
 8012206:	d145      	bne.n	8012294 <__gethex+0x280>
 8012208:	f04f 0a02 	mov.w	sl, #2
 801220c:	4639      	mov	r1, r7
 801220e:	4620      	mov	r0, r4
 8012210:	f7ff fe99 	bl	8011f46 <rshift>
 8012214:	443d      	add	r5, r7
 8012216:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801221a:	42ab      	cmp	r3, r5
 801221c:	da4c      	bge.n	80122b8 <__gethex+0x2a4>
 801221e:	ee18 0a10 	vmov	r0, s16
 8012222:	4621      	mov	r1, r4
 8012224:	f000 fac4 	bl	80127b0 <_Bfree>
 8012228:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801222a:	2300      	movs	r3, #0
 801222c:	6013      	str	r3, [r2, #0]
 801222e:	27a3      	movs	r7, #163	; 0xa3
 8012230:	e785      	b.n	801213e <__gethex+0x12a>
 8012232:	1e73      	subs	r3, r6, #1
 8012234:	9a05      	ldr	r2, [sp, #20]
 8012236:	9303      	str	r3, [sp, #12]
 8012238:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801223c:	4293      	cmp	r3, r2
 801223e:	d019      	beq.n	8012274 <__gethex+0x260>
 8012240:	f1bb 0f20 	cmp.w	fp, #32
 8012244:	d107      	bne.n	8012256 <__gethex+0x242>
 8012246:	9b02      	ldr	r3, [sp, #8]
 8012248:	9a00      	ldr	r2, [sp, #0]
 801224a:	f843 2b04 	str.w	r2, [r3], #4
 801224e:	9302      	str	r3, [sp, #8]
 8012250:	2300      	movs	r3, #0
 8012252:	9300      	str	r3, [sp, #0]
 8012254:	469b      	mov	fp, r3
 8012256:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801225a:	f7ff fec6 	bl	8011fea <__hexdig_fun>
 801225e:	9b00      	ldr	r3, [sp, #0]
 8012260:	f000 000f 	and.w	r0, r0, #15
 8012264:	fa00 f00b 	lsl.w	r0, r0, fp
 8012268:	4303      	orrs	r3, r0
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	f10b 0b04 	add.w	fp, fp, #4
 8012270:	9b03      	ldr	r3, [sp, #12]
 8012272:	e00d      	b.n	8012290 <__gethex+0x27c>
 8012274:	9b03      	ldr	r3, [sp, #12]
 8012276:	9a06      	ldr	r2, [sp, #24]
 8012278:	4413      	add	r3, r2
 801227a:	42bb      	cmp	r3, r7
 801227c:	d3e0      	bcc.n	8012240 <__gethex+0x22c>
 801227e:	4618      	mov	r0, r3
 8012280:	9901      	ldr	r1, [sp, #4]
 8012282:	9307      	str	r3, [sp, #28]
 8012284:	4652      	mov	r2, sl
 8012286:	f001 fada 	bl	801383e <strncmp>
 801228a:	9b07      	ldr	r3, [sp, #28]
 801228c:	2800      	cmp	r0, #0
 801228e:	d1d7      	bne.n	8012240 <__gethex+0x22c>
 8012290:	461e      	mov	r6, r3
 8012292:	e78b      	b.n	80121ac <__gethex+0x198>
 8012294:	f04f 0a03 	mov.w	sl, #3
 8012298:	e7b8      	b.n	801220c <__gethex+0x1f8>
 801229a:	da0a      	bge.n	80122b2 <__gethex+0x29e>
 801229c:	1a37      	subs	r7, r6, r0
 801229e:	4621      	mov	r1, r4
 80122a0:	ee18 0a10 	vmov	r0, s16
 80122a4:	463a      	mov	r2, r7
 80122a6:	f000 fc9f 	bl	8012be8 <__lshift>
 80122aa:	1bed      	subs	r5, r5, r7
 80122ac:	4604      	mov	r4, r0
 80122ae:	f100 0914 	add.w	r9, r0, #20
 80122b2:	f04f 0a00 	mov.w	sl, #0
 80122b6:	e7ae      	b.n	8012216 <__gethex+0x202>
 80122b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80122bc:	42a8      	cmp	r0, r5
 80122be:	dd72      	ble.n	80123a6 <__gethex+0x392>
 80122c0:	1b45      	subs	r5, r0, r5
 80122c2:	42ae      	cmp	r6, r5
 80122c4:	dc36      	bgt.n	8012334 <__gethex+0x320>
 80122c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80122ca:	2b02      	cmp	r3, #2
 80122cc:	d02a      	beq.n	8012324 <__gethex+0x310>
 80122ce:	2b03      	cmp	r3, #3
 80122d0:	d02c      	beq.n	801232c <__gethex+0x318>
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d115      	bne.n	8012302 <__gethex+0x2ee>
 80122d6:	42ae      	cmp	r6, r5
 80122d8:	d113      	bne.n	8012302 <__gethex+0x2ee>
 80122da:	2e01      	cmp	r6, #1
 80122dc:	d10b      	bne.n	80122f6 <__gethex+0x2e2>
 80122de:	9a04      	ldr	r2, [sp, #16]
 80122e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122e4:	6013      	str	r3, [r2, #0]
 80122e6:	2301      	movs	r3, #1
 80122e8:	6123      	str	r3, [r4, #16]
 80122ea:	f8c9 3000 	str.w	r3, [r9]
 80122ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122f0:	2762      	movs	r7, #98	; 0x62
 80122f2:	601c      	str	r4, [r3, #0]
 80122f4:	e723      	b.n	801213e <__gethex+0x12a>
 80122f6:	1e71      	subs	r1, r6, #1
 80122f8:	4620      	mov	r0, r4
 80122fa:	f000 feb3 	bl	8013064 <__any_on>
 80122fe:	2800      	cmp	r0, #0
 8012300:	d1ed      	bne.n	80122de <__gethex+0x2ca>
 8012302:	ee18 0a10 	vmov	r0, s16
 8012306:	4621      	mov	r1, r4
 8012308:	f000 fa52 	bl	80127b0 <_Bfree>
 801230c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801230e:	2300      	movs	r3, #0
 8012310:	6013      	str	r3, [r2, #0]
 8012312:	2750      	movs	r7, #80	; 0x50
 8012314:	e713      	b.n	801213e <__gethex+0x12a>
 8012316:	bf00      	nop
 8012318:	080157fc 	.word	0x080157fc
 801231c:	0801571c 	.word	0x0801571c
 8012320:	08015790 	.word	0x08015790
 8012324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012326:	2b00      	cmp	r3, #0
 8012328:	d1eb      	bne.n	8012302 <__gethex+0x2ee>
 801232a:	e7d8      	b.n	80122de <__gethex+0x2ca>
 801232c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1d5      	bne.n	80122de <__gethex+0x2ca>
 8012332:	e7e6      	b.n	8012302 <__gethex+0x2ee>
 8012334:	1e6f      	subs	r7, r5, #1
 8012336:	f1ba 0f00 	cmp.w	sl, #0
 801233a:	d131      	bne.n	80123a0 <__gethex+0x38c>
 801233c:	b127      	cbz	r7, 8012348 <__gethex+0x334>
 801233e:	4639      	mov	r1, r7
 8012340:	4620      	mov	r0, r4
 8012342:	f000 fe8f 	bl	8013064 <__any_on>
 8012346:	4682      	mov	sl, r0
 8012348:	117b      	asrs	r3, r7, #5
 801234a:	2101      	movs	r1, #1
 801234c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012350:	f007 071f 	and.w	r7, r7, #31
 8012354:	fa01 f707 	lsl.w	r7, r1, r7
 8012358:	421f      	tst	r7, r3
 801235a:	4629      	mov	r1, r5
 801235c:	4620      	mov	r0, r4
 801235e:	bf18      	it	ne
 8012360:	f04a 0a02 	orrne.w	sl, sl, #2
 8012364:	1b76      	subs	r6, r6, r5
 8012366:	f7ff fdee 	bl	8011f46 <rshift>
 801236a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801236e:	2702      	movs	r7, #2
 8012370:	f1ba 0f00 	cmp.w	sl, #0
 8012374:	d048      	beq.n	8012408 <__gethex+0x3f4>
 8012376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801237a:	2b02      	cmp	r3, #2
 801237c:	d015      	beq.n	80123aa <__gethex+0x396>
 801237e:	2b03      	cmp	r3, #3
 8012380:	d017      	beq.n	80123b2 <__gethex+0x39e>
 8012382:	2b01      	cmp	r3, #1
 8012384:	d109      	bne.n	801239a <__gethex+0x386>
 8012386:	f01a 0f02 	tst.w	sl, #2
 801238a:	d006      	beq.n	801239a <__gethex+0x386>
 801238c:	f8d9 0000 	ldr.w	r0, [r9]
 8012390:	ea4a 0a00 	orr.w	sl, sl, r0
 8012394:	f01a 0f01 	tst.w	sl, #1
 8012398:	d10e      	bne.n	80123b8 <__gethex+0x3a4>
 801239a:	f047 0710 	orr.w	r7, r7, #16
 801239e:	e033      	b.n	8012408 <__gethex+0x3f4>
 80123a0:	f04f 0a01 	mov.w	sl, #1
 80123a4:	e7d0      	b.n	8012348 <__gethex+0x334>
 80123a6:	2701      	movs	r7, #1
 80123a8:	e7e2      	b.n	8012370 <__gethex+0x35c>
 80123aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123ac:	f1c3 0301 	rsb	r3, r3, #1
 80123b0:	9315      	str	r3, [sp, #84]	; 0x54
 80123b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d0f0      	beq.n	801239a <__gethex+0x386>
 80123b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80123bc:	f104 0314 	add.w	r3, r4, #20
 80123c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80123c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80123c8:	f04f 0c00 	mov.w	ip, #0
 80123cc:	4618      	mov	r0, r3
 80123ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80123d6:	d01c      	beq.n	8012412 <__gethex+0x3fe>
 80123d8:	3201      	adds	r2, #1
 80123da:	6002      	str	r2, [r0, #0]
 80123dc:	2f02      	cmp	r7, #2
 80123de:	f104 0314 	add.w	r3, r4, #20
 80123e2:	d13f      	bne.n	8012464 <__gethex+0x450>
 80123e4:	f8d8 2000 	ldr.w	r2, [r8]
 80123e8:	3a01      	subs	r2, #1
 80123ea:	42b2      	cmp	r2, r6
 80123ec:	d10a      	bne.n	8012404 <__gethex+0x3f0>
 80123ee:	1171      	asrs	r1, r6, #5
 80123f0:	2201      	movs	r2, #1
 80123f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80123f6:	f006 061f 	and.w	r6, r6, #31
 80123fa:	fa02 f606 	lsl.w	r6, r2, r6
 80123fe:	421e      	tst	r6, r3
 8012400:	bf18      	it	ne
 8012402:	4617      	movne	r7, r2
 8012404:	f047 0720 	orr.w	r7, r7, #32
 8012408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801240a:	601c      	str	r4, [r3, #0]
 801240c:	9b04      	ldr	r3, [sp, #16]
 801240e:	601d      	str	r5, [r3, #0]
 8012410:	e695      	b.n	801213e <__gethex+0x12a>
 8012412:	4299      	cmp	r1, r3
 8012414:	f843 cc04 	str.w	ip, [r3, #-4]
 8012418:	d8d8      	bhi.n	80123cc <__gethex+0x3b8>
 801241a:	68a3      	ldr	r3, [r4, #8]
 801241c:	459b      	cmp	fp, r3
 801241e:	db19      	blt.n	8012454 <__gethex+0x440>
 8012420:	6861      	ldr	r1, [r4, #4]
 8012422:	ee18 0a10 	vmov	r0, s16
 8012426:	3101      	adds	r1, #1
 8012428:	f000 f982 	bl	8012730 <_Balloc>
 801242c:	4681      	mov	r9, r0
 801242e:	b918      	cbnz	r0, 8012438 <__gethex+0x424>
 8012430:	4b1a      	ldr	r3, [pc, #104]	; (801249c <__gethex+0x488>)
 8012432:	4602      	mov	r2, r0
 8012434:	2184      	movs	r1, #132	; 0x84
 8012436:	e6a8      	b.n	801218a <__gethex+0x176>
 8012438:	6922      	ldr	r2, [r4, #16]
 801243a:	3202      	adds	r2, #2
 801243c:	f104 010c 	add.w	r1, r4, #12
 8012440:	0092      	lsls	r2, r2, #2
 8012442:	300c      	adds	r0, #12
 8012444:	f7fc ff08 	bl	800f258 <memcpy>
 8012448:	4621      	mov	r1, r4
 801244a:	ee18 0a10 	vmov	r0, s16
 801244e:	f000 f9af 	bl	80127b0 <_Bfree>
 8012452:	464c      	mov	r4, r9
 8012454:	6923      	ldr	r3, [r4, #16]
 8012456:	1c5a      	adds	r2, r3, #1
 8012458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801245c:	6122      	str	r2, [r4, #16]
 801245e:	2201      	movs	r2, #1
 8012460:	615a      	str	r2, [r3, #20]
 8012462:	e7bb      	b.n	80123dc <__gethex+0x3c8>
 8012464:	6922      	ldr	r2, [r4, #16]
 8012466:	455a      	cmp	r2, fp
 8012468:	dd0b      	ble.n	8012482 <__gethex+0x46e>
 801246a:	2101      	movs	r1, #1
 801246c:	4620      	mov	r0, r4
 801246e:	f7ff fd6a 	bl	8011f46 <rshift>
 8012472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012476:	3501      	adds	r5, #1
 8012478:	42ab      	cmp	r3, r5
 801247a:	f6ff aed0 	blt.w	801221e <__gethex+0x20a>
 801247e:	2701      	movs	r7, #1
 8012480:	e7c0      	b.n	8012404 <__gethex+0x3f0>
 8012482:	f016 061f 	ands.w	r6, r6, #31
 8012486:	d0fa      	beq.n	801247e <__gethex+0x46a>
 8012488:	449a      	add	sl, r3
 801248a:	f1c6 0620 	rsb	r6, r6, #32
 801248e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012492:	f000 fa43 	bl	801291c <__hi0bits>
 8012496:	42b0      	cmp	r0, r6
 8012498:	dbe7      	blt.n	801246a <__gethex+0x456>
 801249a:	e7f0      	b.n	801247e <__gethex+0x46a>
 801249c:	0801571c 	.word	0x0801571c

080124a0 <L_shift>:
 80124a0:	f1c2 0208 	rsb	r2, r2, #8
 80124a4:	0092      	lsls	r2, r2, #2
 80124a6:	b570      	push	{r4, r5, r6, lr}
 80124a8:	f1c2 0620 	rsb	r6, r2, #32
 80124ac:	6843      	ldr	r3, [r0, #4]
 80124ae:	6804      	ldr	r4, [r0, #0]
 80124b0:	fa03 f506 	lsl.w	r5, r3, r6
 80124b4:	432c      	orrs	r4, r5
 80124b6:	40d3      	lsrs	r3, r2
 80124b8:	6004      	str	r4, [r0, #0]
 80124ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80124be:	4288      	cmp	r0, r1
 80124c0:	d3f4      	bcc.n	80124ac <L_shift+0xc>
 80124c2:	bd70      	pop	{r4, r5, r6, pc}

080124c4 <__match>:
 80124c4:	b530      	push	{r4, r5, lr}
 80124c6:	6803      	ldr	r3, [r0, #0]
 80124c8:	3301      	adds	r3, #1
 80124ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124ce:	b914      	cbnz	r4, 80124d6 <__match+0x12>
 80124d0:	6003      	str	r3, [r0, #0]
 80124d2:	2001      	movs	r0, #1
 80124d4:	bd30      	pop	{r4, r5, pc}
 80124d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80124de:	2d19      	cmp	r5, #25
 80124e0:	bf98      	it	ls
 80124e2:	3220      	addls	r2, #32
 80124e4:	42a2      	cmp	r2, r4
 80124e6:	d0f0      	beq.n	80124ca <__match+0x6>
 80124e8:	2000      	movs	r0, #0
 80124ea:	e7f3      	b.n	80124d4 <__match+0x10>

080124ec <__hexnan>:
 80124ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f0:	680b      	ldr	r3, [r1, #0]
 80124f2:	6801      	ldr	r1, [r0, #0]
 80124f4:	115e      	asrs	r6, r3, #5
 80124f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80124fa:	f013 031f 	ands.w	r3, r3, #31
 80124fe:	b087      	sub	sp, #28
 8012500:	bf18      	it	ne
 8012502:	3604      	addne	r6, #4
 8012504:	2500      	movs	r5, #0
 8012506:	1f37      	subs	r7, r6, #4
 8012508:	4682      	mov	sl, r0
 801250a:	4690      	mov	r8, r2
 801250c:	9301      	str	r3, [sp, #4]
 801250e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012512:	46b9      	mov	r9, r7
 8012514:	463c      	mov	r4, r7
 8012516:	9502      	str	r5, [sp, #8]
 8012518:	46ab      	mov	fp, r5
 801251a:	784a      	ldrb	r2, [r1, #1]
 801251c:	1c4b      	adds	r3, r1, #1
 801251e:	9303      	str	r3, [sp, #12]
 8012520:	b342      	cbz	r2, 8012574 <__hexnan+0x88>
 8012522:	4610      	mov	r0, r2
 8012524:	9105      	str	r1, [sp, #20]
 8012526:	9204      	str	r2, [sp, #16]
 8012528:	f7ff fd5f 	bl	8011fea <__hexdig_fun>
 801252c:	2800      	cmp	r0, #0
 801252e:	d14f      	bne.n	80125d0 <__hexnan+0xe4>
 8012530:	9a04      	ldr	r2, [sp, #16]
 8012532:	9905      	ldr	r1, [sp, #20]
 8012534:	2a20      	cmp	r2, #32
 8012536:	d818      	bhi.n	801256a <__hexnan+0x7e>
 8012538:	9b02      	ldr	r3, [sp, #8]
 801253a:	459b      	cmp	fp, r3
 801253c:	dd13      	ble.n	8012566 <__hexnan+0x7a>
 801253e:	454c      	cmp	r4, r9
 8012540:	d206      	bcs.n	8012550 <__hexnan+0x64>
 8012542:	2d07      	cmp	r5, #7
 8012544:	dc04      	bgt.n	8012550 <__hexnan+0x64>
 8012546:	462a      	mov	r2, r5
 8012548:	4649      	mov	r1, r9
 801254a:	4620      	mov	r0, r4
 801254c:	f7ff ffa8 	bl	80124a0 <L_shift>
 8012550:	4544      	cmp	r4, r8
 8012552:	d950      	bls.n	80125f6 <__hexnan+0x10a>
 8012554:	2300      	movs	r3, #0
 8012556:	f1a4 0904 	sub.w	r9, r4, #4
 801255a:	f844 3c04 	str.w	r3, [r4, #-4]
 801255e:	f8cd b008 	str.w	fp, [sp, #8]
 8012562:	464c      	mov	r4, r9
 8012564:	461d      	mov	r5, r3
 8012566:	9903      	ldr	r1, [sp, #12]
 8012568:	e7d7      	b.n	801251a <__hexnan+0x2e>
 801256a:	2a29      	cmp	r2, #41	; 0x29
 801256c:	d156      	bne.n	801261c <__hexnan+0x130>
 801256e:	3102      	adds	r1, #2
 8012570:	f8ca 1000 	str.w	r1, [sl]
 8012574:	f1bb 0f00 	cmp.w	fp, #0
 8012578:	d050      	beq.n	801261c <__hexnan+0x130>
 801257a:	454c      	cmp	r4, r9
 801257c:	d206      	bcs.n	801258c <__hexnan+0xa0>
 801257e:	2d07      	cmp	r5, #7
 8012580:	dc04      	bgt.n	801258c <__hexnan+0xa0>
 8012582:	462a      	mov	r2, r5
 8012584:	4649      	mov	r1, r9
 8012586:	4620      	mov	r0, r4
 8012588:	f7ff ff8a 	bl	80124a0 <L_shift>
 801258c:	4544      	cmp	r4, r8
 801258e:	d934      	bls.n	80125fa <__hexnan+0x10e>
 8012590:	f1a8 0204 	sub.w	r2, r8, #4
 8012594:	4623      	mov	r3, r4
 8012596:	f853 1b04 	ldr.w	r1, [r3], #4
 801259a:	f842 1f04 	str.w	r1, [r2, #4]!
 801259e:	429f      	cmp	r7, r3
 80125a0:	d2f9      	bcs.n	8012596 <__hexnan+0xaa>
 80125a2:	1b3b      	subs	r3, r7, r4
 80125a4:	f023 0303 	bic.w	r3, r3, #3
 80125a8:	3304      	adds	r3, #4
 80125aa:	3401      	adds	r4, #1
 80125ac:	3e03      	subs	r6, #3
 80125ae:	42b4      	cmp	r4, r6
 80125b0:	bf88      	it	hi
 80125b2:	2304      	movhi	r3, #4
 80125b4:	4443      	add	r3, r8
 80125b6:	2200      	movs	r2, #0
 80125b8:	f843 2b04 	str.w	r2, [r3], #4
 80125bc:	429f      	cmp	r7, r3
 80125be:	d2fb      	bcs.n	80125b8 <__hexnan+0xcc>
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	b91b      	cbnz	r3, 80125cc <__hexnan+0xe0>
 80125c4:	4547      	cmp	r7, r8
 80125c6:	d127      	bne.n	8012618 <__hexnan+0x12c>
 80125c8:	2301      	movs	r3, #1
 80125ca:	603b      	str	r3, [r7, #0]
 80125cc:	2005      	movs	r0, #5
 80125ce:	e026      	b.n	801261e <__hexnan+0x132>
 80125d0:	3501      	adds	r5, #1
 80125d2:	2d08      	cmp	r5, #8
 80125d4:	f10b 0b01 	add.w	fp, fp, #1
 80125d8:	dd06      	ble.n	80125e8 <__hexnan+0xfc>
 80125da:	4544      	cmp	r4, r8
 80125dc:	d9c3      	bls.n	8012566 <__hexnan+0x7a>
 80125de:	2300      	movs	r3, #0
 80125e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80125e4:	2501      	movs	r5, #1
 80125e6:	3c04      	subs	r4, #4
 80125e8:	6822      	ldr	r2, [r4, #0]
 80125ea:	f000 000f 	and.w	r0, r0, #15
 80125ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80125f2:	6022      	str	r2, [r4, #0]
 80125f4:	e7b7      	b.n	8012566 <__hexnan+0x7a>
 80125f6:	2508      	movs	r5, #8
 80125f8:	e7b5      	b.n	8012566 <__hexnan+0x7a>
 80125fa:	9b01      	ldr	r3, [sp, #4]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d0df      	beq.n	80125c0 <__hexnan+0xd4>
 8012600:	f04f 32ff 	mov.w	r2, #4294967295
 8012604:	f1c3 0320 	rsb	r3, r3, #32
 8012608:	fa22 f303 	lsr.w	r3, r2, r3
 801260c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012610:	401a      	ands	r2, r3
 8012612:	f846 2c04 	str.w	r2, [r6, #-4]
 8012616:	e7d3      	b.n	80125c0 <__hexnan+0xd4>
 8012618:	3f04      	subs	r7, #4
 801261a:	e7d1      	b.n	80125c0 <__hexnan+0xd4>
 801261c:	2004      	movs	r0, #4
 801261e:	b007      	add	sp, #28
 8012620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012624 <_localeconv_r>:
 8012624:	4800      	ldr	r0, [pc, #0]	; (8012628 <_localeconv_r+0x4>)
 8012626:	4770      	bx	lr
 8012628:	200002f0 	.word	0x200002f0

0801262c <__retarget_lock_init_recursive>:
 801262c:	4770      	bx	lr

0801262e <__retarget_lock_acquire_recursive>:
 801262e:	4770      	bx	lr

08012630 <__retarget_lock_release_recursive>:
 8012630:	4770      	bx	lr

08012632 <__swhatbuf_r>:
 8012632:	b570      	push	{r4, r5, r6, lr}
 8012634:	460e      	mov	r6, r1
 8012636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801263a:	2900      	cmp	r1, #0
 801263c:	b096      	sub	sp, #88	; 0x58
 801263e:	4614      	mov	r4, r2
 8012640:	461d      	mov	r5, r3
 8012642:	da07      	bge.n	8012654 <__swhatbuf_r+0x22>
 8012644:	2300      	movs	r3, #0
 8012646:	602b      	str	r3, [r5, #0]
 8012648:	89b3      	ldrh	r3, [r6, #12]
 801264a:	061a      	lsls	r2, r3, #24
 801264c:	d410      	bmi.n	8012670 <__swhatbuf_r+0x3e>
 801264e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012652:	e00e      	b.n	8012672 <__swhatbuf_r+0x40>
 8012654:	466a      	mov	r2, sp
 8012656:	f001 fa25 	bl	8013aa4 <_fstat_r>
 801265a:	2800      	cmp	r0, #0
 801265c:	dbf2      	blt.n	8012644 <__swhatbuf_r+0x12>
 801265e:	9a01      	ldr	r2, [sp, #4]
 8012660:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012664:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012668:	425a      	negs	r2, r3
 801266a:	415a      	adcs	r2, r3
 801266c:	602a      	str	r2, [r5, #0]
 801266e:	e7ee      	b.n	801264e <__swhatbuf_r+0x1c>
 8012670:	2340      	movs	r3, #64	; 0x40
 8012672:	2000      	movs	r0, #0
 8012674:	6023      	str	r3, [r4, #0]
 8012676:	b016      	add	sp, #88	; 0x58
 8012678:	bd70      	pop	{r4, r5, r6, pc}
	...

0801267c <__smakebuf_r>:
 801267c:	898b      	ldrh	r3, [r1, #12]
 801267e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012680:	079d      	lsls	r5, r3, #30
 8012682:	4606      	mov	r6, r0
 8012684:	460c      	mov	r4, r1
 8012686:	d507      	bpl.n	8012698 <__smakebuf_r+0x1c>
 8012688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801268c:	6023      	str	r3, [r4, #0]
 801268e:	6123      	str	r3, [r4, #16]
 8012690:	2301      	movs	r3, #1
 8012692:	6163      	str	r3, [r4, #20]
 8012694:	b002      	add	sp, #8
 8012696:	bd70      	pop	{r4, r5, r6, pc}
 8012698:	ab01      	add	r3, sp, #4
 801269a:	466a      	mov	r2, sp
 801269c:	f7ff ffc9 	bl	8012632 <__swhatbuf_r>
 80126a0:	9900      	ldr	r1, [sp, #0]
 80126a2:	4605      	mov	r5, r0
 80126a4:	4630      	mov	r0, r6
 80126a6:	f000 fd5d 	bl	8013164 <_malloc_r>
 80126aa:	b948      	cbnz	r0, 80126c0 <__smakebuf_r+0x44>
 80126ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126b0:	059a      	lsls	r2, r3, #22
 80126b2:	d4ef      	bmi.n	8012694 <__smakebuf_r+0x18>
 80126b4:	f023 0303 	bic.w	r3, r3, #3
 80126b8:	f043 0302 	orr.w	r3, r3, #2
 80126bc:	81a3      	strh	r3, [r4, #12]
 80126be:	e7e3      	b.n	8012688 <__smakebuf_r+0xc>
 80126c0:	4b0d      	ldr	r3, [pc, #52]	; (80126f8 <__smakebuf_r+0x7c>)
 80126c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	6020      	str	r0, [r4, #0]
 80126c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126cc:	81a3      	strh	r3, [r4, #12]
 80126ce:	9b00      	ldr	r3, [sp, #0]
 80126d0:	6163      	str	r3, [r4, #20]
 80126d2:	9b01      	ldr	r3, [sp, #4]
 80126d4:	6120      	str	r0, [r4, #16]
 80126d6:	b15b      	cbz	r3, 80126f0 <__smakebuf_r+0x74>
 80126d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126dc:	4630      	mov	r0, r6
 80126de:	f001 f9f3 	bl	8013ac8 <_isatty_r>
 80126e2:	b128      	cbz	r0, 80126f0 <__smakebuf_r+0x74>
 80126e4:	89a3      	ldrh	r3, [r4, #12]
 80126e6:	f023 0303 	bic.w	r3, r3, #3
 80126ea:	f043 0301 	orr.w	r3, r3, #1
 80126ee:	81a3      	strh	r3, [r4, #12]
 80126f0:	89a0      	ldrh	r0, [r4, #12]
 80126f2:	4305      	orrs	r5, r0
 80126f4:	81a5      	strh	r5, [r4, #12]
 80126f6:	e7cd      	b.n	8012694 <__smakebuf_r+0x18>
 80126f8:	08011da5 	.word	0x08011da5

080126fc <malloc>:
 80126fc:	4b02      	ldr	r3, [pc, #8]	; (8012708 <malloc+0xc>)
 80126fe:	4601      	mov	r1, r0
 8012700:	6818      	ldr	r0, [r3, #0]
 8012702:	f000 bd2f 	b.w	8013164 <_malloc_r>
 8012706:	bf00      	nop
 8012708:	20000198 	.word	0x20000198

0801270c <__ascii_mbtowc>:
 801270c:	b082      	sub	sp, #8
 801270e:	b901      	cbnz	r1, 8012712 <__ascii_mbtowc+0x6>
 8012710:	a901      	add	r1, sp, #4
 8012712:	b142      	cbz	r2, 8012726 <__ascii_mbtowc+0x1a>
 8012714:	b14b      	cbz	r3, 801272a <__ascii_mbtowc+0x1e>
 8012716:	7813      	ldrb	r3, [r2, #0]
 8012718:	600b      	str	r3, [r1, #0]
 801271a:	7812      	ldrb	r2, [r2, #0]
 801271c:	1e10      	subs	r0, r2, #0
 801271e:	bf18      	it	ne
 8012720:	2001      	movne	r0, #1
 8012722:	b002      	add	sp, #8
 8012724:	4770      	bx	lr
 8012726:	4610      	mov	r0, r2
 8012728:	e7fb      	b.n	8012722 <__ascii_mbtowc+0x16>
 801272a:	f06f 0001 	mvn.w	r0, #1
 801272e:	e7f8      	b.n	8012722 <__ascii_mbtowc+0x16>

08012730 <_Balloc>:
 8012730:	b570      	push	{r4, r5, r6, lr}
 8012732:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012734:	4604      	mov	r4, r0
 8012736:	460d      	mov	r5, r1
 8012738:	b976      	cbnz	r6, 8012758 <_Balloc+0x28>
 801273a:	2010      	movs	r0, #16
 801273c:	f7ff ffde 	bl	80126fc <malloc>
 8012740:	4602      	mov	r2, r0
 8012742:	6260      	str	r0, [r4, #36]	; 0x24
 8012744:	b920      	cbnz	r0, 8012750 <_Balloc+0x20>
 8012746:	4b18      	ldr	r3, [pc, #96]	; (80127a8 <_Balloc+0x78>)
 8012748:	4818      	ldr	r0, [pc, #96]	; (80127ac <_Balloc+0x7c>)
 801274a:	2166      	movs	r1, #102	; 0x66
 801274c:	f001 f96a 	bl	8013a24 <__assert_func>
 8012750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012754:	6006      	str	r6, [r0, #0]
 8012756:	60c6      	str	r6, [r0, #12]
 8012758:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801275a:	68f3      	ldr	r3, [r6, #12]
 801275c:	b183      	cbz	r3, 8012780 <_Balloc+0x50>
 801275e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012766:	b9b8      	cbnz	r0, 8012798 <_Balloc+0x68>
 8012768:	2101      	movs	r1, #1
 801276a:	fa01 f605 	lsl.w	r6, r1, r5
 801276e:	1d72      	adds	r2, r6, #5
 8012770:	0092      	lsls	r2, r2, #2
 8012772:	4620      	mov	r0, r4
 8012774:	f000 fc97 	bl	80130a6 <_calloc_r>
 8012778:	b160      	cbz	r0, 8012794 <_Balloc+0x64>
 801277a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801277e:	e00e      	b.n	801279e <_Balloc+0x6e>
 8012780:	2221      	movs	r2, #33	; 0x21
 8012782:	2104      	movs	r1, #4
 8012784:	4620      	mov	r0, r4
 8012786:	f000 fc8e 	bl	80130a6 <_calloc_r>
 801278a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801278c:	60f0      	str	r0, [r6, #12]
 801278e:	68db      	ldr	r3, [r3, #12]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1e4      	bne.n	801275e <_Balloc+0x2e>
 8012794:	2000      	movs	r0, #0
 8012796:	bd70      	pop	{r4, r5, r6, pc}
 8012798:	6802      	ldr	r2, [r0, #0]
 801279a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801279e:	2300      	movs	r3, #0
 80127a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80127a4:	e7f7      	b.n	8012796 <_Balloc+0x66>
 80127a6:	bf00      	nop
 80127a8:	080156a6 	.word	0x080156a6
 80127ac:	08015810 	.word	0x08015810

080127b0 <_Bfree>:
 80127b0:	b570      	push	{r4, r5, r6, lr}
 80127b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80127b4:	4605      	mov	r5, r0
 80127b6:	460c      	mov	r4, r1
 80127b8:	b976      	cbnz	r6, 80127d8 <_Bfree+0x28>
 80127ba:	2010      	movs	r0, #16
 80127bc:	f7ff ff9e 	bl	80126fc <malloc>
 80127c0:	4602      	mov	r2, r0
 80127c2:	6268      	str	r0, [r5, #36]	; 0x24
 80127c4:	b920      	cbnz	r0, 80127d0 <_Bfree+0x20>
 80127c6:	4b09      	ldr	r3, [pc, #36]	; (80127ec <_Bfree+0x3c>)
 80127c8:	4809      	ldr	r0, [pc, #36]	; (80127f0 <_Bfree+0x40>)
 80127ca:	218a      	movs	r1, #138	; 0x8a
 80127cc:	f001 f92a 	bl	8013a24 <__assert_func>
 80127d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127d4:	6006      	str	r6, [r0, #0]
 80127d6:	60c6      	str	r6, [r0, #12]
 80127d8:	b13c      	cbz	r4, 80127ea <_Bfree+0x3a>
 80127da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127dc:	6862      	ldr	r2, [r4, #4]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127e4:	6021      	str	r1, [r4, #0]
 80127e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127ea:	bd70      	pop	{r4, r5, r6, pc}
 80127ec:	080156a6 	.word	0x080156a6
 80127f0:	08015810 	.word	0x08015810

080127f4 <__multadd>:
 80127f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f8:	690e      	ldr	r6, [r1, #16]
 80127fa:	4607      	mov	r7, r0
 80127fc:	4698      	mov	r8, r3
 80127fe:	460c      	mov	r4, r1
 8012800:	f101 0014 	add.w	r0, r1, #20
 8012804:	2300      	movs	r3, #0
 8012806:	6805      	ldr	r5, [r0, #0]
 8012808:	b2a9      	uxth	r1, r5
 801280a:	fb02 8101 	mla	r1, r2, r1, r8
 801280e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012812:	0c2d      	lsrs	r5, r5, #16
 8012814:	fb02 c505 	mla	r5, r2, r5, ip
 8012818:	b289      	uxth	r1, r1
 801281a:	3301      	adds	r3, #1
 801281c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012820:	429e      	cmp	r6, r3
 8012822:	f840 1b04 	str.w	r1, [r0], #4
 8012826:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801282a:	dcec      	bgt.n	8012806 <__multadd+0x12>
 801282c:	f1b8 0f00 	cmp.w	r8, #0
 8012830:	d022      	beq.n	8012878 <__multadd+0x84>
 8012832:	68a3      	ldr	r3, [r4, #8]
 8012834:	42b3      	cmp	r3, r6
 8012836:	dc19      	bgt.n	801286c <__multadd+0x78>
 8012838:	6861      	ldr	r1, [r4, #4]
 801283a:	4638      	mov	r0, r7
 801283c:	3101      	adds	r1, #1
 801283e:	f7ff ff77 	bl	8012730 <_Balloc>
 8012842:	4605      	mov	r5, r0
 8012844:	b928      	cbnz	r0, 8012852 <__multadd+0x5e>
 8012846:	4602      	mov	r2, r0
 8012848:	4b0d      	ldr	r3, [pc, #52]	; (8012880 <__multadd+0x8c>)
 801284a:	480e      	ldr	r0, [pc, #56]	; (8012884 <__multadd+0x90>)
 801284c:	21b5      	movs	r1, #181	; 0xb5
 801284e:	f001 f8e9 	bl	8013a24 <__assert_func>
 8012852:	6922      	ldr	r2, [r4, #16]
 8012854:	3202      	adds	r2, #2
 8012856:	f104 010c 	add.w	r1, r4, #12
 801285a:	0092      	lsls	r2, r2, #2
 801285c:	300c      	adds	r0, #12
 801285e:	f7fc fcfb 	bl	800f258 <memcpy>
 8012862:	4621      	mov	r1, r4
 8012864:	4638      	mov	r0, r7
 8012866:	f7ff ffa3 	bl	80127b0 <_Bfree>
 801286a:	462c      	mov	r4, r5
 801286c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012870:	3601      	adds	r6, #1
 8012872:	f8c3 8014 	str.w	r8, [r3, #20]
 8012876:	6126      	str	r6, [r4, #16]
 8012878:	4620      	mov	r0, r4
 801287a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801287e:	bf00      	nop
 8012880:	0801571c 	.word	0x0801571c
 8012884:	08015810 	.word	0x08015810

08012888 <__s2b>:
 8012888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801288c:	460c      	mov	r4, r1
 801288e:	4615      	mov	r5, r2
 8012890:	461f      	mov	r7, r3
 8012892:	2209      	movs	r2, #9
 8012894:	3308      	adds	r3, #8
 8012896:	4606      	mov	r6, r0
 8012898:	fb93 f3f2 	sdiv	r3, r3, r2
 801289c:	2100      	movs	r1, #0
 801289e:	2201      	movs	r2, #1
 80128a0:	429a      	cmp	r2, r3
 80128a2:	db09      	blt.n	80128b8 <__s2b+0x30>
 80128a4:	4630      	mov	r0, r6
 80128a6:	f7ff ff43 	bl	8012730 <_Balloc>
 80128aa:	b940      	cbnz	r0, 80128be <__s2b+0x36>
 80128ac:	4602      	mov	r2, r0
 80128ae:	4b19      	ldr	r3, [pc, #100]	; (8012914 <__s2b+0x8c>)
 80128b0:	4819      	ldr	r0, [pc, #100]	; (8012918 <__s2b+0x90>)
 80128b2:	21ce      	movs	r1, #206	; 0xce
 80128b4:	f001 f8b6 	bl	8013a24 <__assert_func>
 80128b8:	0052      	lsls	r2, r2, #1
 80128ba:	3101      	adds	r1, #1
 80128bc:	e7f0      	b.n	80128a0 <__s2b+0x18>
 80128be:	9b08      	ldr	r3, [sp, #32]
 80128c0:	6143      	str	r3, [r0, #20]
 80128c2:	2d09      	cmp	r5, #9
 80128c4:	f04f 0301 	mov.w	r3, #1
 80128c8:	6103      	str	r3, [r0, #16]
 80128ca:	dd16      	ble.n	80128fa <__s2b+0x72>
 80128cc:	f104 0909 	add.w	r9, r4, #9
 80128d0:	46c8      	mov	r8, r9
 80128d2:	442c      	add	r4, r5
 80128d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80128d8:	4601      	mov	r1, r0
 80128da:	3b30      	subs	r3, #48	; 0x30
 80128dc:	220a      	movs	r2, #10
 80128de:	4630      	mov	r0, r6
 80128e0:	f7ff ff88 	bl	80127f4 <__multadd>
 80128e4:	45a0      	cmp	r8, r4
 80128e6:	d1f5      	bne.n	80128d4 <__s2b+0x4c>
 80128e8:	f1a5 0408 	sub.w	r4, r5, #8
 80128ec:	444c      	add	r4, r9
 80128ee:	1b2d      	subs	r5, r5, r4
 80128f0:	1963      	adds	r3, r4, r5
 80128f2:	42bb      	cmp	r3, r7
 80128f4:	db04      	blt.n	8012900 <__s2b+0x78>
 80128f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128fa:	340a      	adds	r4, #10
 80128fc:	2509      	movs	r5, #9
 80128fe:	e7f6      	b.n	80128ee <__s2b+0x66>
 8012900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012904:	4601      	mov	r1, r0
 8012906:	3b30      	subs	r3, #48	; 0x30
 8012908:	220a      	movs	r2, #10
 801290a:	4630      	mov	r0, r6
 801290c:	f7ff ff72 	bl	80127f4 <__multadd>
 8012910:	e7ee      	b.n	80128f0 <__s2b+0x68>
 8012912:	bf00      	nop
 8012914:	0801571c 	.word	0x0801571c
 8012918:	08015810 	.word	0x08015810

0801291c <__hi0bits>:
 801291c:	0c03      	lsrs	r3, r0, #16
 801291e:	041b      	lsls	r3, r3, #16
 8012920:	b9d3      	cbnz	r3, 8012958 <__hi0bits+0x3c>
 8012922:	0400      	lsls	r0, r0, #16
 8012924:	2310      	movs	r3, #16
 8012926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801292a:	bf04      	itt	eq
 801292c:	0200      	lsleq	r0, r0, #8
 801292e:	3308      	addeq	r3, #8
 8012930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012934:	bf04      	itt	eq
 8012936:	0100      	lsleq	r0, r0, #4
 8012938:	3304      	addeq	r3, #4
 801293a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801293e:	bf04      	itt	eq
 8012940:	0080      	lsleq	r0, r0, #2
 8012942:	3302      	addeq	r3, #2
 8012944:	2800      	cmp	r0, #0
 8012946:	db05      	blt.n	8012954 <__hi0bits+0x38>
 8012948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801294c:	f103 0301 	add.w	r3, r3, #1
 8012950:	bf08      	it	eq
 8012952:	2320      	moveq	r3, #32
 8012954:	4618      	mov	r0, r3
 8012956:	4770      	bx	lr
 8012958:	2300      	movs	r3, #0
 801295a:	e7e4      	b.n	8012926 <__hi0bits+0xa>

0801295c <__lo0bits>:
 801295c:	6803      	ldr	r3, [r0, #0]
 801295e:	f013 0207 	ands.w	r2, r3, #7
 8012962:	4601      	mov	r1, r0
 8012964:	d00b      	beq.n	801297e <__lo0bits+0x22>
 8012966:	07da      	lsls	r2, r3, #31
 8012968:	d424      	bmi.n	80129b4 <__lo0bits+0x58>
 801296a:	0798      	lsls	r0, r3, #30
 801296c:	bf49      	itett	mi
 801296e:	085b      	lsrmi	r3, r3, #1
 8012970:	089b      	lsrpl	r3, r3, #2
 8012972:	2001      	movmi	r0, #1
 8012974:	600b      	strmi	r3, [r1, #0]
 8012976:	bf5c      	itt	pl
 8012978:	600b      	strpl	r3, [r1, #0]
 801297a:	2002      	movpl	r0, #2
 801297c:	4770      	bx	lr
 801297e:	b298      	uxth	r0, r3
 8012980:	b9b0      	cbnz	r0, 80129b0 <__lo0bits+0x54>
 8012982:	0c1b      	lsrs	r3, r3, #16
 8012984:	2010      	movs	r0, #16
 8012986:	f013 0fff 	tst.w	r3, #255	; 0xff
 801298a:	bf04      	itt	eq
 801298c:	0a1b      	lsreq	r3, r3, #8
 801298e:	3008      	addeq	r0, #8
 8012990:	071a      	lsls	r2, r3, #28
 8012992:	bf04      	itt	eq
 8012994:	091b      	lsreq	r3, r3, #4
 8012996:	3004      	addeq	r0, #4
 8012998:	079a      	lsls	r2, r3, #30
 801299a:	bf04      	itt	eq
 801299c:	089b      	lsreq	r3, r3, #2
 801299e:	3002      	addeq	r0, #2
 80129a0:	07da      	lsls	r2, r3, #31
 80129a2:	d403      	bmi.n	80129ac <__lo0bits+0x50>
 80129a4:	085b      	lsrs	r3, r3, #1
 80129a6:	f100 0001 	add.w	r0, r0, #1
 80129aa:	d005      	beq.n	80129b8 <__lo0bits+0x5c>
 80129ac:	600b      	str	r3, [r1, #0]
 80129ae:	4770      	bx	lr
 80129b0:	4610      	mov	r0, r2
 80129b2:	e7e8      	b.n	8012986 <__lo0bits+0x2a>
 80129b4:	2000      	movs	r0, #0
 80129b6:	4770      	bx	lr
 80129b8:	2020      	movs	r0, #32
 80129ba:	4770      	bx	lr

080129bc <__i2b>:
 80129bc:	b510      	push	{r4, lr}
 80129be:	460c      	mov	r4, r1
 80129c0:	2101      	movs	r1, #1
 80129c2:	f7ff feb5 	bl	8012730 <_Balloc>
 80129c6:	4602      	mov	r2, r0
 80129c8:	b928      	cbnz	r0, 80129d6 <__i2b+0x1a>
 80129ca:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <__i2b+0x24>)
 80129cc:	4805      	ldr	r0, [pc, #20]	; (80129e4 <__i2b+0x28>)
 80129ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80129d2:	f001 f827 	bl	8013a24 <__assert_func>
 80129d6:	2301      	movs	r3, #1
 80129d8:	6144      	str	r4, [r0, #20]
 80129da:	6103      	str	r3, [r0, #16]
 80129dc:	bd10      	pop	{r4, pc}
 80129de:	bf00      	nop
 80129e0:	0801571c 	.word	0x0801571c
 80129e4:	08015810 	.word	0x08015810

080129e8 <__multiply>:
 80129e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ec:	4614      	mov	r4, r2
 80129ee:	690a      	ldr	r2, [r1, #16]
 80129f0:	6923      	ldr	r3, [r4, #16]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	bfb8      	it	lt
 80129f6:	460b      	movlt	r3, r1
 80129f8:	460d      	mov	r5, r1
 80129fa:	bfbc      	itt	lt
 80129fc:	4625      	movlt	r5, r4
 80129fe:	461c      	movlt	r4, r3
 8012a00:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012a04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012a08:	68ab      	ldr	r3, [r5, #8]
 8012a0a:	6869      	ldr	r1, [r5, #4]
 8012a0c:	eb0a 0709 	add.w	r7, sl, r9
 8012a10:	42bb      	cmp	r3, r7
 8012a12:	b085      	sub	sp, #20
 8012a14:	bfb8      	it	lt
 8012a16:	3101      	addlt	r1, #1
 8012a18:	f7ff fe8a 	bl	8012730 <_Balloc>
 8012a1c:	b930      	cbnz	r0, 8012a2c <__multiply+0x44>
 8012a1e:	4602      	mov	r2, r0
 8012a20:	4b42      	ldr	r3, [pc, #264]	; (8012b2c <__multiply+0x144>)
 8012a22:	4843      	ldr	r0, [pc, #268]	; (8012b30 <__multiply+0x148>)
 8012a24:	f240 115d 	movw	r1, #349	; 0x15d
 8012a28:	f000 fffc 	bl	8013a24 <__assert_func>
 8012a2c:	f100 0614 	add.w	r6, r0, #20
 8012a30:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012a34:	4633      	mov	r3, r6
 8012a36:	2200      	movs	r2, #0
 8012a38:	4543      	cmp	r3, r8
 8012a3a:	d31e      	bcc.n	8012a7a <__multiply+0x92>
 8012a3c:	f105 0c14 	add.w	ip, r5, #20
 8012a40:	f104 0314 	add.w	r3, r4, #20
 8012a44:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012a48:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012a4c:	9202      	str	r2, [sp, #8]
 8012a4e:	ebac 0205 	sub.w	r2, ip, r5
 8012a52:	3a15      	subs	r2, #21
 8012a54:	f022 0203 	bic.w	r2, r2, #3
 8012a58:	3204      	adds	r2, #4
 8012a5a:	f105 0115 	add.w	r1, r5, #21
 8012a5e:	458c      	cmp	ip, r1
 8012a60:	bf38      	it	cc
 8012a62:	2204      	movcc	r2, #4
 8012a64:	9201      	str	r2, [sp, #4]
 8012a66:	9a02      	ldr	r2, [sp, #8]
 8012a68:	9303      	str	r3, [sp, #12]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d808      	bhi.n	8012a80 <__multiply+0x98>
 8012a6e:	2f00      	cmp	r7, #0
 8012a70:	dc55      	bgt.n	8012b1e <__multiply+0x136>
 8012a72:	6107      	str	r7, [r0, #16]
 8012a74:	b005      	add	sp, #20
 8012a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a7a:	f843 2b04 	str.w	r2, [r3], #4
 8012a7e:	e7db      	b.n	8012a38 <__multiply+0x50>
 8012a80:	f8b3 a000 	ldrh.w	sl, [r3]
 8012a84:	f1ba 0f00 	cmp.w	sl, #0
 8012a88:	d020      	beq.n	8012acc <__multiply+0xe4>
 8012a8a:	f105 0e14 	add.w	lr, r5, #20
 8012a8e:	46b1      	mov	r9, r6
 8012a90:	2200      	movs	r2, #0
 8012a92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012a96:	f8d9 b000 	ldr.w	fp, [r9]
 8012a9a:	b2a1      	uxth	r1, r4
 8012a9c:	fa1f fb8b 	uxth.w	fp, fp
 8012aa0:	fb0a b101 	mla	r1, sl, r1, fp
 8012aa4:	4411      	add	r1, r2
 8012aa6:	f8d9 2000 	ldr.w	r2, [r9]
 8012aaa:	0c24      	lsrs	r4, r4, #16
 8012aac:	0c12      	lsrs	r2, r2, #16
 8012aae:	fb0a 2404 	mla	r4, sl, r4, r2
 8012ab2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012ab6:	b289      	uxth	r1, r1
 8012ab8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012abc:	45f4      	cmp	ip, lr
 8012abe:	f849 1b04 	str.w	r1, [r9], #4
 8012ac2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012ac6:	d8e4      	bhi.n	8012a92 <__multiply+0xaa>
 8012ac8:	9901      	ldr	r1, [sp, #4]
 8012aca:	5072      	str	r2, [r6, r1]
 8012acc:	9a03      	ldr	r2, [sp, #12]
 8012ace:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012ad2:	3304      	adds	r3, #4
 8012ad4:	f1b9 0f00 	cmp.w	r9, #0
 8012ad8:	d01f      	beq.n	8012b1a <__multiply+0x132>
 8012ada:	6834      	ldr	r4, [r6, #0]
 8012adc:	f105 0114 	add.w	r1, r5, #20
 8012ae0:	46b6      	mov	lr, r6
 8012ae2:	f04f 0a00 	mov.w	sl, #0
 8012ae6:	880a      	ldrh	r2, [r1, #0]
 8012ae8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012aec:	fb09 b202 	mla	r2, r9, r2, fp
 8012af0:	4492      	add	sl, r2
 8012af2:	b2a4      	uxth	r4, r4
 8012af4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012af8:	f84e 4b04 	str.w	r4, [lr], #4
 8012afc:	f851 4b04 	ldr.w	r4, [r1], #4
 8012b00:	f8be 2000 	ldrh.w	r2, [lr]
 8012b04:	0c24      	lsrs	r4, r4, #16
 8012b06:	fb09 2404 	mla	r4, r9, r4, r2
 8012b0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012b0e:	458c      	cmp	ip, r1
 8012b10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012b14:	d8e7      	bhi.n	8012ae6 <__multiply+0xfe>
 8012b16:	9a01      	ldr	r2, [sp, #4]
 8012b18:	50b4      	str	r4, [r6, r2]
 8012b1a:	3604      	adds	r6, #4
 8012b1c:	e7a3      	b.n	8012a66 <__multiply+0x7e>
 8012b1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d1a5      	bne.n	8012a72 <__multiply+0x8a>
 8012b26:	3f01      	subs	r7, #1
 8012b28:	e7a1      	b.n	8012a6e <__multiply+0x86>
 8012b2a:	bf00      	nop
 8012b2c:	0801571c 	.word	0x0801571c
 8012b30:	08015810 	.word	0x08015810

08012b34 <__pow5mult>:
 8012b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b38:	4615      	mov	r5, r2
 8012b3a:	f012 0203 	ands.w	r2, r2, #3
 8012b3e:	4606      	mov	r6, r0
 8012b40:	460f      	mov	r7, r1
 8012b42:	d007      	beq.n	8012b54 <__pow5mult+0x20>
 8012b44:	4c25      	ldr	r4, [pc, #148]	; (8012bdc <__pow5mult+0xa8>)
 8012b46:	3a01      	subs	r2, #1
 8012b48:	2300      	movs	r3, #0
 8012b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012b4e:	f7ff fe51 	bl	80127f4 <__multadd>
 8012b52:	4607      	mov	r7, r0
 8012b54:	10ad      	asrs	r5, r5, #2
 8012b56:	d03d      	beq.n	8012bd4 <__pow5mult+0xa0>
 8012b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012b5a:	b97c      	cbnz	r4, 8012b7c <__pow5mult+0x48>
 8012b5c:	2010      	movs	r0, #16
 8012b5e:	f7ff fdcd 	bl	80126fc <malloc>
 8012b62:	4602      	mov	r2, r0
 8012b64:	6270      	str	r0, [r6, #36]	; 0x24
 8012b66:	b928      	cbnz	r0, 8012b74 <__pow5mult+0x40>
 8012b68:	4b1d      	ldr	r3, [pc, #116]	; (8012be0 <__pow5mult+0xac>)
 8012b6a:	481e      	ldr	r0, [pc, #120]	; (8012be4 <__pow5mult+0xb0>)
 8012b6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012b70:	f000 ff58 	bl	8013a24 <__assert_func>
 8012b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012b78:	6004      	str	r4, [r0, #0]
 8012b7a:	60c4      	str	r4, [r0, #12]
 8012b7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012b84:	b94c      	cbnz	r4, 8012b9a <__pow5mult+0x66>
 8012b86:	f240 2171 	movw	r1, #625	; 0x271
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	f7ff ff16 	bl	80129bc <__i2b>
 8012b90:	2300      	movs	r3, #0
 8012b92:	f8c8 0008 	str.w	r0, [r8, #8]
 8012b96:	4604      	mov	r4, r0
 8012b98:	6003      	str	r3, [r0, #0]
 8012b9a:	f04f 0900 	mov.w	r9, #0
 8012b9e:	07eb      	lsls	r3, r5, #31
 8012ba0:	d50a      	bpl.n	8012bb8 <__pow5mult+0x84>
 8012ba2:	4639      	mov	r1, r7
 8012ba4:	4622      	mov	r2, r4
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	f7ff ff1e 	bl	80129e8 <__multiply>
 8012bac:	4639      	mov	r1, r7
 8012bae:	4680      	mov	r8, r0
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f7ff fdfd 	bl	80127b0 <_Bfree>
 8012bb6:	4647      	mov	r7, r8
 8012bb8:	106d      	asrs	r5, r5, #1
 8012bba:	d00b      	beq.n	8012bd4 <__pow5mult+0xa0>
 8012bbc:	6820      	ldr	r0, [r4, #0]
 8012bbe:	b938      	cbnz	r0, 8012bd0 <__pow5mult+0x9c>
 8012bc0:	4622      	mov	r2, r4
 8012bc2:	4621      	mov	r1, r4
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	f7ff ff0f 	bl	80129e8 <__multiply>
 8012bca:	6020      	str	r0, [r4, #0]
 8012bcc:	f8c0 9000 	str.w	r9, [r0]
 8012bd0:	4604      	mov	r4, r0
 8012bd2:	e7e4      	b.n	8012b9e <__pow5mult+0x6a>
 8012bd4:	4638      	mov	r0, r7
 8012bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bda:	bf00      	nop
 8012bdc:	08015960 	.word	0x08015960
 8012be0:	080156a6 	.word	0x080156a6
 8012be4:	08015810 	.word	0x08015810

08012be8 <__lshift>:
 8012be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bec:	460c      	mov	r4, r1
 8012bee:	6849      	ldr	r1, [r1, #4]
 8012bf0:	6923      	ldr	r3, [r4, #16]
 8012bf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012bf6:	68a3      	ldr	r3, [r4, #8]
 8012bf8:	4607      	mov	r7, r0
 8012bfa:	4691      	mov	r9, r2
 8012bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c00:	f108 0601 	add.w	r6, r8, #1
 8012c04:	42b3      	cmp	r3, r6
 8012c06:	db0b      	blt.n	8012c20 <__lshift+0x38>
 8012c08:	4638      	mov	r0, r7
 8012c0a:	f7ff fd91 	bl	8012730 <_Balloc>
 8012c0e:	4605      	mov	r5, r0
 8012c10:	b948      	cbnz	r0, 8012c26 <__lshift+0x3e>
 8012c12:	4602      	mov	r2, r0
 8012c14:	4b28      	ldr	r3, [pc, #160]	; (8012cb8 <__lshift+0xd0>)
 8012c16:	4829      	ldr	r0, [pc, #164]	; (8012cbc <__lshift+0xd4>)
 8012c18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012c1c:	f000 ff02 	bl	8013a24 <__assert_func>
 8012c20:	3101      	adds	r1, #1
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	e7ee      	b.n	8012c04 <__lshift+0x1c>
 8012c26:	2300      	movs	r3, #0
 8012c28:	f100 0114 	add.w	r1, r0, #20
 8012c2c:	f100 0210 	add.w	r2, r0, #16
 8012c30:	4618      	mov	r0, r3
 8012c32:	4553      	cmp	r3, sl
 8012c34:	db33      	blt.n	8012c9e <__lshift+0xb6>
 8012c36:	6920      	ldr	r0, [r4, #16]
 8012c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012c3c:	f104 0314 	add.w	r3, r4, #20
 8012c40:	f019 091f 	ands.w	r9, r9, #31
 8012c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012c48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012c4c:	d02b      	beq.n	8012ca6 <__lshift+0xbe>
 8012c4e:	f1c9 0e20 	rsb	lr, r9, #32
 8012c52:	468a      	mov	sl, r1
 8012c54:	2200      	movs	r2, #0
 8012c56:	6818      	ldr	r0, [r3, #0]
 8012c58:	fa00 f009 	lsl.w	r0, r0, r9
 8012c5c:	4302      	orrs	r2, r0
 8012c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8012c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c66:	459c      	cmp	ip, r3
 8012c68:	fa22 f20e 	lsr.w	r2, r2, lr
 8012c6c:	d8f3      	bhi.n	8012c56 <__lshift+0x6e>
 8012c6e:	ebac 0304 	sub.w	r3, ip, r4
 8012c72:	3b15      	subs	r3, #21
 8012c74:	f023 0303 	bic.w	r3, r3, #3
 8012c78:	3304      	adds	r3, #4
 8012c7a:	f104 0015 	add.w	r0, r4, #21
 8012c7e:	4584      	cmp	ip, r0
 8012c80:	bf38      	it	cc
 8012c82:	2304      	movcc	r3, #4
 8012c84:	50ca      	str	r2, [r1, r3]
 8012c86:	b10a      	cbz	r2, 8012c8c <__lshift+0xa4>
 8012c88:	f108 0602 	add.w	r6, r8, #2
 8012c8c:	3e01      	subs	r6, #1
 8012c8e:	4638      	mov	r0, r7
 8012c90:	612e      	str	r6, [r5, #16]
 8012c92:	4621      	mov	r1, r4
 8012c94:	f7ff fd8c 	bl	80127b0 <_Bfree>
 8012c98:	4628      	mov	r0, r5
 8012c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	e7c5      	b.n	8012c32 <__lshift+0x4a>
 8012ca6:	3904      	subs	r1, #4
 8012ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cac:	f841 2f04 	str.w	r2, [r1, #4]!
 8012cb0:	459c      	cmp	ip, r3
 8012cb2:	d8f9      	bhi.n	8012ca8 <__lshift+0xc0>
 8012cb4:	e7ea      	b.n	8012c8c <__lshift+0xa4>
 8012cb6:	bf00      	nop
 8012cb8:	0801571c 	.word	0x0801571c
 8012cbc:	08015810 	.word	0x08015810

08012cc0 <__mcmp>:
 8012cc0:	b530      	push	{r4, r5, lr}
 8012cc2:	6902      	ldr	r2, [r0, #16]
 8012cc4:	690c      	ldr	r4, [r1, #16]
 8012cc6:	1b12      	subs	r2, r2, r4
 8012cc8:	d10e      	bne.n	8012ce8 <__mcmp+0x28>
 8012cca:	f100 0314 	add.w	r3, r0, #20
 8012cce:	3114      	adds	r1, #20
 8012cd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012cd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012cd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012cdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ce0:	42a5      	cmp	r5, r4
 8012ce2:	d003      	beq.n	8012cec <__mcmp+0x2c>
 8012ce4:	d305      	bcc.n	8012cf2 <__mcmp+0x32>
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	4610      	mov	r0, r2
 8012cea:	bd30      	pop	{r4, r5, pc}
 8012cec:	4283      	cmp	r3, r0
 8012cee:	d3f3      	bcc.n	8012cd8 <__mcmp+0x18>
 8012cf0:	e7fa      	b.n	8012ce8 <__mcmp+0x28>
 8012cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8012cf6:	e7f7      	b.n	8012ce8 <__mcmp+0x28>

08012cf8 <__mdiff>:
 8012cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cfc:	460c      	mov	r4, r1
 8012cfe:	4606      	mov	r6, r0
 8012d00:	4611      	mov	r1, r2
 8012d02:	4620      	mov	r0, r4
 8012d04:	4617      	mov	r7, r2
 8012d06:	f7ff ffdb 	bl	8012cc0 <__mcmp>
 8012d0a:	1e05      	subs	r5, r0, #0
 8012d0c:	d110      	bne.n	8012d30 <__mdiff+0x38>
 8012d0e:	4629      	mov	r1, r5
 8012d10:	4630      	mov	r0, r6
 8012d12:	f7ff fd0d 	bl	8012730 <_Balloc>
 8012d16:	b930      	cbnz	r0, 8012d26 <__mdiff+0x2e>
 8012d18:	4b39      	ldr	r3, [pc, #228]	; (8012e00 <__mdiff+0x108>)
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	f240 2132 	movw	r1, #562	; 0x232
 8012d20:	4838      	ldr	r0, [pc, #224]	; (8012e04 <__mdiff+0x10c>)
 8012d22:	f000 fe7f 	bl	8013a24 <__assert_func>
 8012d26:	2301      	movs	r3, #1
 8012d28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d30:	bfa4      	itt	ge
 8012d32:	463b      	movge	r3, r7
 8012d34:	4627      	movge	r7, r4
 8012d36:	4630      	mov	r0, r6
 8012d38:	6879      	ldr	r1, [r7, #4]
 8012d3a:	bfa6      	itte	ge
 8012d3c:	461c      	movge	r4, r3
 8012d3e:	2500      	movge	r5, #0
 8012d40:	2501      	movlt	r5, #1
 8012d42:	f7ff fcf5 	bl	8012730 <_Balloc>
 8012d46:	b920      	cbnz	r0, 8012d52 <__mdiff+0x5a>
 8012d48:	4b2d      	ldr	r3, [pc, #180]	; (8012e00 <__mdiff+0x108>)
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012d50:	e7e6      	b.n	8012d20 <__mdiff+0x28>
 8012d52:	693e      	ldr	r6, [r7, #16]
 8012d54:	60c5      	str	r5, [r0, #12]
 8012d56:	6925      	ldr	r5, [r4, #16]
 8012d58:	f107 0114 	add.w	r1, r7, #20
 8012d5c:	f104 0914 	add.w	r9, r4, #20
 8012d60:	f100 0e14 	add.w	lr, r0, #20
 8012d64:	f107 0210 	add.w	r2, r7, #16
 8012d68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012d6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012d70:	46f2      	mov	sl, lr
 8012d72:	2700      	movs	r7, #0
 8012d74:	f859 3b04 	ldr.w	r3, [r9], #4
 8012d78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012d7c:	fa1f f883 	uxth.w	r8, r3
 8012d80:	fa17 f78b 	uxtah	r7, r7, fp
 8012d84:	0c1b      	lsrs	r3, r3, #16
 8012d86:	eba7 0808 	sub.w	r8, r7, r8
 8012d8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012d8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012d92:	fa1f f888 	uxth.w	r8, r8
 8012d96:	141f      	asrs	r7, r3, #16
 8012d98:	454d      	cmp	r5, r9
 8012d9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012d9e:	f84a 3b04 	str.w	r3, [sl], #4
 8012da2:	d8e7      	bhi.n	8012d74 <__mdiff+0x7c>
 8012da4:	1b2b      	subs	r3, r5, r4
 8012da6:	3b15      	subs	r3, #21
 8012da8:	f023 0303 	bic.w	r3, r3, #3
 8012dac:	3304      	adds	r3, #4
 8012dae:	3415      	adds	r4, #21
 8012db0:	42a5      	cmp	r5, r4
 8012db2:	bf38      	it	cc
 8012db4:	2304      	movcc	r3, #4
 8012db6:	4419      	add	r1, r3
 8012db8:	4473      	add	r3, lr
 8012dba:	469e      	mov	lr, r3
 8012dbc:	460d      	mov	r5, r1
 8012dbe:	4565      	cmp	r5, ip
 8012dc0:	d30e      	bcc.n	8012de0 <__mdiff+0xe8>
 8012dc2:	f10c 0203 	add.w	r2, ip, #3
 8012dc6:	1a52      	subs	r2, r2, r1
 8012dc8:	f022 0203 	bic.w	r2, r2, #3
 8012dcc:	3903      	subs	r1, #3
 8012dce:	458c      	cmp	ip, r1
 8012dd0:	bf38      	it	cc
 8012dd2:	2200      	movcc	r2, #0
 8012dd4:	441a      	add	r2, r3
 8012dd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012dda:	b17b      	cbz	r3, 8012dfc <__mdiff+0x104>
 8012ddc:	6106      	str	r6, [r0, #16]
 8012dde:	e7a5      	b.n	8012d2c <__mdiff+0x34>
 8012de0:	f855 8b04 	ldr.w	r8, [r5], #4
 8012de4:	fa17 f488 	uxtah	r4, r7, r8
 8012de8:	1422      	asrs	r2, r4, #16
 8012dea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012dee:	b2a4      	uxth	r4, r4
 8012df0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012df4:	f84e 4b04 	str.w	r4, [lr], #4
 8012df8:	1417      	asrs	r7, r2, #16
 8012dfa:	e7e0      	b.n	8012dbe <__mdiff+0xc6>
 8012dfc:	3e01      	subs	r6, #1
 8012dfe:	e7ea      	b.n	8012dd6 <__mdiff+0xde>
 8012e00:	0801571c 	.word	0x0801571c
 8012e04:	08015810 	.word	0x08015810

08012e08 <__ulp>:
 8012e08:	b082      	sub	sp, #8
 8012e0a:	ed8d 0b00 	vstr	d0, [sp]
 8012e0e:	9b01      	ldr	r3, [sp, #4]
 8012e10:	4912      	ldr	r1, [pc, #72]	; (8012e5c <__ulp+0x54>)
 8012e12:	4019      	ands	r1, r3
 8012e14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012e18:	2900      	cmp	r1, #0
 8012e1a:	dd05      	ble.n	8012e28 <__ulp+0x20>
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	460b      	mov	r3, r1
 8012e20:	ec43 2b10 	vmov	d0, r2, r3
 8012e24:	b002      	add	sp, #8
 8012e26:	4770      	bx	lr
 8012e28:	4249      	negs	r1, r1
 8012e2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012e2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012e32:	f04f 0200 	mov.w	r2, #0
 8012e36:	f04f 0300 	mov.w	r3, #0
 8012e3a:	da04      	bge.n	8012e46 <__ulp+0x3e>
 8012e3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012e40:	fa41 f300 	asr.w	r3, r1, r0
 8012e44:	e7ec      	b.n	8012e20 <__ulp+0x18>
 8012e46:	f1a0 0114 	sub.w	r1, r0, #20
 8012e4a:	291e      	cmp	r1, #30
 8012e4c:	bfda      	itte	le
 8012e4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012e52:	fa20 f101 	lsrle.w	r1, r0, r1
 8012e56:	2101      	movgt	r1, #1
 8012e58:	460a      	mov	r2, r1
 8012e5a:	e7e1      	b.n	8012e20 <__ulp+0x18>
 8012e5c:	7ff00000 	.word	0x7ff00000

08012e60 <__b2d>:
 8012e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e62:	6905      	ldr	r5, [r0, #16]
 8012e64:	f100 0714 	add.w	r7, r0, #20
 8012e68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012e6c:	1f2e      	subs	r6, r5, #4
 8012e6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012e72:	4620      	mov	r0, r4
 8012e74:	f7ff fd52 	bl	801291c <__hi0bits>
 8012e78:	f1c0 0320 	rsb	r3, r0, #32
 8012e7c:	280a      	cmp	r0, #10
 8012e7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012efc <__b2d+0x9c>
 8012e82:	600b      	str	r3, [r1, #0]
 8012e84:	dc14      	bgt.n	8012eb0 <__b2d+0x50>
 8012e86:	f1c0 0e0b 	rsb	lr, r0, #11
 8012e8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8012e8e:	42b7      	cmp	r7, r6
 8012e90:	ea41 030c 	orr.w	r3, r1, ip
 8012e94:	bf34      	ite	cc
 8012e96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012e9a:	2100      	movcs	r1, #0
 8012e9c:	3015      	adds	r0, #21
 8012e9e:	fa04 f000 	lsl.w	r0, r4, r0
 8012ea2:	fa21 f10e 	lsr.w	r1, r1, lr
 8012ea6:	ea40 0201 	orr.w	r2, r0, r1
 8012eaa:	ec43 2b10 	vmov	d0, r2, r3
 8012eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb0:	42b7      	cmp	r7, r6
 8012eb2:	bf3a      	itte	cc
 8012eb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012eb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8012ebc:	2100      	movcs	r1, #0
 8012ebe:	380b      	subs	r0, #11
 8012ec0:	d017      	beq.n	8012ef2 <__b2d+0x92>
 8012ec2:	f1c0 0c20 	rsb	ip, r0, #32
 8012ec6:	fa04 f500 	lsl.w	r5, r4, r0
 8012eca:	42be      	cmp	r6, r7
 8012ecc:	fa21 f40c 	lsr.w	r4, r1, ip
 8012ed0:	ea45 0504 	orr.w	r5, r5, r4
 8012ed4:	bf8c      	ite	hi
 8012ed6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012eda:	2400      	movls	r4, #0
 8012edc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012ee0:	fa01 f000 	lsl.w	r0, r1, r0
 8012ee4:	fa24 f40c 	lsr.w	r4, r4, ip
 8012ee8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012eec:	ea40 0204 	orr.w	r2, r0, r4
 8012ef0:	e7db      	b.n	8012eaa <__b2d+0x4a>
 8012ef2:	ea44 030c 	orr.w	r3, r4, ip
 8012ef6:	460a      	mov	r2, r1
 8012ef8:	e7d7      	b.n	8012eaa <__b2d+0x4a>
 8012efa:	bf00      	nop
 8012efc:	3ff00000 	.word	0x3ff00000

08012f00 <__d2b>:
 8012f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f04:	4689      	mov	r9, r1
 8012f06:	2101      	movs	r1, #1
 8012f08:	ec57 6b10 	vmov	r6, r7, d0
 8012f0c:	4690      	mov	r8, r2
 8012f0e:	f7ff fc0f 	bl	8012730 <_Balloc>
 8012f12:	4604      	mov	r4, r0
 8012f14:	b930      	cbnz	r0, 8012f24 <__d2b+0x24>
 8012f16:	4602      	mov	r2, r0
 8012f18:	4b25      	ldr	r3, [pc, #148]	; (8012fb0 <__d2b+0xb0>)
 8012f1a:	4826      	ldr	r0, [pc, #152]	; (8012fb4 <__d2b+0xb4>)
 8012f1c:	f240 310a 	movw	r1, #778	; 0x30a
 8012f20:	f000 fd80 	bl	8013a24 <__assert_func>
 8012f24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f2c:	bb35      	cbnz	r5, 8012f7c <__d2b+0x7c>
 8012f2e:	2e00      	cmp	r6, #0
 8012f30:	9301      	str	r3, [sp, #4]
 8012f32:	d028      	beq.n	8012f86 <__d2b+0x86>
 8012f34:	4668      	mov	r0, sp
 8012f36:	9600      	str	r6, [sp, #0]
 8012f38:	f7ff fd10 	bl	801295c <__lo0bits>
 8012f3c:	9900      	ldr	r1, [sp, #0]
 8012f3e:	b300      	cbz	r0, 8012f82 <__d2b+0x82>
 8012f40:	9a01      	ldr	r2, [sp, #4]
 8012f42:	f1c0 0320 	rsb	r3, r0, #32
 8012f46:	fa02 f303 	lsl.w	r3, r2, r3
 8012f4a:	430b      	orrs	r3, r1
 8012f4c:	40c2      	lsrs	r2, r0
 8012f4e:	6163      	str	r3, [r4, #20]
 8012f50:	9201      	str	r2, [sp, #4]
 8012f52:	9b01      	ldr	r3, [sp, #4]
 8012f54:	61a3      	str	r3, [r4, #24]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	bf14      	ite	ne
 8012f5a:	2202      	movne	r2, #2
 8012f5c:	2201      	moveq	r2, #1
 8012f5e:	6122      	str	r2, [r4, #16]
 8012f60:	b1d5      	cbz	r5, 8012f98 <__d2b+0x98>
 8012f62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012f66:	4405      	add	r5, r0
 8012f68:	f8c9 5000 	str.w	r5, [r9]
 8012f6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f70:	f8c8 0000 	str.w	r0, [r8]
 8012f74:	4620      	mov	r0, r4
 8012f76:	b003      	add	sp, #12
 8012f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f80:	e7d5      	b.n	8012f2e <__d2b+0x2e>
 8012f82:	6161      	str	r1, [r4, #20]
 8012f84:	e7e5      	b.n	8012f52 <__d2b+0x52>
 8012f86:	a801      	add	r0, sp, #4
 8012f88:	f7ff fce8 	bl	801295c <__lo0bits>
 8012f8c:	9b01      	ldr	r3, [sp, #4]
 8012f8e:	6163      	str	r3, [r4, #20]
 8012f90:	2201      	movs	r2, #1
 8012f92:	6122      	str	r2, [r4, #16]
 8012f94:	3020      	adds	r0, #32
 8012f96:	e7e3      	b.n	8012f60 <__d2b+0x60>
 8012f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012fa0:	f8c9 0000 	str.w	r0, [r9]
 8012fa4:	6918      	ldr	r0, [r3, #16]
 8012fa6:	f7ff fcb9 	bl	801291c <__hi0bits>
 8012faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012fae:	e7df      	b.n	8012f70 <__d2b+0x70>
 8012fb0:	0801571c 	.word	0x0801571c
 8012fb4:	08015810 	.word	0x08015810

08012fb8 <__ratio>:
 8012fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fbc:	4688      	mov	r8, r1
 8012fbe:	4669      	mov	r1, sp
 8012fc0:	4681      	mov	r9, r0
 8012fc2:	f7ff ff4d 	bl	8012e60 <__b2d>
 8012fc6:	a901      	add	r1, sp, #4
 8012fc8:	4640      	mov	r0, r8
 8012fca:	ec55 4b10 	vmov	r4, r5, d0
 8012fce:	f7ff ff47 	bl	8012e60 <__b2d>
 8012fd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012fda:	eba3 0c02 	sub.w	ip, r3, r2
 8012fde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012fe2:	1a9b      	subs	r3, r3, r2
 8012fe4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012fe8:	ec51 0b10 	vmov	r0, r1, d0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	bfd6      	itet	le
 8012ff0:	460a      	movle	r2, r1
 8012ff2:	462a      	movgt	r2, r5
 8012ff4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ff8:	468b      	mov	fp, r1
 8012ffa:	462f      	mov	r7, r5
 8012ffc:	bfd4      	ite	le
 8012ffe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013002:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013006:	4620      	mov	r0, r4
 8013008:	ee10 2a10 	vmov	r2, s0
 801300c:	465b      	mov	r3, fp
 801300e:	4639      	mov	r1, r7
 8013010:	f7ed fc2c 	bl	800086c <__aeabi_ddiv>
 8013014:	ec41 0b10 	vmov	d0, r0, r1
 8013018:	b003      	add	sp, #12
 801301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801301e <__copybits>:
 801301e:	3901      	subs	r1, #1
 8013020:	b570      	push	{r4, r5, r6, lr}
 8013022:	1149      	asrs	r1, r1, #5
 8013024:	6914      	ldr	r4, [r2, #16]
 8013026:	3101      	adds	r1, #1
 8013028:	f102 0314 	add.w	r3, r2, #20
 801302c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013030:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013034:	1f05      	subs	r5, r0, #4
 8013036:	42a3      	cmp	r3, r4
 8013038:	d30c      	bcc.n	8013054 <__copybits+0x36>
 801303a:	1aa3      	subs	r3, r4, r2
 801303c:	3b11      	subs	r3, #17
 801303e:	f023 0303 	bic.w	r3, r3, #3
 8013042:	3211      	adds	r2, #17
 8013044:	42a2      	cmp	r2, r4
 8013046:	bf88      	it	hi
 8013048:	2300      	movhi	r3, #0
 801304a:	4418      	add	r0, r3
 801304c:	2300      	movs	r3, #0
 801304e:	4288      	cmp	r0, r1
 8013050:	d305      	bcc.n	801305e <__copybits+0x40>
 8013052:	bd70      	pop	{r4, r5, r6, pc}
 8013054:	f853 6b04 	ldr.w	r6, [r3], #4
 8013058:	f845 6f04 	str.w	r6, [r5, #4]!
 801305c:	e7eb      	b.n	8013036 <__copybits+0x18>
 801305e:	f840 3b04 	str.w	r3, [r0], #4
 8013062:	e7f4      	b.n	801304e <__copybits+0x30>

08013064 <__any_on>:
 8013064:	f100 0214 	add.w	r2, r0, #20
 8013068:	6900      	ldr	r0, [r0, #16]
 801306a:	114b      	asrs	r3, r1, #5
 801306c:	4298      	cmp	r0, r3
 801306e:	b510      	push	{r4, lr}
 8013070:	db11      	blt.n	8013096 <__any_on+0x32>
 8013072:	dd0a      	ble.n	801308a <__any_on+0x26>
 8013074:	f011 011f 	ands.w	r1, r1, #31
 8013078:	d007      	beq.n	801308a <__any_on+0x26>
 801307a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801307e:	fa24 f001 	lsr.w	r0, r4, r1
 8013082:	fa00 f101 	lsl.w	r1, r0, r1
 8013086:	428c      	cmp	r4, r1
 8013088:	d10b      	bne.n	80130a2 <__any_on+0x3e>
 801308a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801308e:	4293      	cmp	r3, r2
 8013090:	d803      	bhi.n	801309a <__any_on+0x36>
 8013092:	2000      	movs	r0, #0
 8013094:	bd10      	pop	{r4, pc}
 8013096:	4603      	mov	r3, r0
 8013098:	e7f7      	b.n	801308a <__any_on+0x26>
 801309a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801309e:	2900      	cmp	r1, #0
 80130a0:	d0f5      	beq.n	801308e <__any_on+0x2a>
 80130a2:	2001      	movs	r0, #1
 80130a4:	e7f6      	b.n	8013094 <__any_on+0x30>

080130a6 <_calloc_r>:
 80130a6:	b513      	push	{r0, r1, r4, lr}
 80130a8:	434a      	muls	r2, r1
 80130aa:	4611      	mov	r1, r2
 80130ac:	9201      	str	r2, [sp, #4]
 80130ae:	f000 f859 	bl	8013164 <_malloc_r>
 80130b2:	4604      	mov	r4, r0
 80130b4:	b118      	cbz	r0, 80130be <_calloc_r+0x18>
 80130b6:	9a01      	ldr	r2, [sp, #4]
 80130b8:	2100      	movs	r1, #0
 80130ba:	f7fc f8db 	bl	800f274 <memset>
 80130be:	4620      	mov	r0, r4
 80130c0:	b002      	add	sp, #8
 80130c2:	bd10      	pop	{r4, pc}

080130c4 <_free_r>:
 80130c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80130c6:	2900      	cmp	r1, #0
 80130c8:	d048      	beq.n	801315c <_free_r+0x98>
 80130ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130ce:	9001      	str	r0, [sp, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	f1a1 0404 	sub.w	r4, r1, #4
 80130d6:	bfb8      	it	lt
 80130d8:	18e4      	addlt	r4, r4, r3
 80130da:	f000 fd31 	bl	8013b40 <__malloc_lock>
 80130de:	4a20      	ldr	r2, [pc, #128]	; (8013160 <_free_r+0x9c>)
 80130e0:	9801      	ldr	r0, [sp, #4]
 80130e2:	6813      	ldr	r3, [r2, #0]
 80130e4:	4615      	mov	r5, r2
 80130e6:	b933      	cbnz	r3, 80130f6 <_free_r+0x32>
 80130e8:	6063      	str	r3, [r4, #4]
 80130ea:	6014      	str	r4, [r2, #0]
 80130ec:	b003      	add	sp, #12
 80130ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130f2:	f000 bd2b 	b.w	8013b4c <__malloc_unlock>
 80130f6:	42a3      	cmp	r3, r4
 80130f8:	d90b      	bls.n	8013112 <_free_r+0x4e>
 80130fa:	6821      	ldr	r1, [r4, #0]
 80130fc:	1862      	adds	r2, r4, r1
 80130fe:	4293      	cmp	r3, r2
 8013100:	bf04      	itt	eq
 8013102:	681a      	ldreq	r2, [r3, #0]
 8013104:	685b      	ldreq	r3, [r3, #4]
 8013106:	6063      	str	r3, [r4, #4]
 8013108:	bf04      	itt	eq
 801310a:	1852      	addeq	r2, r2, r1
 801310c:	6022      	streq	r2, [r4, #0]
 801310e:	602c      	str	r4, [r5, #0]
 8013110:	e7ec      	b.n	80130ec <_free_r+0x28>
 8013112:	461a      	mov	r2, r3
 8013114:	685b      	ldr	r3, [r3, #4]
 8013116:	b10b      	cbz	r3, 801311c <_free_r+0x58>
 8013118:	42a3      	cmp	r3, r4
 801311a:	d9fa      	bls.n	8013112 <_free_r+0x4e>
 801311c:	6811      	ldr	r1, [r2, #0]
 801311e:	1855      	adds	r5, r2, r1
 8013120:	42a5      	cmp	r5, r4
 8013122:	d10b      	bne.n	801313c <_free_r+0x78>
 8013124:	6824      	ldr	r4, [r4, #0]
 8013126:	4421      	add	r1, r4
 8013128:	1854      	adds	r4, r2, r1
 801312a:	42a3      	cmp	r3, r4
 801312c:	6011      	str	r1, [r2, #0]
 801312e:	d1dd      	bne.n	80130ec <_free_r+0x28>
 8013130:	681c      	ldr	r4, [r3, #0]
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	6053      	str	r3, [r2, #4]
 8013136:	4421      	add	r1, r4
 8013138:	6011      	str	r1, [r2, #0]
 801313a:	e7d7      	b.n	80130ec <_free_r+0x28>
 801313c:	d902      	bls.n	8013144 <_free_r+0x80>
 801313e:	230c      	movs	r3, #12
 8013140:	6003      	str	r3, [r0, #0]
 8013142:	e7d3      	b.n	80130ec <_free_r+0x28>
 8013144:	6825      	ldr	r5, [r4, #0]
 8013146:	1961      	adds	r1, r4, r5
 8013148:	428b      	cmp	r3, r1
 801314a:	bf04      	itt	eq
 801314c:	6819      	ldreq	r1, [r3, #0]
 801314e:	685b      	ldreq	r3, [r3, #4]
 8013150:	6063      	str	r3, [r4, #4]
 8013152:	bf04      	itt	eq
 8013154:	1949      	addeq	r1, r1, r5
 8013156:	6021      	streq	r1, [r4, #0]
 8013158:	6054      	str	r4, [r2, #4]
 801315a:	e7c7      	b.n	80130ec <_free_r+0x28>
 801315c:	b003      	add	sp, #12
 801315e:	bd30      	pop	{r4, r5, pc}
 8013160:	20004cec 	.word	0x20004cec

08013164 <_malloc_r>:
 8013164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013166:	1ccd      	adds	r5, r1, #3
 8013168:	f025 0503 	bic.w	r5, r5, #3
 801316c:	3508      	adds	r5, #8
 801316e:	2d0c      	cmp	r5, #12
 8013170:	bf38      	it	cc
 8013172:	250c      	movcc	r5, #12
 8013174:	2d00      	cmp	r5, #0
 8013176:	4606      	mov	r6, r0
 8013178:	db01      	blt.n	801317e <_malloc_r+0x1a>
 801317a:	42a9      	cmp	r1, r5
 801317c:	d903      	bls.n	8013186 <_malloc_r+0x22>
 801317e:	230c      	movs	r3, #12
 8013180:	6033      	str	r3, [r6, #0]
 8013182:	2000      	movs	r0, #0
 8013184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013186:	f000 fcdb 	bl	8013b40 <__malloc_lock>
 801318a:	4921      	ldr	r1, [pc, #132]	; (8013210 <_malloc_r+0xac>)
 801318c:	680a      	ldr	r2, [r1, #0]
 801318e:	4614      	mov	r4, r2
 8013190:	b99c      	cbnz	r4, 80131ba <_malloc_r+0x56>
 8013192:	4f20      	ldr	r7, [pc, #128]	; (8013214 <_malloc_r+0xb0>)
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	b923      	cbnz	r3, 80131a2 <_malloc_r+0x3e>
 8013198:	4621      	mov	r1, r4
 801319a:	4630      	mov	r0, r6
 801319c:	f000 fafc 	bl	8013798 <_sbrk_r>
 80131a0:	6038      	str	r0, [r7, #0]
 80131a2:	4629      	mov	r1, r5
 80131a4:	4630      	mov	r0, r6
 80131a6:	f000 faf7 	bl	8013798 <_sbrk_r>
 80131aa:	1c43      	adds	r3, r0, #1
 80131ac:	d123      	bne.n	80131f6 <_malloc_r+0x92>
 80131ae:	230c      	movs	r3, #12
 80131b0:	6033      	str	r3, [r6, #0]
 80131b2:	4630      	mov	r0, r6
 80131b4:	f000 fcca 	bl	8013b4c <__malloc_unlock>
 80131b8:	e7e3      	b.n	8013182 <_malloc_r+0x1e>
 80131ba:	6823      	ldr	r3, [r4, #0]
 80131bc:	1b5b      	subs	r3, r3, r5
 80131be:	d417      	bmi.n	80131f0 <_malloc_r+0x8c>
 80131c0:	2b0b      	cmp	r3, #11
 80131c2:	d903      	bls.n	80131cc <_malloc_r+0x68>
 80131c4:	6023      	str	r3, [r4, #0]
 80131c6:	441c      	add	r4, r3
 80131c8:	6025      	str	r5, [r4, #0]
 80131ca:	e004      	b.n	80131d6 <_malloc_r+0x72>
 80131cc:	6863      	ldr	r3, [r4, #4]
 80131ce:	42a2      	cmp	r2, r4
 80131d0:	bf0c      	ite	eq
 80131d2:	600b      	streq	r3, [r1, #0]
 80131d4:	6053      	strne	r3, [r2, #4]
 80131d6:	4630      	mov	r0, r6
 80131d8:	f000 fcb8 	bl	8013b4c <__malloc_unlock>
 80131dc:	f104 000b 	add.w	r0, r4, #11
 80131e0:	1d23      	adds	r3, r4, #4
 80131e2:	f020 0007 	bic.w	r0, r0, #7
 80131e6:	1ac2      	subs	r2, r0, r3
 80131e8:	d0cc      	beq.n	8013184 <_malloc_r+0x20>
 80131ea:	1a1b      	subs	r3, r3, r0
 80131ec:	50a3      	str	r3, [r4, r2]
 80131ee:	e7c9      	b.n	8013184 <_malloc_r+0x20>
 80131f0:	4622      	mov	r2, r4
 80131f2:	6864      	ldr	r4, [r4, #4]
 80131f4:	e7cc      	b.n	8013190 <_malloc_r+0x2c>
 80131f6:	1cc4      	adds	r4, r0, #3
 80131f8:	f024 0403 	bic.w	r4, r4, #3
 80131fc:	42a0      	cmp	r0, r4
 80131fe:	d0e3      	beq.n	80131c8 <_malloc_r+0x64>
 8013200:	1a21      	subs	r1, r4, r0
 8013202:	4630      	mov	r0, r6
 8013204:	f000 fac8 	bl	8013798 <_sbrk_r>
 8013208:	3001      	adds	r0, #1
 801320a:	d1dd      	bne.n	80131c8 <_malloc_r+0x64>
 801320c:	e7cf      	b.n	80131ae <_malloc_r+0x4a>
 801320e:	bf00      	nop
 8013210:	20004cec 	.word	0x20004cec
 8013214:	20004cf0 	.word	0x20004cf0

08013218 <__ssputs_r>:
 8013218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801321c:	688e      	ldr	r6, [r1, #8]
 801321e:	429e      	cmp	r6, r3
 8013220:	4682      	mov	sl, r0
 8013222:	460c      	mov	r4, r1
 8013224:	4690      	mov	r8, r2
 8013226:	461f      	mov	r7, r3
 8013228:	d838      	bhi.n	801329c <__ssputs_r+0x84>
 801322a:	898a      	ldrh	r2, [r1, #12]
 801322c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013230:	d032      	beq.n	8013298 <__ssputs_r+0x80>
 8013232:	6825      	ldr	r5, [r4, #0]
 8013234:	6909      	ldr	r1, [r1, #16]
 8013236:	eba5 0901 	sub.w	r9, r5, r1
 801323a:	6965      	ldr	r5, [r4, #20]
 801323c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013244:	3301      	adds	r3, #1
 8013246:	444b      	add	r3, r9
 8013248:	106d      	asrs	r5, r5, #1
 801324a:	429d      	cmp	r5, r3
 801324c:	bf38      	it	cc
 801324e:	461d      	movcc	r5, r3
 8013250:	0553      	lsls	r3, r2, #21
 8013252:	d531      	bpl.n	80132b8 <__ssputs_r+0xa0>
 8013254:	4629      	mov	r1, r5
 8013256:	f7ff ff85 	bl	8013164 <_malloc_r>
 801325a:	4606      	mov	r6, r0
 801325c:	b950      	cbnz	r0, 8013274 <__ssputs_r+0x5c>
 801325e:	230c      	movs	r3, #12
 8013260:	f8ca 3000 	str.w	r3, [sl]
 8013264:	89a3      	ldrh	r3, [r4, #12]
 8013266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801326a:	81a3      	strh	r3, [r4, #12]
 801326c:	f04f 30ff 	mov.w	r0, #4294967295
 8013270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013274:	6921      	ldr	r1, [r4, #16]
 8013276:	464a      	mov	r2, r9
 8013278:	f7fb ffee 	bl	800f258 <memcpy>
 801327c:	89a3      	ldrh	r3, [r4, #12]
 801327e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013286:	81a3      	strh	r3, [r4, #12]
 8013288:	6126      	str	r6, [r4, #16]
 801328a:	6165      	str	r5, [r4, #20]
 801328c:	444e      	add	r6, r9
 801328e:	eba5 0509 	sub.w	r5, r5, r9
 8013292:	6026      	str	r6, [r4, #0]
 8013294:	60a5      	str	r5, [r4, #8]
 8013296:	463e      	mov	r6, r7
 8013298:	42be      	cmp	r6, r7
 801329a:	d900      	bls.n	801329e <__ssputs_r+0x86>
 801329c:	463e      	mov	r6, r7
 801329e:	4632      	mov	r2, r6
 80132a0:	6820      	ldr	r0, [r4, #0]
 80132a2:	4641      	mov	r1, r8
 80132a4:	f000 fc32 	bl	8013b0c <memmove>
 80132a8:	68a3      	ldr	r3, [r4, #8]
 80132aa:	6822      	ldr	r2, [r4, #0]
 80132ac:	1b9b      	subs	r3, r3, r6
 80132ae:	4432      	add	r2, r6
 80132b0:	60a3      	str	r3, [r4, #8]
 80132b2:	6022      	str	r2, [r4, #0]
 80132b4:	2000      	movs	r0, #0
 80132b6:	e7db      	b.n	8013270 <__ssputs_r+0x58>
 80132b8:	462a      	mov	r2, r5
 80132ba:	f000 fc4d 	bl	8013b58 <_realloc_r>
 80132be:	4606      	mov	r6, r0
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d1e1      	bne.n	8013288 <__ssputs_r+0x70>
 80132c4:	6921      	ldr	r1, [r4, #16]
 80132c6:	4650      	mov	r0, sl
 80132c8:	f7ff fefc 	bl	80130c4 <_free_r>
 80132cc:	e7c7      	b.n	801325e <__ssputs_r+0x46>
	...

080132d0 <_svfiprintf_r>:
 80132d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	4698      	mov	r8, r3
 80132d6:	898b      	ldrh	r3, [r1, #12]
 80132d8:	061b      	lsls	r3, r3, #24
 80132da:	b09d      	sub	sp, #116	; 0x74
 80132dc:	4607      	mov	r7, r0
 80132de:	460d      	mov	r5, r1
 80132e0:	4614      	mov	r4, r2
 80132e2:	d50e      	bpl.n	8013302 <_svfiprintf_r+0x32>
 80132e4:	690b      	ldr	r3, [r1, #16]
 80132e6:	b963      	cbnz	r3, 8013302 <_svfiprintf_r+0x32>
 80132e8:	2140      	movs	r1, #64	; 0x40
 80132ea:	f7ff ff3b 	bl	8013164 <_malloc_r>
 80132ee:	6028      	str	r0, [r5, #0]
 80132f0:	6128      	str	r0, [r5, #16]
 80132f2:	b920      	cbnz	r0, 80132fe <_svfiprintf_r+0x2e>
 80132f4:	230c      	movs	r3, #12
 80132f6:	603b      	str	r3, [r7, #0]
 80132f8:	f04f 30ff 	mov.w	r0, #4294967295
 80132fc:	e0d1      	b.n	80134a2 <_svfiprintf_r+0x1d2>
 80132fe:	2340      	movs	r3, #64	; 0x40
 8013300:	616b      	str	r3, [r5, #20]
 8013302:	2300      	movs	r3, #0
 8013304:	9309      	str	r3, [sp, #36]	; 0x24
 8013306:	2320      	movs	r3, #32
 8013308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801330c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013310:	2330      	movs	r3, #48	; 0x30
 8013312:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80134bc <_svfiprintf_r+0x1ec>
 8013316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801331a:	f04f 0901 	mov.w	r9, #1
 801331e:	4623      	mov	r3, r4
 8013320:	469a      	mov	sl, r3
 8013322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013326:	b10a      	cbz	r2, 801332c <_svfiprintf_r+0x5c>
 8013328:	2a25      	cmp	r2, #37	; 0x25
 801332a:	d1f9      	bne.n	8013320 <_svfiprintf_r+0x50>
 801332c:	ebba 0b04 	subs.w	fp, sl, r4
 8013330:	d00b      	beq.n	801334a <_svfiprintf_r+0x7a>
 8013332:	465b      	mov	r3, fp
 8013334:	4622      	mov	r2, r4
 8013336:	4629      	mov	r1, r5
 8013338:	4638      	mov	r0, r7
 801333a:	f7ff ff6d 	bl	8013218 <__ssputs_r>
 801333e:	3001      	adds	r0, #1
 8013340:	f000 80aa 	beq.w	8013498 <_svfiprintf_r+0x1c8>
 8013344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013346:	445a      	add	r2, fp
 8013348:	9209      	str	r2, [sp, #36]	; 0x24
 801334a:	f89a 3000 	ldrb.w	r3, [sl]
 801334e:	2b00      	cmp	r3, #0
 8013350:	f000 80a2 	beq.w	8013498 <_svfiprintf_r+0x1c8>
 8013354:	2300      	movs	r3, #0
 8013356:	f04f 32ff 	mov.w	r2, #4294967295
 801335a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801335e:	f10a 0a01 	add.w	sl, sl, #1
 8013362:	9304      	str	r3, [sp, #16]
 8013364:	9307      	str	r3, [sp, #28]
 8013366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801336a:	931a      	str	r3, [sp, #104]	; 0x68
 801336c:	4654      	mov	r4, sl
 801336e:	2205      	movs	r2, #5
 8013370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013374:	4851      	ldr	r0, [pc, #324]	; (80134bc <_svfiprintf_r+0x1ec>)
 8013376:	f7ec ff43 	bl	8000200 <memchr>
 801337a:	9a04      	ldr	r2, [sp, #16]
 801337c:	b9d8      	cbnz	r0, 80133b6 <_svfiprintf_r+0xe6>
 801337e:	06d0      	lsls	r0, r2, #27
 8013380:	bf44      	itt	mi
 8013382:	2320      	movmi	r3, #32
 8013384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013388:	0711      	lsls	r1, r2, #28
 801338a:	bf44      	itt	mi
 801338c:	232b      	movmi	r3, #43	; 0x2b
 801338e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013392:	f89a 3000 	ldrb.w	r3, [sl]
 8013396:	2b2a      	cmp	r3, #42	; 0x2a
 8013398:	d015      	beq.n	80133c6 <_svfiprintf_r+0xf6>
 801339a:	9a07      	ldr	r2, [sp, #28]
 801339c:	4654      	mov	r4, sl
 801339e:	2000      	movs	r0, #0
 80133a0:	f04f 0c0a 	mov.w	ip, #10
 80133a4:	4621      	mov	r1, r4
 80133a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133aa:	3b30      	subs	r3, #48	; 0x30
 80133ac:	2b09      	cmp	r3, #9
 80133ae:	d94e      	bls.n	801344e <_svfiprintf_r+0x17e>
 80133b0:	b1b0      	cbz	r0, 80133e0 <_svfiprintf_r+0x110>
 80133b2:	9207      	str	r2, [sp, #28]
 80133b4:	e014      	b.n	80133e0 <_svfiprintf_r+0x110>
 80133b6:	eba0 0308 	sub.w	r3, r0, r8
 80133ba:	fa09 f303 	lsl.w	r3, r9, r3
 80133be:	4313      	orrs	r3, r2
 80133c0:	9304      	str	r3, [sp, #16]
 80133c2:	46a2      	mov	sl, r4
 80133c4:	e7d2      	b.n	801336c <_svfiprintf_r+0x9c>
 80133c6:	9b03      	ldr	r3, [sp, #12]
 80133c8:	1d19      	adds	r1, r3, #4
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	9103      	str	r1, [sp, #12]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	bfbb      	ittet	lt
 80133d2:	425b      	neglt	r3, r3
 80133d4:	f042 0202 	orrlt.w	r2, r2, #2
 80133d8:	9307      	strge	r3, [sp, #28]
 80133da:	9307      	strlt	r3, [sp, #28]
 80133dc:	bfb8      	it	lt
 80133de:	9204      	strlt	r2, [sp, #16]
 80133e0:	7823      	ldrb	r3, [r4, #0]
 80133e2:	2b2e      	cmp	r3, #46	; 0x2e
 80133e4:	d10c      	bne.n	8013400 <_svfiprintf_r+0x130>
 80133e6:	7863      	ldrb	r3, [r4, #1]
 80133e8:	2b2a      	cmp	r3, #42	; 0x2a
 80133ea:	d135      	bne.n	8013458 <_svfiprintf_r+0x188>
 80133ec:	9b03      	ldr	r3, [sp, #12]
 80133ee:	1d1a      	adds	r2, r3, #4
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	9203      	str	r2, [sp, #12]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	bfb8      	it	lt
 80133f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80133fc:	3402      	adds	r4, #2
 80133fe:	9305      	str	r3, [sp, #20]
 8013400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80134cc <_svfiprintf_r+0x1fc>
 8013404:	7821      	ldrb	r1, [r4, #0]
 8013406:	2203      	movs	r2, #3
 8013408:	4650      	mov	r0, sl
 801340a:	f7ec fef9 	bl	8000200 <memchr>
 801340e:	b140      	cbz	r0, 8013422 <_svfiprintf_r+0x152>
 8013410:	2340      	movs	r3, #64	; 0x40
 8013412:	eba0 000a 	sub.w	r0, r0, sl
 8013416:	fa03 f000 	lsl.w	r0, r3, r0
 801341a:	9b04      	ldr	r3, [sp, #16]
 801341c:	4303      	orrs	r3, r0
 801341e:	3401      	adds	r4, #1
 8013420:	9304      	str	r3, [sp, #16]
 8013422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013426:	4826      	ldr	r0, [pc, #152]	; (80134c0 <_svfiprintf_r+0x1f0>)
 8013428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801342c:	2206      	movs	r2, #6
 801342e:	f7ec fee7 	bl	8000200 <memchr>
 8013432:	2800      	cmp	r0, #0
 8013434:	d038      	beq.n	80134a8 <_svfiprintf_r+0x1d8>
 8013436:	4b23      	ldr	r3, [pc, #140]	; (80134c4 <_svfiprintf_r+0x1f4>)
 8013438:	bb1b      	cbnz	r3, 8013482 <_svfiprintf_r+0x1b2>
 801343a:	9b03      	ldr	r3, [sp, #12]
 801343c:	3307      	adds	r3, #7
 801343e:	f023 0307 	bic.w	r3, r3, #7
 8013442:	3308      	adds	r3, #8
 8013444:	9303      	str	r3, [sp, #12]
 8013446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013448:	4433      	add	r3, r6
 801344a:	9309      	str	r3, [sp, #36]	; 0x24
 801344c:	e767      	b.n	801331e <_svfiprintf_r+0x4e>
 801344e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013452:	460c      	mov	r4, r1
 8013454:	2001      	movs	r0, #1
 8013456:	e7a5      	b.n	80133a4 <_svfiprintf_r+0xd4>
 8013458:	2300      	movs	r3, #0
 801345a:	3401      	adds	r4, #1
 801345c:	9305      	str	r3, [sp, #20]
 801345e:	4619      	mov	r1, r3
 8013460:	f04f 0c0a 	mov.w	ip, #10
 8013464:	4620      	mov	r0, r4
 8013466:	f810 2b01 	ldrb.w	r2, [r0], #1
 801346a:	3a30      	subs	r2, #48	; 0x30
 801346c:	2a09      	cmp	r2, #9
 801346e:	d903      	bls.n	8013478 <_svfiprintf_r+0x1a8>
 8013470:	2b00      	cmp	r3, #0
 8013472:	d0c5      	beq.n	8013400 <_svfiprintf_r+0x130>
 8013474:	9105      	str	r1, [sp, #20]
 8013476:	e7c3      	b.n	8013400 <_svfiprintf_r+0x130>
 8013478:	fb0c 2101 	mla	r1, ip, r1, r2
 801347c:	4604      	mov	r4, r0
 801347e:	2301      	movs	r3, #1
 8013480:	e7f0      	b.n	8013464 <_svfiprintf_r+0x194>
 8013482:	ab03      	add	r3, sp, #12
 8013484:	9300      	str	r3, [sp, #0]
 8013486:	462a      	mov	r2, r5
 8013488:	4b0f      	ldr	r3, [pc, #60]	; (80134c8 <_svfiprintf_r+0x1f8>)
 801348a:	a904      	add	r1, sp, #16
 801348c:	4638      	mov	r0, r7
 801348e:	f7fb ff99 	bl	800f3c4 <_printf_float>
 8013492:	1c42      	adds	r2, r0, #1
 8013494:	4606      	mov	r6, r0
 8013496:	d1d6      	bne.n	8013446 <_svfiprintf_r+0x176>
 8013498:	89ab      	ldrh	r3, [r5, #12]
 801349a:	065b      	lsls	r3, r3, #25
 801349c:	f53f af2c 	bmi.w	80132f8 <_svfiprintf_r+0x28>
 80134a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134a2:	b01d      	add	sp, #116	; 0x74
 80134a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134a8:	ab03      	add	r3, sp, #12
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	462a      	mov	r2, r5
 80134ae:	4b06      	ldr	r3, [pc, #24]	; (80134c8 <_svfiprintf_r+0x1f8>)
 80134b0:	a904      	add	r1, sp, #16
 80134b2:	4638      	mov	r0, r7
 80134b4:	f7fc fa2a 	bl	800f90c <_printf_i>
 80134b8:	e7eb      	b.n	8013492 <_svfiprintf_r+0x1c2>
 80134ba:	bf00      	nop
 80134bc:	0801596c 	.word	0x0801596c
 80134c0:	08015976 	.word	0x08015976
 80134c4:	0800f3c5 	.word	0x0800f3c5
 80134c8:	08013219 	.word	0x08013219
 80134cc:	08015972 	.word	0x08015972

080134d0 <__sfputc_r>:
 80134d0:	6893      	ldr	r3, [r2, #8]
 80134d2:	3b01      	subs	r3, #1
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	b410      	push	{r4}
 80134d8:	6093      	str	r3, [r2, #8]
 80134da:	da08      	bge.n	80134ee <__sfputc_r+0x1e>
 80134dc:	6994      	ldr	r4, [r2, #24]
 80134de:	42a3      	cmp	r3, r4
 80134e0:	db01      	blt.n	80134e6 <__sfputc_r+0x16>
 80134e2:	290a      	cmp	r1, #10
 80134e4:	d103      	bne.n	80134ee <__sfputc_r+0x1e>
 80134e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134ea:	f000 b9bb 	b.w	8013864 <__swbuf_r>
 80134ee:	6813      	ldr	r3, [r2, #0]
 80134f0:	1c58      	adds	r0, r3, #1
 80134f2:	6010      	str	r0, [r2, #0]
 80134f4:	7019      	strb	r1, [r3, #0]
 80134f6:	4608      	mov	r0, r1
 80134f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134fc:	4770      	bx	lr

080134fe <__sfputs_r>:
 80134fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013500:	4606      	mov	r6, r0
 8013502:	460f      	mov	r7, r1
 8013504:	4614      	mov	r4, r2
 8013506:	18d5      	adds	r5, r2, r3
 8013508:	42ac      	cmp	r4, r5
 801350a:	d101      	bne.n	8013510 <__sfputs_r+0x12>
 801350c:	2000      	movs	r0, #0
 801350e:	e007      	b.n	8013520 <__sfputs_r+0x22>
 8013510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013514:	463a      	mov	r2, r7
 8013516:	4630      	mov	r0, r6
 8013518:	f7ff ffda 	bl	80134d0 <__sfputc_r>
 801351c:	1c43      	adds	r3, r0, #1
 801351e:	d1f3      	bne.n	8013508 <__sfputs_r+0xa>
 8013520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013524 <_vfiprintf_r>:
 8013524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013528:	460d      	mov	r5, r1
 801352a:	b09d      	sub	sp, #116	; 0x74
 801352c:	4614      	mov	r4, r2
 801352e:	4698      	mov	r8, r3
 8013530:	4606      	mov	r6, r0
 8013532:	b118      	cbz	r0, 801353c <_vfiprintf_r+0x18>
 8013534:	6983      	ldr	r3, [r0, #24]
 8013536:	b90b      	cbnz	r3, 801353c <_vfiprintf_r+0x18>
 8013538:	f7fe fc68 	bl	8011e0c <__sinit>
 801353c:	4b89      	ldr	r3, [pc, #548]	; (8013764 <_vfiprintf_r+0x240>)
 801353e:	429d      	cmp	r5, r3
 8013540:	d11b      	bne.n	801357a <_vfiprintf_r+0x56>
 8013542:	6875      	ldr	r5, [r6, #4]
 8013544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013546:	07d9      	lsls	r1, r3, #31
 8013548:	d405      	bmi.n	8013556 <_vfiprintf_r+0x32>
 801354a:	89ab      	ldrh	r3, [r5, #12]
 801354c:	059a      	lsls	r2, r3, #22
 801354e:	d402      	bmi.n	8013556 <_vfiprintf_r+0x32>
 8013550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013552:	f7ff f86c 	bl	801262e <__retarget_lock_acquire_recursive>
 8013556:	89ab      	ldrh	r3, [r5, #12]
 8013558:	071b      	lsls	r3, r3, #28
 801355a:	d501      	bpl.n	8013560 <_vfiprintf_r+0x3c>
 801355c:	692b      	ldr	r3, [r5, #16]
 801355e:	b9eb      	cbnz	r3, 801359c <_vfiprintf_r+0x78>
 8013560:	4629      	mov	r1, r5
 8013562:	4630      	mov	r0, r6
 8013564:	f000 f9f0 	bl	8013948 <__swsetup_r>
 8013568:	b1c0      	cbz	r0, 801359c <_vfiprintf_r+0x78>
 801356a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801356c:	07dc      	lsls	r4, r3, #31
 801356e:	d50e      	bpl.n	801358e <_vfiprintf_r+0x6a>
 8013570:	f04f 30ff 	mov.w	r0, #4294967295
 8013574:	b01d      	add	sp, #116	; 0x74
 8013576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801357a:	4b7b      	ldr	r3, [pc, #492]	; (8013768 <_vfiprintf_r+0x244>)
 801357c:	429d      	cmp	r5, r3
 801357e:	d101      	bne.n	8013584 <_vfiprintf_r+0x60>
 8013580:	68b5      	ldr	r5, [r6, #8]
 8013582:	e7df      	b.n	8013544 <_vfiprintf_r+0x20>
 8013584:	4b79      	ldr	r3, [pc, #484]	; (801376c <_vfiprintf_r+0x248>)
 8013586:	429d      	cmp	r5, r3
 8013588:	bf08      	it	eq
 801358a:	68f5      	ldreq	r5, [r6, #12]
 801358c:	e7da      	b.n	8013544 <_vfiprintf_r+0x20>
 801358e:	89ab      	ldrh	r3, [r5, #12]
 8013590:	0598      	lsls	r0, r3, #22
 8013592:	d4ed      	bmi.n	8013570 <_vfiprintf_r+0x4c>
 8013594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013596:	f7ff f84b 	bl	8012630 <__retarget_lock_release_recursive>
 801359a:	e7e9      	b.n	8013570 <_vfiprintf_r+0x4c>
 801359c:	2300      	movs	r3, #0
 801359e:	9309      	str	r3, [sp, #36]	; 0x24
 80135a0:	2320      	movs	r3, #32
 80135a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80135a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80135aa:	2330      	movs	r3, #48	; 0x30
 80135ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013770 <_vfiprintf_r+0x24c>
 80135b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80135b4:	f04f 0901 	mov.w	r9, #1
 80135b8:	4623      	mov	r3, r4
 80135ba:	469a      	mov	sl, r3
 80135bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135c0:	b10a      	cbz	r2, 80135c6 <_vfiprintf_r+0xa2>
 80135c2:	2a25      	cmp	r2, #37	; 0x25
 80135c4:	d1f9      	bne.n	80135ba <_vfiprintf_r+0x96>
 80135c6:	ebba 0b04 	subs.w	fp, sl, r4
 80135ca:	d00b      	beq.n	80135e4 <_vfiprintf_r+0xc0>
 80135cc:	465b      	mov	r3, fp
 80135ce:	4622      	mov	r2, r4
 80135d0:	4629      	mov	r1, r5
 80135d2:	4630      	mov	r0, r6
 80135d4:	f7ff ff93 	bl	80134fe <__sfputs_r>
 80135d8:	3001      	adds	r0, #1
 80135da:	f000 80aa 	beq.w	8013732 <_vfiprintf_r+0x20e>
 80135de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135e0:	445a      	add	r2, fp
 80135e2:	9209      	str	r2, [sp, #36]	; 0x24
 80135e4:	f89a 3000 	ldrb.w	r3, [sl]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	f000 80a2 	beq.w	8013732 <_vfiprintf_r+0x20e>
 80135ee:	2300      	movs	r3, #0
 80135f0:	f04f 32ff 	mov.w	r2, #4294967295
 80135f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135f8:	f10a 0a01 	add.w	sl, sl, #1
 80135fc:	9304      	str	r3, [sp, #16]
 80135fe:	9307      	str	r3, [sp, #28]
 8013600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013604:	931a      	str	r3, [sp, #104]	; 0x68
 8013606:	4654      	mov	r4, sl
 8013608:	2205      	movs	r2, #5
 801360a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801360e:	4858      	ldr	r0, [pc, #352]	; (8013770 <_vfiprintf_r+0x24c>)
 8013610:	f7ec fdf6 	bl	8000200 <memchr>
 8013614:	9a04      	ldr	r2, [sp, #16]
 8013616:	b9d8      	cbnz	r0, 8013650 <_vfiprintf_r+0x12c>
 8013618:	06d1      	lsls	r1, r2, #27
 801361a:	bf44      	itt	mi
 801361c:	2320      	movmi	r3, #32
 801361e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013622:	0713      	lsls	r3, r2, #28
 8013624:	bf44      	itt	mi
 8013626:	232b      	movmi	r3, #43	; 0x2b
 8013628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801362c:	f89a 3000 	ldrb.w	r3, [sl]
 8013630:	2b2a      	cmp	r3, #42	; 0x2a
 8013632:	d015      	beq.n	8013660 <_vfiprintf_r+0x13c>
 8013634:	9a07      	ldr	r2, [sp, #28]
 8013636:	4654      	mov	r4, sl
 8013638:	2000      	movs	r0, #0
 801363a:	f04f 0c0a 	mov.w	ip, #10
 801363e:	4621      	mov	r1, r4
 8013640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013644:	3b30      	subs	r3, #48	; 0x30
 8013646:	2b09      	cmp	r3, #9
 8013648:	d94e      	bls.n	80136e8 <_vfiprintf_r+0x1c4>
 801364a:	b1b0      	cbz	r0, 801367a <_vfiprintf_r+0x156>
 801364c:	9207      	str	r2, [sp, #28]
 801364e:	e014      	b.n	801367a <_vfiprintf_r+0x156>
 8013650:	eba0 0308 	sub.w	r3, r0, r8
 8013654:	fa09 f303 	lsl.w	r3, r9, r3
 8013658:	4313      	orrs	r3, r2
 801365a:	9304      	str	r3, [sp, #16]
 801365c:	46a2      	mov	sl, r4
 801365e:	e7d2      	b.n	8013606 <_vfiprintf_r+0xe2>
 8013660:	9b03      	ldr	r3, [sp, #12]
 8013662:	1d19      	adds	r1, r3, #4
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	9103      	str	r1, [sp, #12]
 8013668:	2b00      	cmp	r3, #0
 801366a:	bfbb      	ittet	lt
 801366c:	425b      	neglt	r3, r3
 801366e:	f042 0202 	orrlt.w	r2, r2, #2
 8013672:	9307      	strge	r3, [sp, #28]
 8013674:	9307      	strlt	r3, [sp, #28]
 8013676:	bfb8      	it	lt
 8013678:	9204      	strlt	r2, [sp, #16]
 801367a:	7823      	ldrb	r3, [r4, #0]
 801367c:	2b2e      	cmp	r3, #46	; 0x2e
 801367e:	d10c      	bne.n	801369a <_vfiprintf_r+0x176>
 8013680:	7863      	ldrb	r3, [r4, #1]
 8013682:	2b2a      	cmp	r3, #42	; 0x2a
 8013684:	d135      	bne.n	80136f2 <_vfiprintf_r+0x1ce>
 8013686:	9b03      	ldr	r3, [sp, #12]
 8013688:	1d1a      	adds	r2, r3, #4
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	9203      	str	r2, [sp, #12]
 801368e:	2b00      	cmp	r3, #0
 8013690:	bfb8      	it	lt
 8013692:	f04f 33ff 	movlt.w	r3, #4294967295
 8013696:	3402      	adds	r4, #2
 8013698:	9305      	str	r3, [sp, #20]
 801369a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013780 <_vfiprintf_r+0x25c>
 801369e:	7821      	ldrb	r1, [r4, #0]
 80136a0:	2203      	movs	r2, #3
 80136a2:	4650      	mov	r0, sl
 80136a4:	f7ec fdac 	bl	8000200 <memchr>
 80136a8:	b140      	cbz	r0, 80136bc <_vfiprintf_r+0x198>
 80136aa:	2340      	movs	r3, #64	; 0x40
 80136ac:	eba0 000a 	sub.w	r0, r0, sl
 80136b0:	fa03 f000 	lsl.w	r0, r3, r0
 80136b4:	9b04      	ldr	r3, [sp, #16]
 80136b6:	4303      	orrs	r3, r0
 80136b8:	3401      	adds	r4, #1
 80136ba:	9304      	str	r3, [sp, #16]
 80136bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136c0:	482c      	ldr	r0, [pc, #176]	; (8013774 <_vfiprintf_r+0x250>)
 80136c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80136c6:	2206      	movs	r2, #6
 80136c8:	f7ec fd9a 	bl	8000200 <memchr>
 80136cc:	2800      	cmp	r0, #0
 80136ce:	d03f      	beq.n	8013750 <_vfiprintf_r+0x22c>
 80136d0:	4b29      	ldr	r3, [pc, #164]	; (8013778 <_vfiprintf_r+0x254>)
 80136d2:	bb1b      	cbnz	r3, 801371c <_vfiprintf_r+0x1f8>
 80136d4:	9b03      	ldr	r3, [sp, #12]
 80136d6:	3307      	adds	r3, #7
 80136d8:	f023 0307 	bic.w	r3, r3, #7
 80136dc:	3308      	adds	r3, #8
 80136de:	9303      	str	r3, [sp, #12]
 80136e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136e2:	443b      	add	r3, r7
 80136e4:	9309      	str	r3, [sp, #36]	; 0x24
 80136e6:	e767      	b.n	80135b8 <_vfiprintf_r+0x94>
 80136e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80136ec:	460c      	mov	r4, r1
 80136ee:	2001      	movs	r0, #1
 80136f0:	e7a5      	b.n	801363e <_vfiprintf_r+0x11a>
 80136f2:	2300      	movs	r3, #0
 80136f4:	3401      	adds	r4, #1
 80136f6:	9305      	str	r3, [sp, #20]
 80136f8:	4619      	mov	r1, r3
 80136fa:	f04f 0c0a 	mov.w	ip, #10
 80136fe:	4620      	mov	r0, r4
 8013700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013704:	3a30      	subs	r2, #48	; 0x30
 8013706:	2a09      	cmp	r2, #9
 8013708:	d903      	bls.n	8013712 <_vfiprintf_r+0x1ee>
 801370a:	2b00      	cmp	r3, #0
 801370c:	d0c5      	beq.n	801369a <_vfiprintf_r+0x176>
 801370e:	9105      	str	r1, [sp, #20]
 8013710:	e7c3      	b.n	801369a <_vfiprintf_r+0x176>
 8013712:	fb0c 2101 	mla	r1, ip, r1, r2
 8013716:	4604      	mov	r4, r0
 8013718:	2301      	movs	r3, #1
 801371a:	e7f0      	b.n	80136fe <_vfiprintf_r+0x1da>
 801371c:	ab03      	add	r3, sp, #12
 801371e:	9300      	str	r3, [sp, #0]
 8013720:	462a      	mov	r2, r5
 8013722:	4b16      	ldr	r3, [pc, #88]	; (801377c <_vfiprintf_r+0x258>)
 8013724:	a904      	add	r1, sp, #16
 8013726:	4630      	mov	r0, r6
 8013728:	f7fb fe4c 	bl	800f3c4 <_printf_float>
 801372c:	4607      	mov	r7, r0
 801372e:	1c78      	adds	r0, r7, #1
 8013730:	d1d6      	bne.n	80136e0 <_vfiprintf_r+0x1bc>
 8013732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013734:	07d9      	lsls	r1, r3, #31
 8013736:	d405      	bmi.n	8013744 <_vfiprintf_r+0x220>
 8013738:	89ab      	ldrh	r3, [r5, #12]
 801373a:	059a      	lsls	r2, r3, #22
 801373c:	d402      	bmi.n	8013744 <_vfiprintf_r+0x220>
 801373e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013740:	f7fe ff76 	bl	8012630 <__retarget_lock_release_recursive>
 8013744:	89ab      	ldrh	r3, [r5, #12]
 8013746:	065b      	lsls	r3, r3, #25
 8013748:	f53f af12 	bmi.w	8013570 <_vfiprintf_r+0x4c>
 801374c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801374e:	e711      	b.n	8013574 <_vfiprintf_r+0x50>
 8013750:	ab03      	add	r3, sp, #12
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	462a      	mov	r2, r5
 8013756:	4b09      	ldr	r3, [pc, #36]	; (801377c <_vfiprintf_r+0x258>)
 8013758:	a904      	add	r1, sp, #16
 801375a:	4630      	mov	r0, r6
 801375c:	f7fc f8d6 	bl	800f90c <_printf_i>
 8013760:	e7e4      	b.n	801372c <_vfiprintf_r+0x208>
 8013762:	bf00      	nop
 8013764:	08015750 	.word	0x08015750
 8013768:	08015770 	.word	0x08015770
 801376c:	08015730 	.word	0x08015730
 8013770:	0801596c 	.word	0x0801596c
 8013774:	08015976 	.word	0x08015976
 8013778:	0800f3c5 	.word	0x0800f3c5
 801377c:	080134ff 	.word	0x080134ff
 8013780:	08015972 	.word	0x08015972
 8013784:	00000000 	.word	0x00000000

08013788 <nan>:
 8013788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013790 <nan+0x8>
 801378c:	4770      	bx	lr
 801378e:	bf00      	nop
 8013790:	00000000 	.word	0x00000000
 8013794:	7ff80000 	.word	0x7ff80000

08013798 <_sbrk_r>:
 8013798:	b538      	push	{r3, r4, r5, lr}
 801379a:	4d06      	ldr	r5, [pc, #24]	; (80137b4 <_sbrk_r+0x1c>)
 801379c:	2300      	movs	r3, #0
 801379e:	4604      	mov	r4, r0
 80137a0:	4608      	mov	r0, r1
 80137a2:	602b      	str	r3, [r5, #0]
 80137a4:	f7ee fd7e 	bl	80022a4 <_sbrk>
 80137a8:	1c43      	adds	r3, r0, #1
 80137aa:	d102      	bne.n	80137b2 <_sbrk_r+0x1a>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	b103      	cbz	r3, 80137b2 <_sbrk_r+0x1a>
 80137b0:	6023      	str	r3, [r4, #0]
 80137b2:	bd38      	pop	{r3, r4, r5, pc}
 80137b4:	20005888 	.word	0x20005888

080137b8 <__sread>:
 80137b8:	b510      	push	{r4, lr}
 80137ba:	460c      	mov	r4, r1
 80137bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137c0:	f000 f9f0 	bl	8013ba4 <_read_r>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	bfab      	itete	ge
 80137c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80137ca:	89a3      	ldrhlt	r3, [r4, #12]
 80137cc:	181b      	addge	r3, r3, r0
 80137ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80137d2:	bfac      	ite	ge
 80137d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80137d6:	81a3      	strhlt	r3, [r4, #12]
 80137d8:	bd10      	pop	{r4, pc}

080137da <__swrite>:
 80137da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137de:	461f      	mov	r7, r3
 80137e0:	898b      	ldrh	r3, [r1, #12]
 80137e2:	05db      	lsls	r3, r3, #23
 80137e4:	4605      	mov	r5, r0
 80137e6:	460c      	mov	r4, r1
 80137e8:	4616      	mov	r6, r2
 80137ea:	d505      	bpl.n	80137f8 <__swrite+0x1e>
 80137ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137f0:	2302      	movs	r3, #2
 80137f2:	2200      	movs	r2, #0
 80137f4:	f000 f978 	bl	8013ae8 <_lseek_r>
 80137f8:	89a3      	ldrh	r3, [r4, #12]
 80137fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013802:	81a3      	strh	r3, [r4, #12]
 8013804:	4632      	mov	r2, r6
 8013806:	463b      	mov	r3, r7
 8013808:	4628      	mov	r0, r5
 801380a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801380e:	f000 b889 	b.w	8013924 <_write_r>

08013812 <__sseek>:
 8013812:	b510      	push	{r4, lr}
 8013814:	460c      	mov	r4, r1
 8013816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801381a:	f000 f965 	bl	8013ae8 <_lseek_r>
 801381e:	1c43      	adds	r3, r0, #1
 8013820:	89a3      	ldrh	r3, [r4, #12]
 8013822:	bf15      	itete	ne
 8013824:	6560      	strne	r0, [r4, #84]	; 0x54
 8013826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801382a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801382e:	81a3      	strheq	r3, [r4, #12]
 8013830:	bf18      	it	ne
 8013832:	81a3      	strhne	r3, [r4, #12]
 8013834:	bd10      	pop	{r4, pc}

08013836 <__sclose>:
 8013836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801383a:	f000 b911 	b.w	8013a60 <_close_r>

0801383e <strncmp>:
 801383e:	b510      	push	{r4, lr}
 8013840:	b16a      	cbz	r2, 801385e <strncmp+0x20>
 8013842:	3901      	subs	r1, #1
 8013844:	1884      	adds	r4, r0, r2
 8013846:	f810 3b01 	ldrb.w	r3, [r0], #1
 801384a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801384e:	4293      	cmp	r3, r2
 8013850:	d103      	bne.n	801385a <strncmp+0x1c>
 8013852:	42a0      	cmp	r0, r4
 8013854:	d001      	beq.n	801385a <strncmp+0x1c>
 8013856:	2b00      	cmp	r3, #0
 8013858:	d1f5      	bne.n	8013846 <strncmp+0x8>
 801385a:	1a98      	subs	r0, r3, r2
 801385c:	bd10      	pop	{r4, pc}
 801385e:	4610      	mov	r0, r2
 8013860:	e7fc      	b.n	801385c <strncmp+0x1e>
	...

08013864 <__swbuf_r>:
 8013864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013866:	460e      	mov	r6, r1
 8013868:	4614      	mov	r4, r2
 801386a:	4605      	mov	r5, r0
 801386c:	b118      	cbz	r0, 8013876 <__swbuf_r+0x12>
 801386e:	6983      	ldr	r3, [r0, #24]
 8013870:	b90b      	cbnz	r3, 8013876 <__swbuf_r+0x12>
 8013872:	f7fe facb 	bl	8011e0c <__sinit>
 8013876:	4b21      	ldr	r3, [pc, #132]	; (80138fc <__swbuf_r+0x98>)
 8013878:	429c      	cmp	r4, r3
 801387a:	d12b      	bne.n	80138d4 <__swbuf_r+0x70>
 801387c:	686c      	ldr	r4, [r5, #4]
 801387e:	69a3      	ldr	r3, [r4, #24]
 8013880:	60a3      	str	r3, [r4, #8]
 8013882:	89a3      	ldrh	r3, [r4, #12]
 8013884:	071a      	lsls	r2, r3, #28
 8013886:	d52f      	bpl.n	80138e8 <__swbuf_r+0x84>
 8013888:	6923      	ldr	r3, [r4, #16]
 801388a:	b36b      	cbz	r3, 80138e8 <__swbuf_r+0x84>
 801388c:	6923      	ldr	r3, [r4, #16]
 801388e:	6820      	ldr	r0, [r4, #0]
 8013890:	1ac0      	subs	r0, r0, r3
 8013892:	6963      	ldr	r3, [r4, #20]
 8013894:	b2f6      	uxtb	r6, r6
 8013896:	4283      	cmp	r3, r0
 8013898:	4637      	mov	r7, r6
 801389a:	dc04      	bgt.n	80138a6 <__swbuf_r+0x42>
 801389c:	4621      	mov	r1, r4
 801389e:	4628      	mov	r0, r5
 80138a0:	f7fe fa20 	bl	8011ce4 <_fflush_r>
 80138a4:	bb30      	cbnz	r0, 80138f4 <__swbuf_r+0x90>
 80138a6:	68a3      	ldr	r3, [r4, #8]
 80138a8:	3b01      	subs	r3, #1
 80138aa:	60a3      	str	r3, [r4, #8]
 80138ac:	6823      	ldr	r3, [r4, #0]
 80138ae:	1c5a      	adds	r2, r3, #1
 80138b0:	6022      	str	r2, [r4, #0]
 80138b2:	701e      	strb	r6, [r3, #0]
 80138b4:	6963      	ldr	r3, [r4, #20]
 80138b6:	3001      	adds	r0, #1
 80138b8:	4283      	cmp	r3, r0
 80138ba:	d004      	beq.n	80138c6 <__swbuf_r+0x62>
 80138bc:	89a3      	ldrh	r3, [r4, #12]
 80138be:	07db      	lsls	r3, r3, #31
 80138c0:	d506      	bpl.n	80138d0 <__swbuf_r+0x6c>
 80138c2:	2e0a      	cmp	r6, #10
 80138c4:	d104      	bne.n	80138d0 <__swbuf_r+0x6c>
 80138c6:	4621      	mov	r1, r4
 80138c8:	4628      	mov	r0, r5
 80138ca:	f7fe fa0b 	bl	8011ce4 <_fflush_r>
 80138ce:	b988      	cbnz	r0, 80138f4 <__swbuf_r+0x90>
 80138d0:	4638      	mov	r0, r7
 80138d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138d4:	4b0a      	ldr	r3, [pc, #40]	; (8013900 <__swbuf_r+0x9c>)
 80138d6:	429c      	cmp	r4, r3
 80138d8:	d101      	bne.n	80138de <__swbuf_r+0x7a>
 80138da:	68ac      	ldr	r4, [r5, #8]
 80138dc:	e7cf      	b.n	801387e <__swbuf_r+0x1a>
 80138de:	4b09      	ldr	r3, [pc, #36]	; (8013904 <__swbuf_r+0xa0>)
 80138e0:	429c      	cmp	r4, r3
 80138e2:	bf08      	it	eq
 80138e4:	68ec      	ldreq	r4, [r5, #12]
 80138e6:	e7ca      	b.n	801387e <__swbuf_r+0x1a>
 80138e8:	4621      	mov	r1, r4
 80138ea:	4628      	mov	r0, r5
 80138ec:	f000 f82c 	bl	8013948 <__swsetup_r>
 80138f0:	2800      	cmp	r0, #0
 80138f2:	d0cb      	beq.n	801388c <__swbuf_r+0x28>
 80138f4:	f04f 37ff 	mov.w	r7, #4294967295
 80138f8:	e7ea      	b.n	80138d0 <__swbuf_r+0x6c>
 80138fa:	bf00      	nop
 80138fc:	08015750 	.word	0x08015750
 8013900:	08015770 	.word	0x08015770
 8013904:	08015730 	.word	0x08015730

08013908 <__ascii_wctomb>:
 8013908:	b149      	cbz	r1, 801391e <__ascii_wctomb+0x16>
 801390a:	2aff      	cmp	r2, #255	; 0xff
 801390c:	bf85      	ittet	hi
 801390e:	238a      	movhi	r3, #138	; 0x8a
 8013910:	6003      	strhi	r3, [r0, #0]
 8013912:	700a      	strbls	r2, [r1, #0]
 8013914:	f04f 30ff 	movhi.w	r0, #4294967295
 8013918:	bf98      	it	ls
 801391a:	2001      	movls	r0, #1
 801391c:	4770      	bx	lr
 801391e:	4608      	mov	r0, r1
 8013920:	4770      	bx	lr
	...

08013924 <_write_r>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4d07      	ldr	r5, [pc, #28]	; (8013944 <_write_r+0x20>)
 8013928:	4604      	mov	r4, r0
 801392a:	4608      	mov	r0, r1
 801392c:	4611      	mov	r1, r2
 801392e:	2200      	movs	r2, #0
 8013930:	602a      	str	r2, [r5, #0]
 8013932:	461a      	mov	r2, r3
 8013934:	f7ee fb56 	bl	8001fe4 <_write>
 8013938:	1c43      	adds	r3, r0, #1
 801393a:	d102      	bne.n	8013942 <_write_r+0x1e>
 801393c:	682b      	ldr	r3, [r5, #0]
 801393e:	b103      	cbz	r3, 8013942 <_write_r+0x1e>
 8013940:	6023      	str	r3, [r4, #0]
 8013942:	bd38      	pop	{r3, r4, r5, pc}
 8013944:	20005888 	.word	0x20005888

08013948 <__swsetup_r>:
 8013948:	4b32      	ldr	r3, [pc, #200]	; (8013a14 <__swsetup_r+0xcc>)
 801394a:	b570      	push	{r4, r5, r6, lr}
 801394c:	681d      	ldr	r5, [r3, #0]
 801394e:	4606      	mov	r6, r0
 8013950:	460c      	mov	r4, r1
 8013952:	b125      	cbz	r5, 801395e <__swsetup_r+0x16>
 8013954:	69ab      	ldr	r3, [r5, #24]
 8013956:	b913      	cbnz	r3, 801395e <__swsetup_r+0x16>
 8013958:	4628      	mov	r0, r5
 801395a:	f7fe fa57 	bl	8011e0c <__sinit>
 801395e:	4b2e      	ldr	r3, [pc, #184]	; (8013a18 <__swsetup_r+0xd0>)
 8013960:	429c      	cmp	r4, r3
 8013962:	d10f      	bne.n	8013984 <__swsetup_r+0x3c>
 8013964:	686c      	ldr	r4, [r5, #4]
 8013966:	89a3      	ldrh	r3, [r4, #12]
 8013968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801396c:	0719      	lsls	r1, r3, #28
 801396e:	d42c      	bmi.n	80139ca <__swsetup_r+0x82>
 8013970:	06dd      	lsls	r5, r3, #27
 8013972:	d411      	bmi.n	8013998 <__swsetup_r+0x50>
 8013974:	2309      	movs	r3, #9
 8013976:	6033      	str	r3, [r6, #0]
 8013978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801397c:	81a3      	strh	r3, [r4, #12]
 801397e:	f04f 30ff 	mov.w	r0, #4294967295
 8013982:	e03e      	b.n	8013a02 <__swsetup_r+0xba>
 8013984:	4b25      	ldr	r3, [pc, #148]	; (8013a1c <__swsetup_r+0xd4>)
 8013986:	429c      	cmp	r4, r3
 8013988:	d101      	bne.n	801398e <__swsetup_r+0x46>
 801398a:	68ac      	ldr	r4, [r5, #8]
 801398c:	e7eb      	b.n	8013966 <__swsetup_r+0x1e>
 801398e:	4b24      	ldr	r3, [pc, #144]	; (8013a20 <__swsetup_r+0xd8>)
 8013990:	429c      	cmp	r4, r3
 8013992:	bf08      	it	eq
 8013994:	68ec      	ldreq	r4, [r5, #12]
 8013996:	e7e6      	b.n	8013966 <__swsetup_r+0x1e>
 8013998:	0758      	lsls	r0, r3, #29
 801399a:	d512      	bpl.n	80139c2 <__swsetup_r+0x7a>
 801399c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801399e:	b141      	cbz	r1, 80139b2 <__swsetup_r+0x6a>
 80139a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139a4:	4299      	cmp	r1, r3
 80139a6:	d002      	beq.n	80139ae <__swsetup_r+0x66>
 80139a8:	4630      	mov	r0, r6
 80139aa:	f7ff fb8b 	bl	80130c4 <_free_r>
 80139ae:	2300      	movs	r3, #0
 80139b0:	6363      	str	r3, [r4, #52]	; 0x34
 80139b2:	89a3      	ldrh	r3, [r4, #12]
 80139b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80139b8:	81a3      	strh	r3, [r4, #12]
 80139ba:	2300      	movs	r3, #0
 80139bc:	6063      	str	r3, [r4, #4]
 80139be:	6923      	ldr	r3, [r4, #16]
 80139c0:	6023      	str	r3, [r4, #0]
 80139c2:	89a3      	ldrh	r3, [r4, #12]
 80139c4:	f043 0308 	orr.w	r3, r3, #8
 80139c8:	81a3      	strh	r3, [r4, #12]
 80139ca:	6923      	ldr	r3, [r4, #16]
 80139cc:	b94b      	cbnz	r3, 80139e2 <__swsetup_r+0x9a>
 80139ce:	89a3      	ldrh	r3, [r4, #12]
 80139d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139d8:	d003      	beq.n	80139e2 <__swsetup_r+0x9a>
 80139da:	4621      	mov	r1, r4
 80139dc:	4630      	mov	r0, r6
 80139de:	f7fe fe4d 	bl	801267c <__smakebuf_r>
 80139e2:	89a0      	ldrh	r0, [r4, #12]
 80139e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80139e8:	f010 0301 	ands.w	r3, r0, #1
 80139ec:	d00a      	beq.n	8013a04 <__swsetup_r+0xbc>
 80139ee:	2300      	movs	r3, #0
 80139f0:	60a3      	str	r3, [r4, #8]
 80139f2:	6963      	ldr	r3, [r4, #20]
 80139f4:	425b      	negs	r3, r3
 80139f6:	61a3      	str	r3, [r4, #24]
 80139f8:	6923      	ldr	r3, [r4, #16]
 80139fa:	b943      	cbnz	r3, 8013a0e <__swsetup_r+0xc6>
 80139fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013a00:	d1ba      	bne.n	8013978 <__swsetup_r+0x30>
 8013a02:	bd70      	pop	{r4, r5, r6, pc}
 8013a04:	0781      	lsls	r1, r0, #30
 8013a06:	bf58      	it	pl
 8013a08:	6963      	ldrpl	r3, [r4, #20]
 8013a0a:	60a3      	str	r3, [r4, #8]
 8013a0c:	e7f4      	b.n	80139f8 <__swsetup_r+0xb0>
 8013a0e:	2000      	movs	r0, #0
 8013a10:	e7f7      	b.n	8013a02 <__swsetup_r+0xba>
 8013a12:	bf00      	nop
 8013a14:	20000198 	.word	0x20000198
 8013a18:	08015750 	.word	0x08015750
 8013a1c:	08015770 	.word	0x08015770
 8013a20:	08015730 	.word	0x08015730

08013a24 <__assert_func>:
 8013a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a26:	4614      	mov	r4, r2
 8013a28:	461a      	mov	r2, r3
 8013a2a:	4b09      	ldr	r3, [pc, #36]	; (8013a50 <__assert_func+0x2c>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	4605      	mov	r5, r0
 8013a30:	68d8      	ldr	r0, [r3, #12]
 8013a32:	b14c      	cbz	r4, 8013a48 <__assert_func+0x24>
 8013a34:	4b07      	ldr	r3, [pc, #28]	; (8013a54 <__assert_func+0x30>)
 8013a36:	9100      	str	r1, [sp, #0]
 8013a38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a3c:	4906      	ldr	r1, [pc, #24]	; (8013a58 <__assert_func+0x34>)
 8013a3e:	462b      	mov	r3, r5
 8013a40:	f000 f81e 	bl	8013a80 <fiprintf>
 8013a44:	f000 f8c0 	bl	8013bc8 <abort>
 8013a48:	4b04      	ldr	r3, [pc, #16]	; (8013a5c <__assert_func+0x38>)
 8013a4a:	461c      	mov	r4, r3
 8013a4c:	e7f3      	b.n	8013a36 <__assert_func+0x12>
 8013a4e:	bf00      	nop
 8013a50:	20000198 	.word	0x20000198
 8013a54:	0801597d 	.word	0x0801597d
 8013a58:	0801598a 	.word	0x0801598a
 8013a5c:	080159b8 	.word	0x080159b8

08013a60 <_close_r>:
 8013a60:	b538      	push	{r3, r4, r5, lr}
 8013a62:	4d06      	ldr	r5, [pc, #24]	; (8013a7c <_close_r+0x1c>)
 8013a64:	2300      	movs	r3, #0
 8013a66:	4604      	mov	r4, r0
 8013a68:	4608      	mov	r0, r1
 8013a6a:	602b      	str	r3, [r5, #0]
 8013a6c:	f7ee fae6 	bl	800203c <_close>
 8013a70:	1c43      	adds	r3, r0, #1
 8013a72:	d102      	bne.n	8013a7a <_close_r+0x1a>
 8013a74:	682b      	ldr	r3, [r5, #0]
 8013a76:	b103      	cbz	r3, 8013a7a <_close_r+0x1a>
 8013a78:	6023      	str	r3, [r4, #0]
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}
 8013a7c:	20005888 	.word	0x20005888

08013a80 <fiprintf>:
 8013a80:	b40e      	push	{r1, r2, r3}
 8013a82:	b503      	push	{r0, r1, lr}
 8013a84:	4601      	mov	r1, r0
 8013a86:	ab03      	add	r3, sp, #12
 8013a88:	4805      	ldr	r0, [pc, #20]	; (8013aa0 <fiprintf+0x20>)
 8013a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a8e:	6800      	ldr	r0, [r0, #0]
 8013a90:	9301      	str	r3, [sp, #4]
 8013a92:	f7ff fd47 	bl	8013524 <_vfiprintf_r>
 8013a96:	b002      	add	sp, #8
 8013a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a9c:	b003      	add	sp, #12
 8013a9e:	4770      	bx	lr
 8013aa0:	20000198 	.word	0x20000198

08013aa4 <_fstat_r>:
 8013aa4:	b538      	push	{r3, r4, r5, lr}
 8013aa6:	4d07      	ldr	r5, [pc, #28]	; (8013ac4 <_fstat_r+0x20>)
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	4604      	mov	r4, r0
 8013aac:	4608      	mov	r0, r1
 8013aae:	4611      	mov	r1, r2
 8013ab0:	602b      	str	r3, [r5, #0]
 8013ab2:	f7ee fb13 	bl	80020dc <_fstat>
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	d102      	bne.n	8013ac0 <_fstat_r+0x1c>
 8013aba:	682b      	ldr	r3, [r5, #0]
 8013abc:	b103      	cbz	r3, 8013ac0 <_fstat_r+0x1c>
 8013abe:	6023      	str	r3, [r4, #0]
 8013ac0:	bd38      	pop	{r3, r4, r5, pc}
 8013ac2:	bf00      	nop
 8013ac4:	20005888 	.word	0x20005888

08013ac8 <_isatty_r>:
 8013ac8:	b538      	push	{r3, r4, r5, lr}
 8013aca:	4d06      	ldr	r5, [pc, #24]	; (8013ae4 <_isatty_r+0x1c>)
 8013acc:	2300      	movs	r3, #0
 8013ace:	4604      	mov	r4, r0
 8013ad0:	4608      	mov	r0, r1
 8013ad2:	602b      	str	r3, [r5, #0]
 8013ad4:	f7ee fa70 	bl	8001fb8 <_isatty>
 8013ad8:	1c43      	adds	r3, r0, #1
 8013ada:	d102      	bne.n	8013ae2 <_isatty_r+0x1a>
 8013adc:	682b      	ldr	r3, [r5, #0]
 8013ade:	b103      	cbz	r3, 8013ae2 <_isatty_r+0x1a>
 8013ae0:	6023      	str	r3, [r4, #0]
 8013ae2:	bd38      	pop	{r3, r4, r5, pc}
 8013ae4:	20005888 	.word	0x20005888

08013ae8 <_lseek_r>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4d07      	ldr	r5, [pc, #28]	; (8013b08 <_lseek_r+0x20>)
 8013aec:	4604      	mov	r4, r0
 8013aee:	4608      	mov	r0, r1
 8013af0:	4611      	mov	r1, r2
 8013af2:	2200      	movs	r2, #0
 8013af4:	602a      	str	r2, [r5, #0]
 8013af6:	461a      	mov	r2, r3
 8013af8:	f7ee fab7 	bl	800206a <_lseek>
 8013afc:	1c43      	adds	r3, r0, #1
 8013afe:	d102      	bne.n	8013b06 <_lseek_r+0x1e>
 8013b00:	682b      	ldr	r3, [r5, #0]
 8013b02:	b103      	cbz	r3, 8013b06 <_lseek_r+0x1e>
 8013b04:	6023      	str	r3, [r4, #0]
 8013b06:	bd38      	pop	{r3, r4, r5, pc}
 8013b08:	20005888 	.word	0x20005888

08013b0c <memmove>:
 8013b0c:	4288      	cmp	r0, r1
 8013b0e:	b510      	push	{r4, lr}
 8013b10:	eb01 0402 	add.w	r4, r1, r2
 8013b14:	d902      	bls.n	8013b1c <memmove+0x10>
 8013b16:	4284      	cmp	r4, r0
 8013b18:	4623      	mov	r3, r4
 8013b1a:	d807      	bhi.n	8013b2c <memmove+0x20>
 8013b1c:	1e43      	subs	r3, r0, #1
 8013b1e:	42a1      	cmp	r1, r4
 8013b20:	d008      	beq.n	8013b34 <memmove+0x28>
 8013b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b2a:	e7f8      	b.n	8013b1e <memmove+0x12>
 8013b2c:	4402      	add	r2, r0
 8013b2e:	4601      	mov	r1, r0
 8013b30:	428a      	cmp	r2, r1
 8013b32:	d100      	bne.n	8013b36 <memmove+0x2a>
 8013b34:	bd10      	pop	{r4, pc}
 8013b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b3e:	e7f7      	b.n	8013b30 <memmove+0x24>

08013b40 <__malloc_lock>:
 8013b40:	4801      	ldr	r0, [pc, #4]	; (8013b48 <__malloc_lock+0x8>)
 8013b42:	f7fe bd74 	b.w	801262e <__retarget_lock_acquire_recursive>
 8013b46:	bf00      	nop
 8013b48:	20005880 	.word	0x20005880

08013b4c <__malloc_unlock>:
 8013b4c:	4801      	ldr	r0, [pc, #4]	; (8013b54 <__malloc_unlock+0x8>)
 8013b4e:	f7fe bd6f 	b.w	8012630 <__retarget_lock_release_recursive>
 8013b52:	bf00      	nop
 8013b54:	20005880 	.word	0x20005880

08013b58 <_realloc_r>:
 8013b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5a:	4607      	mov	r7, r0
 8013b5c:	4614      	mov	r4, r2
 8013b5e:	460e      	mov	r6, r1
 8013b60:	b921      	cbnz	r1, 8013b6c <_realloc_r+0x14>
 8013b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013b66:	4611      	mov	r1, r2
 8013b68:	f7ff bafc 	b.w	8013164 <_malloc_r>
 8013b6c:	b922      	cbnz	r2, 8013b78 <_realloc_r+0x20>
 8013b6e:	f7ff faa9 	bl	80130c4 <_free_r>
 8013b72:	4625      	mov	r5, r4
 8013b74:	4628      	mov	r0, r5
 8013b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b78:	f000 f82d 	bl	8013bd6 <_malloc_usable_size_r>
 8013b7c:	42a0      	cmp	r0, r4
 8013b7e:	d20f      	bcs.n	8013ba0 <_realloc_r+0x48>
 8013b80:	4621      	mov	r1, r4
 8013b82:	4638      	mov	r0, r7
 8013b84:	f7ff faee 	bl	8013164 <_malloc_r>
 8013b88:	4605      	mov	r5, r0
 8013b8a:	2800      	cmp	r0, #0
 8013b8c:	d0f2      	beq.n	8013b74 <_realloc_r+0x1c>
 8013b8e:	4631      	mov	r1, r6
 8013b90:	4622      	mov	r2, r4
 8013b92:	f7fb fb61 	bl	800f258 <memcpy>
 8013b96:	4631      	mov	r1, r6
 8013b98:	4638      	mov	r0, r7
 8013b9a:	f7ff fa93 	bl	80130c4 <_free_r>
 8013b9e:	e7e9      	b.n	8013b74 <_realloc_r+0x1c>
 8013ba0:	4635      	mov	r5, r6
 8013ba2:	e7e7      	b.n	8013b74 <_realloc_r+0x1c>

08013ba4 <_read_r>:
 8013ba4:	b538      	push	{r3, r4, r5, lr}
 8013ba6:	4d07      	ldr	r5, [pc, #28]	; (8013bc4 <_read_r+0x20>)
 8013ba8:	4604      	mov	r4, r0
 8013baa:	4608      	mov	r0, r1
 8013bac:	4611      	mov	r1, r2
 8013bae:	2200      	movs	r2, #0
 8013bb0:	602a      	str	r2, [r5, #0]
 8013bb2:	461a      	mov	r2, r3
 8013bb4:	f7ee fa6a 	bl	800208c <_read>
 8013bb8:	1c43      	adds	r3, r0, #1
 8013bba:	d102      	bne.n	8013bc2 <_read_r+0x1e>
 8013bbc:	682b      	ldr	r3, [r5, #0]
 8013bbe:	b103      	cbz	r3, 8013bc2 <_read_r+0x1e>
 8013bc0:	6023      	str	r3, [r4, #0]
 8013bc2:	bd38      	pop	{r3, r4, r5, pc}
 8013bc4:	20005888 	.word	0x20005888

08013bc8 <abort>:
 8013bc8:	b508      	push	{r3, lr}
 8013bca:	2006      	movs	r0, #6
 8013bcc:	f000 f834 	bl	8013c38 <raise>
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	f001 fbcb 	bl	801536c <_exit>

08013bd6 <_malloc_usable_size_r>:
 8013bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bda:	1f18      	subs	r0, r3, #4
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	bfbc      	itt	lt
 8013be0:	580b      	ldrlt	r3, [r1, r0]
 8013be2:	18c0      	addlt	r0, r0, r3
 8013be4:	4770      	bx	lr

08013be6 <_raise_r>:
 8013be6:	291f      	cmp	r1, #31
 8013be8:	b538      	push	{r3, r4, r5, lr}
 8013bea:	4604      	mov	r4, r0
 8013bec:	460d      	mov	r5, r1
 8013bee:	d904      	bls.n	8013bfa <_raise_r+0x14>
 8013bf0:	2316      	movs	r3, #22
 8013bf2:	6003      	str	r3, [r0, #0]
 8013bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf8:	bd38      	pop	{r3, r4, r5, pc}
 8013bfa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013bfc:	b112      	cbz	r2, 8013c04 <_raise_r+0x1e>
 8013bfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c02:	b94b      	cbnz	r3, 8013c18 <_raise_r+0x32>
 8013c04:	4620      	mov	r0, r4
 8013c06:	f000 f831 	bl	8013c6c <_getpid_r>
 8013c0a:	462a      	mov	r2, r5
 8013c0c:	4601      	mov	r1, r0
 8013c0e:	4620      	mov	r0, r4
 8013c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c14:	f000 b818 	b.w	8013c48 <_kill_r>
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d00a      	beq.n	8013c32 <_raise_r+0x4c>
 8013c1c:	1c59      	adds	r1, r3, #1
 8013c1e:	d103      	bne.n	8013c28 <_raise_r+0x42>
 8013c20:	2316      	movs	r3, #22
 8013c22:	6003      	str	r3, [r0, #0]
 8013c24:	2001      	movs	r0, #1
 8013c26:	e7e7      	b.n	8013bf8 <_raise_r+0x12>
 8013c28:	2400      	movs	r4, #0
 8013c2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c2e:	4628      	mov	r0, r5
 8013c30:	4798      	blx	r3
 8013c32:	2000      	movs	r0, #0
 8013c34:	e7e0      	b.n	8013bf8 <_raise_r+0x12>
	...

08013c38 <raise>:
 8013c38:	4b02      	ldr	r3, [pc, #8]	; (8013c44 <raise+0xc>)
 8013c3a:	4601      	mov	r1, r0
 8013c3c:	6818      	ldr	r0, [r3, #0]
 8013c3e:	f7ff bfd2 	b.w	8013be6 <_raise_r>
 8013c42:	bf00      	nop
 8013c44:	20000198 	.word	0x20000198

08013c48 <_kill_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4d07      	ldr	r5, [pc, #28]	; (8013c68 <_kill_r+0x20>)
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	4604      	mov	r4, r0
 8013c50:	4608      	mov	r0, r1
 8013c52:	4611      	mov	r1, r2
 8013c54:	602b      	str	r3, [r5, #0]
 8013c56:	f001 fb81 	bl	801535c <_kill>
 8013c5a:	1c43      	adds	r3, r0, #1
 8013c5c:	d102      	bne.n	8013c64 <_kill_r+0x1c>
 8013c5e:	682b      	ldr	r3, [r5, #0]
 8013c60:	b103      	cbz	r3, 8013c64 <_kill_r+0x1c>
 8013c62:	6023      	str	r3, [r4, #0]
 8013c64:	bd38      	pop	{r3, r4, r5, pc}
 8013c66:	bf00      	nop
 8013c68:	20005888 	.word	0x20005888

08013c6c <_getpid_r>:
 8013c6c:	f001 bb6e 	b.w	801534c <_getpid>

08013c70 <sin>:
 8013c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c72:	ec53 2b10 	vmov	r2, r3, d0
 8013c76:	4826      	ldr	r0, [pc, #152]	; (8013d10 <sin+0xa0>)
 8013c78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013c7c:	4281      	cmp	r1, r0
 8013c7e:	dc07      	bgt.n	8013c90 <sin+0x20>
 8013c80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8013d08 <sin+0x98>
 8013c84:	2000      	movs	r0, #0
 8013c86:	f001 f993 	bl	8014fb0 <__kernel_sin>
 8013c8a:	ec51 0b10 	vmov	r0, r1, d0
 8013c8e:	e007      	b.n	8013ca0 <sin+0x30>
 8013c90:	4820      	ldr	r0, [pc, #128]	; (8013d14 <sin+0xa4>)
 8013c92:	4281      	cmp	r1, r0
 8013c94:	dd09      	ble.n	8013caa <sin+0x3a>
 8013c96:	ee10 0a10 	vmov	r0, s0
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	f7ec fb04 	bl	80002a8 <__aeabi_dsub>
 8013ca0:	ec41 0b10 	vmov	d0, r0, r1
 8013ca4:	b005      	add	sp, #20
 8013ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013caa:	4668      	mov	r0, sp
 8013cac:	f000 fab8 	bl	8014220 <__ieee754_rem_pio2>
 8013cb0:	f000 0003 	and.w	r0, r0, #3
 8013cb4:	2801      	cmp	r0, #1
 8013cb6:	d008      	beq.n	8013cca <sin+0x5a>
 8013cb8:	2802      	cmp	r0, #2
 8013cba:	d00d      	beq.n	8013cd8 <sin+0x68>
 8013cbc:	b9d0      	cbnz	r0, 8013cf4 <sin+0x84>
 8013cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013cc2:	ed9d 0b00 	vldr	d0, [sp]
 8013cc6:	2001      	movs	r0, #1
 8013cc8:	e7dd      	b.n	8013c86 <sin+0x16>
 8013cca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013cce:	ed9d 0b00 	vldr	d0, [sp]
 8013cd2:	f000 fd65 	bl	80147a0 <__kernel_cos>
 8013cd6:	e7d8      	b.n	8013c8a <sin+0x1a>
 8013cd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013cdc:	ed9d 0b00 	vldr	d0, [sp]
 8013ce0:	2001      	movs	r0, #1
 8013ce2:	f001 f965 	bl	8014fb0 <__kernel_sin>
 8013ce6:	ec53 2b10 	vmov	r2, r3, d0
 8013cea:	ee10 0a10 	vmov	r0, s0
 8013cee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013cf2:	e7d5      	b.n	8013ca0 <sin+0x30>
 8013cf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013cf8:	ed9d 0b00 	vldr	d0, [sp]
 8013cfc:	f000 fd50 	bl	80147a0 <__kernel_cos>
 8013d00:	e7f1      	b.n	8013ce6 <sin+0x76>
 8013d02:	bf00      	nop
 8013d04:	f3af 8000 	nop.w
	...
 8013d10:	3fe921fb 	.word	0x3fe921fb
 8013d14:	7fefffff 	.word	0x7fefffff

08013d18 <asin>:
 8013d18:	b538      	push	{r3, r4, r5, lr}
 8013d1a:	ed2d 8b02 	vpush	{d8}
 8013d1e:	ec55 4b10 	vmov	r4, r5, d0
 8013d22:	f000 f869 	bl	8013df8 <__ieee754_asin>
 8013d26:	4b16      	ldr	r3, [pc, #88]	; (8013d80 <asin+0x68>)
 8013d28:	eeb0 8a40 	vmov.f32	s16, s0
 8013d2c:	eef0 8a60 	vmov.f32	s17, s1
 8013d30:	f993 3000 	ldrsb.w	r3, [r3]
 8013d34:	3301      	adds	r3, #1
 8013d36:	d01c      	beq.n	8013d72 <asin+0x5a>
 8013d38:	4622      	mov	r2, r4
 8013d3a:	462b      	mov	r3, r5
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	4629      	mov	r1, r5
 8013d40:	f7ec ff04 	bl	8000b4c <__aeabi_dcmpun>
 8013d44:	b9a8      	cbnz	r0, 8013d72 <asin+0x5a>
 8013d46:	ec45 4b10 	vmov	d0, r4, r5
 8013d4a:	f001 f9ef 	bl	801512c <fabs>
 8013d4e:	4b0d      	ldr	r3, [pc, #52]	; (8013d84 <asin+0x6c>)
 8013d50:	ec51 0b10 	vmov	r0, r1, d0
 8013d54:	2200      	movs	r2, #0
 8013d56:	f7ec feef 	bl	8000b38 <__aeabi_dcmpgt>
 8013d5a:	b150      	cbz	r0, 8013d72 <asin+0x5a>
 8013d5c:	f7fb fa52 	bl	800f204 <__errno>
 8013d60:	ecbd 8b02 	vpop	{d8}
 8013d64:	2321      	movs	r3, #33	; 0x21
 8013d66:	6003      	str	r3, [r0, #0]
 8013d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d6c:	4806      	ldr	r0, [pc, #24]	; (8013d88 <asin+0x70>)
 8013d6e:	f7ff bd0b 	b.w	8013788 <nan>
 8013d72:	eeb0 0a48 	vmov.f32	s0, s16
 8013d76:	eef0 0a68 	vmov.f32	s1, s17
 8013d7a:	ecbd 8b02 	vpop	{d8}
 8013d7e:	bd38      	pop	{r3, r4, r5, pc}
 8013d80:	2000036c 	.word	0x2000036c
 8013d84:	3ff00000 	.word	0x3ff00000
 8013d88:	080159b8 	.word	0x080159b8

08013d8c <sqrt>:
 8013d8c:	b538      	push	{r3, r4, r5, lr}
 8013d8e:	ed2d 8b02 	vpush	{d8}
 8013d92:	ec55 4b10 	vmov	r4, r5, d0
 8013d96:	f000 fc4d 	bl	8014634 <__ieee754_sqrt>
 8013d9a:	4b15      	ldr	r3, [pc, #84]	; (8013df0 <sqrt+0x64>)
 8013d9c:	eeb0 8a40 	vmov.f32	s16, s0
 8013da0:	eef0 8a60 	vmov.f32	s17, s1
 8013da4:	f993 3000 	ldrsb.w	r3, [r3]
 8013da8:	3301      	adds	r3, #1
 8013daa:	d019      	beq.n	8013de0 <sqrt+0x54>
 8013dac:	4622      	mov	r2, r4
 8013dae:	462b      	mov	r3, r5
 8013db0:	4620      	mov	r0, r4
 8013db2:	4629      	mov	r1, r5
 8013db4:	f7ec feca 	bl	8000b4c <__aeabi_dcmpun>
 8013db8:	b990      	cbnz	r0, 8013de0 <sqrt+0x54>
 8013dba:	2200      	movs	r2, #0
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	4629      	mov	r1, r5
 8013dc2:	f7ec fe9b 	bl	8000afc <__aeabi_dcmplt>
 8013dc6:	b158      	cbz	r0, 8013de0 <sqrt+0x54>
 8013dc8:	f7fb fa1c 	bl	800f204 <__errno>
 8013dcc:	2321      	movs	r3, #33	; 0x21
 8013dce:	6003      	str	r3, [r0, #0]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	4610      	mov	r0, r2
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	f7ec fd48 	bl	800086c <__aeabi_ddiv>
 8013ddc:	ec41 0b18 	vmov	d8, r0, r1
 8013de0:	eeb0 0a48 	vmov.f32	s0, s16
 8013de4:	eef0 0a68 	vmov.f32	s1, s17
 8013de8:	ecbd 8b02 	vpop	{d8}
 8013dec:	bd38      	pop	{r3, r4, r5, pc}
 8013dee:	bf00      	nop
 8013df0:	2000036c 	.word	0x2000036c
 8013df4:	00000000 	.word	0x00000000

08013df8 <__ieee754_asin>:
 8013df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfc:	ed2d 8b04 	vpush	{d8-d9}
 8013e00:	ec55 4b10 	vmov	r4, r5, d0
 8013e04:	4bcc      	ldr	r3, [pc, #816]	; (8014138 <__ieee754_asin+0x340>)
 8013e06:	b083      	sub	sp, #12
 8013e08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8013e0c:	4598      	cmp	r8, r3
 8013e0e:	9501      	str	r5, [sp, #4]
 8013e10:	dd35      	ble.n	8013e7e <__ieee754_asin+0x86>
 8013e12:	ee10 3a10 	vmov	r3, s0
 8013e16:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8013e1a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8013e1e:	ea58 0303 	orrs.w	r3, r8, r3
 8013e22:	d117      	bne.n	8013e54 <__ieee754_asin+0x5c>
 8013e24:	a3aa      	add	r3, pc, #680	; (adr r3, 80140d0 <__ieee754_asin+0x2d8>)
 8013e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2a:	ee10 0a10 	vmov	r0, s0
 8013e2e:	4629      	mov	r1, r5
 8013e30:	f7ec fbf2 	bl	8000618 <__aeabi_dmul>
 8013e34:	a3a8      	add	r3, pc, #672	; (adr r3, 80140d8 <__ieee754_asin+0x2e0>)
 8013e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3a:	4606      	mov	r6, r0
 8013e3c:	460f      	mov	r7, r1
 8013e3e:	4620      	mov	r0, r4
 8013e40:	4629      	mov	r1, r5
 8013e42:	f7ec fbe9 	bl	8000618 <__aeabi_dmul>
 8013e46:	4602      	mov	r2, r0
 8013e48:	460b      	mov	r3, r1
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	4639      	mov	r1, r7
 8013e4e:	f7ec fa2d 	bl	80002ac <__adddf3>
 8013e52:	e00b      	b.n	8013e6c <__ieee754_asin+0x74>
 8013e54:	ee10 2a10 	vmov	r2, s0
 8013e58:	462b      	mov	r3, r5
 8013e5a:	ee10 0a10 	vmov	r0, s0
 8013e5e:	4629      	mov	r1, r5
 8013e60:	f7ec fa22 	bl	80002a8 <__aeabi_dsub>
 8013e64:	4602      	mov	r2, r0
 8013e66:	460b      	mov	r3, r1
 8013e68:	f7ec fd00 	bl	800086c <__aeabi_ddiv>
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	460d      	mov	r5, r1
 8013e70:	ec45 4b10 	vmov	d0, r4, r5
 8013e74:	b003      	add	sp, #12
 8013e76:	ecbd 8b04 	vpop	{d8-d9}
 8013e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e7e:	4baf      	ldr	r3, [pc, #700]	; (801413c <__ieee754_asin+0x344>)
 8013e80:	4598      	cmp	r8, r3
 8013e82:	dc11      	bgt.n	8013ea8 <__ieee754_asin+0xb0>
 8013e84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013e88:	f280 80ae 	bge.w	8013fe8 <__ieee754_asin+0x1f0>
 8013e8c:	a394      	add	r3, pc, #592	; (adr r3, 80140e0 <__ieee754_asin+0x2e8>)
 8013e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e92:	ee10 0a10 	vmov	r0, s0
 8013e96:	4629      	mov	r1, r5
 8013e98:	f7ec fa08 	bl	80002ac <__adddf3>
 8013e9c:	4ba8      	ldr	r3, [pc, #672]	; (8014140 <__ieee754_asin+0x348>)
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f7ec fe4a 	bl	8000b38 <__aeabi_dcmpgt>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d1e3      	bne.n	8013e70 <__ieee754_asin+0x78>
 8013ea8:	ec45 4b10 	vmov	d0, r4, r5
 8013eac:	f001 f93e 	bl	801512c <fabs>
 8013eb0:	49a3      	ldr	r1, [pc, #652]	; (8014140 <__ieee754_asin+0x348>)
 8013eb2:	ec53 2b10 	vmov	r2, r3, d0
 8013eb6:	2000      	movs	r0, #0
 8013eb8:	f7ec f9f6 	bl	80002a8 <__aeabi_dsub>
 8013ebc:	4ba1      	ldr	r3, [pc, #644]	; (8014144 <__ieee754_asin+0x34c>)
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	f7ec fbaa 	bl	8000618 <__aeabi_dmul>
 8013ec4:	a388      	add	r3, pc, #544	; (adr r3, 80140e8 <__ieee754_asin+0x2f0>)
 8013ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eca:	4604      	mov	r4, r0
 8013ecc:	460d      	mov	r5, r1
 8013ece:	f7ec fba3 	bl	8000618 <__aeabi_dmul>
 8013ed2:	a387      	add	r3, pc, #540	; (adr r3, 80140f0 <__ieee754_asin+0x2f8>)
 8013ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed8:	f7ec f9e8 	bl	80002ac <__adddf3>
 8013edc:	4622      	mov	r2, r4
 8013ede:	462b      	mov	r3, r5
 8013ee0:	f7ec fb9a 	bl	8000618 <__aeabi_dmul>
 8013ee4:	a384      	add	r3, pc, #528	; (adr r3, 80140f8 <__ieee754_asin+0x300>)
 8013ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eea:	f7ec f9dd 	bl	80002a8 <__aeabi_dsub>
 8013eee:	4622      	mov	r2, r4
 8013ef0:	462b      	mov	r3, r5
 8013ef2:	f7ec fb91 	bl	8000618 <__aeabi_dmul>
 8013ef6:	a382      	add	r3, pc, #520	; (adr r3, 8014100 <__ieee754_asin+0x308>)
 8013ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efc:	f7ec f9d6 	bl	80002ac <__adddf3>
 8013f00:	4622      	mov	r2, r4
 8013f02:	462b      	mov	r3, r5
 8013f04:	f7ec fb88 	bl	8000618 <__aeabi_dmul>
 8013f08:	a37f      	add	r3, pc, #508	; (adr r3, 8014108 <__ieee754_asin+0x310>)
 8013f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0e:	f7ec f9cb 	bl	80002a8 <__aeabi_dsub>
 8013f12:	4622      	mov	r2, r4
 8013f14:	462b      	mov	r3, r5
 8013f16:	f7ec fb7f 	bl	8000618 <__aeabi_dmul>
 8013f1a:	a37d      	add	r3, pc, #500	; (adr r3, 8014110 <__ieee754_asin+0x318>)
 8013f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f20:	f7ec f9c4 	bl	80002ac <__adddf3>
 8013f24:	4622      	mov	r2, r4
 8013f26:	462b      	mov	r3, r5
 8013f28:	f7ec fb76 	bl	8000618 <__aeabi_dmul>
 8013f2c:	a37a      	add	r3, pc, #488	; (adr r3, 8014118 <__ieee754_asin+0x320>)
 8013f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f32:	ec41 0b18 	vmov	d8, r0, r1
 8013f36:	4620      	mov	r0, r4
 8013f38:	4629      	mov	r1, r5
 8013f3a:	f7ec fb6d 	bl	8000618 <__aeabi_dmul>
 8013f3e:	a378      	add	r3, pc, #480	; (adr r3, 8014120 <__ieee754_asin+0x328>)
 8013f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f44:	f7ec f9b0 	bl	80002a8 <__aeabi_dsub>
 8013f48:	4622      	mov	r2, r4
 8013f4a:	462b      	mov	r3, r5
 8013f4c:	f7ec fb64 	bl	8000618 <__aeabi_dmul>
 8013f50:	a375      	add	r3, pc, #468	; (adr r3, 8014128 <__ieee754_asin+0x330>)
 8013f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f56:	f7ec f9a9 	bl	80002ac <__adddf3>
 8013f5a:	4622      	mov	r2, r4
 8013f5c:	462b      	mov	r3, r5
 8013f5e:	f7ec fb5b 	bl	8000618 <__aeabi_dmul>
 8013f62:	a373      	add	r3, pc, #460	; (adr r3, 8014130 <__ieee754_asin+0x338>)
 8013f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f68:	f7ec f99e 	bl	80002a8 <__aeabi_dsub>
 8013f6c:	4622      	mov	r2, r4
 8013f6e:	462b      	mov	r3, r5
 8013f70:	f7ec fb52 	bl	8000618 <__aeabi_dmul>
 8013f74:	4b72      	ldr	r3, [pc, #456]	; (8014140 <__ieee754_asin+0x348>)
 8013f76:	2200      	movs	r2, #0
 8013f78:	f7ec f998 	bl	80002ac <__adddf3>
 8013f7c:	ec45 4b10 	vmov	d0, r4, r5
 8013f80:	4606      	mov	r6, r0
 8013f82:	460f      	mov	r7, r1
 8013f84:	f000 fb56 	bl	8014634 <__ieee754_sqrt>
 8013f88:	4b6f      	ldr	r3, [pc, #444]	; (8014148 <__ieee754_asin+0x350>)
 8013f8a:	4598      	cmp	r8, r3
 8013f8c:	ec5b ab10 	vmov	sl, fp, d0
 8013f90:	f340 80dc 	ble.w	801414c <__ieee754_asin+0x354>
 8013f94:	4632      	mov	r2, r6
 8013f96:	463b      	mov	r3, r7
 8013f98:	ec51 0b18 	vmov	r0, r1, d8
 8013f9c:	f7ec fc66 	bl	800086c <__aeabi_ddiv>
 8013fa0:	4652      	mov	r2, sl
 8013fa2:	465b      	mov	r3, fp
 8013fa4:	f7ec fb38 	bl	8000618 <__aeabi_dmul>
 8013fa8:	4652      	mov	r2, sl
 8013faa:	465b      	mov	r3, fp
 8013fac:	f7ec f97e 	bl	80002ac <__adddf3>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	460b      	mov	r3, r1
 8013fb4:	f7ec f97a 	bl	80002ac <__adddf3>
 8013fb8:	a347      	add	r3, pc, #284	; (adr r3, 80140d8 <__ieee754_asin+0x2e0>)
 8013fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fbe:	f7ec f973 	bl	80002a8 <__aeabi_dsub>
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	a142      	add	r1, pc, #264	; (adr r1, 80140d0 <__ieee754_asin+0x2d8>)
 8013fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fcc:	f7ec f96c 	bl	80002a8 <__aeabi_dsub>
 8013fd0:	9b01      	ldr	r3, [sp, #4]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	bfdc      	itt	le
 8013fd6:	4602      	movle	r2, r0
 8013fd8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8013fdc:	4604      	mov	r4, r0
 8013fde:	460d      	mov	r5, r1
 8013fe0:	bfdc      	itt	le
 8013fe2:	4614      	movle	r4, r2
 8013fe4:	461d      	movle	r5, r3
 8013fe6:	e743      	b.n	8013e70 <__ieee754_asin+0x78>
 8013fe8:	ee10 2a10 	vmov	r2, s0
 8013fec:	ee10 0a10 	vmov	r0, s0
 8013ff0:	462b      	mov	r3, r5
 8013ff2:	4629      	mov	r1, r5
 8013ff4:	f7ec fb10 	bl	8000618 <__aeabi_dmul>
 8013ff8:	a33b      	add	r3, pc, #236	; (adr r3, 80140e8 <__ieee754_asin+0x2f0>)
 8013ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ffe:	4606      	mov	r6, r0
 8014000:	460f      	mov	r7, r1
 8014002:	f7ec fb09 	bl	8000618 <__aeabi_dmul>
 8014006:	a33a      	add	r3, pc, #232	; (adr r3, 80140f0 <__ieee754_asin+0x2f8>)
 8014008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801400c:	f7ec f94e 	bl	80002ac <__adddf3>
 8014010:	4632      	mov	r2, r6
 8014012:	463b      	mov	r3, r7
 8014014:	f7ec fb00 	bl	8000618 <__aeabi_dmul>
 8014018:	a337      	add	r3, pc, #220	; (adr r3, 80140f8 <__ieee754_asin+0x300>)
 801401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801401e:	f7ec f943 	bl	80002a8 <__aeabi_dsub>
 8014022:	4632      	mov	r2, r6
 8014024:	463b      	mov	r3, r7
 8014026:	f7ec faf7 	bl	8000618 <__aeabi_dmul>
 801402a:	a335      	add	r3, pc, #212	; (adr r3, 8014100 <__ieee754_asin+0x308>)
 801402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014030:	f7ec f93c 	bl	80002ac <__adddf3>
 8014034:	4632      	mov	r2, r6
 8014036:	463b      	mov	r3, r7
 8014038:	f7ec faee 	bl	8000618 <__aeabi_dmul>
 801403c:	a332      	add	r3, pc, #200	; (adr r3, 8014108 <__ieee754_asin+0x310>)
 801403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014042:	f7ec f931 	bl	80002a8 <__aeabi_dsub>
 8014046:	4632      	mov	r2, r6
 8014048:	463b      	mov	r3, r7
 801404a:	f7ec fae5 	bl	8000618 <__aeabi_dmul>
 801404e:	a330      	add	r3, pc, #192	; (adr r3, 8014110 <__ieee754_asin+0x318>)
 8014050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014054:	f7ec f92a 	bl	80002ac <__adddf3>
 8014058:	4632      	mov	r2, r6
 801405a:	463b      	mov	r3, r7
 801405c:	f7ec fadc 	bl	8000618 <__aeabi_dmul>
 8014060:	a32d      	add	r3, pc, #180	; (adr r3, 8014118 <__ieee754_asin+0x320>)
 8014062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014066:	4680      	mov	r8, r0
 8014068:	4689      	mov	r9, r1
 801406a:	4630      	mov	r0, r6
 801406c:	4639      	mov	r1, r7
 801406e:	f7ec fad3 	bl	8000618 <__aeabi_dmul>
 8014072:	a32b      	add	r3, pc, #172	; (adr r3, 8014120 <__ieee754_asin+0x328>)
 8014074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014078:	f7ec f916 	bl	80002a8 <__aeabi_dsub>
 801407c:	4632      	mov	r2, r6
 801407e:	463b      	mov	r3, r7
 8014080:	f7ec faca 	bl	8000618 <__aeabi_dmul>
 8014084:	a328      	add	r3, pc, #160	; (adr r3, 8014128 <__ieee754_asin+0x330>)
 8014086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408a:	f7ec f90f 	bl	80002ac <__adddf3>
 801408e:	4632      	mov	r2, r6
 8014090:	463b      	mov	r3, r7
 8014092:	f7ec fac1 	bl	8000618 <__aeabi_dmul>
 8014096:	a326      	add	r3, pc, #152	; (adr r3, 8014130 <__ieee754_asin+0x338>)
 8014098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409c:	f7ec f904 	bl	80002a8 <__aeabi_dsub>
 80140a0:	4632      	mov	r2, r6
 80140a2:	463b      	mov	r3, r7
 80140a4:	f7ec fab8 	bl	8000618 <__aeabi_dmul>
 80140a8:	4b25      	ldr	r3, [pc, #148]	; (8014140 <__ieee754_asin+0x348>)
 80140aa:	2200      	movs	r2, #0
 80140ac:	f7ec f8fe 	bl	80002ac <__adddf3>
 80140b0:	4602      	mov	r2, r0
 80140b2:	460b      	mov	r3, r1
 80140b4:	4640      	mov	r0, r8
 80140b6:	4649      	mov	r1, r9
 80140b8:	f7ec fbd8 	bl	800086c <__aeabi_ddiv>
 80140bc:	4622      	mov	r2, r4
 80140be:	462b      	mov	r3, r5
 80140c0:	f7ec faaa 	bl	8000618 <__aeabi_dmul>
 80140c4:	4602      	mov	r2, r0
 80140c6:	460b      	mov	r3, r1
 80140c8:	4620      	mov	r0, r4
 80140ca:	4629      	mov	r1, r5
 80140cc:	e6bf      	b.n	8013e4e <__ieee754_asin+0x56>
 80140ce:	bf00      	nop
 80140d0:	54442d18 	.word	0x54442d18
 80140d4:	3ff921fb 	.word	0x3ff921fb
 80140d8:	33145c07 	.word	0x33145c07
 80140dc:	3c91a626 	.word	0x3c91a626
 80140e0:	8800759c 	.word	0x8800759c
 80140e4:	7e37e43c 	.word	0x7e37e43c
 80140e8:	0dfdf709 	.word	0x0dfdf709
 80140ec:	3f023de1 	.word	0x3f023de1
 80140f0:	7501b288 	.word	0x7501b288
 80140f4:	3f49efe0 	.word	0x3f49efe0
 80140f8:	b5688f3b 	.word	0xb5688f3b
 80140fc:	3fa48228 	.word	0x3fa48228
 8014100:	0e884455 	.word	0x0e884455
 8014104:	3fc9c155 	.word	0x3fc9c155
 8014108:	03eb6f7d 	.word	0x03eb6f7d
 801410c:	3fd4d612 	.word	0x3fd4d612
 8014110:	55555555 	.word	0x55555555
 8014114:	3fc55555 	.word	0x3fc55555
 8014118:	b12e9282 	.word	0xb12e9282
 801411c:	3fb3b8c5 	.word	0x3fb3b8c5
 8014120:	1b8d0159 	.word	0x1b8d0159
 8014124:	3fe6066c 	.word	0x3fe6066c
 8014128:	9c598ac8 	.word	0x9c598ac8
 801412c:	40002ae5 	.word	0x40002ae5
 8014130:	1c8a2d4b 	.word	0x1c8a2d4b
 8014134:	40033a27 	.word	0x40033a27
 8014138:	3fefffff 	.word	0x3fefffff
 801413c:	3fdfffff 	.word	0x3fdfffff
 8014140:	3ff00000 	.word	0x3ff00000
 8014144:	3fe00000 	.word	0x3fe00000
 8014148:	3fef3332 	.word	0x3fef3332
 801414c:	ee10 2a10 	vmov	r2, s0
 8014150:	ee10 0a10 	vmov	r0, s0
 8014154:	465b      	mov	r3, fp
 8014156:	4659      	mov	r1, fp
 8014158:	f7ec f8a8 	bl	80002ac <__adddf3>
 801415c:	4632      	mov	r2, r6
 801415e:	463b      	mov	r3, r7
 8014160:	ec41 0b19 	vmov	d9, r0, r1
 8014164:	ec51 0b18 	vmov	r0, r1, d8
 8014168:	f7ec fb80 	bl	800086c <__aeabi_ddiv>
 801416c:	4602      	mov	r2, r0
 801416e:	460b      	mov	r3, r1
 8014170:	ec51 0b19 	vmov	r0, r1, d9
 8014174:	f7ec fa50 	bl	8000618 <__aeabi_dmul>
 8014178:	f04f 0800 	mov.w	r8, #0
 801417c:	4606      	mov	r6, r0
 801417e:	460f      	mov	r7, r1
 8014180:	4642      	mov	r2, r8
 8014182:	465b      	mov	r3, fp
 8014184:	4640      	mov	r0, r8
 8014186:	4659      	mov	r1, fp
 8014188:	f7ec fa46 	bl	8000618 <__aeabi_dmul>
 801418c:	4602      	mov	r2, r0
 801418e:	460b      	mov	r3, r1
 8014190:	4620      	mov	r0, r4
 8014192:	4629      	mov	r1, r5
 8014194:	f7ec f888 	bl	80002a8 <__aeabi_dsub>
 8014198:	4642      	mov	r2, r8
 801419a:	4604      	mov	r4, r0
 801419c:	460d      	mov	r5, r1
 801419e:	465b      	mov	r3, fp
 80141a0:	4650      	mov	r0, sl
 80141a2:	4659      	mov	r1, fp
 80141a4:	f7ec f882 	bl	80002ac <__adddf3>
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	4620      	mov	r0, r4
 80141ae:	4629      	mov	r1, r5
 80141b0:	f7ec fb5c 	bl	800086c <__aeabi_ddiv>
 80141b4:	4602      	mov	r2, r0
 80141b6:	460b      	mov	r3, r1
 80141b8:	f7ec f878 	bl	80002ac <__adddf3>
 80141bc:	4602      	mov	r2, r0
 80141be:	460b      	mov	r3, r1
 80141c0:	a113      	add	r1, pc, #76	; (adr r1, 8014210 <__ieee754_asin+0x418>)
 80141c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141c6:	f7ec f86f 	bl	80002a8 <__aeabi_dsub>
 80141ca:	4602      	mov	r2, r0
 80141cc:	460b      	mov	r3, r1
 80141ce:	4630      	mov	r0, r6
 80141d0:	4639      	mov	r1, r7
 80141d2:	f7ec f869 	bl	80002a8 <__aeabi_dsub>
 80141d6:	4642      	mov	r2, r8
 80141d8:	4604      	mov	r4, r0
 80141da:	460d      	mov	r5, r1
 80141dc:	465b      	mov	r3, fp
 80141de:	4640      	mov	r0, r8
 80141e0:	4659      	mov	r1, fp
 80141e2:	f7ec f863 	bl	80002ac <__adddf3>
 80141e6:	4602      	mov	r2, r0
 80141e8:	460b      	mov	r3, r1
 80141ea:	a10b      	add	r1, pc, #44	; (adr r1, 8014218 <__ieee754_asin+0x420>)
 80141ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141f0:	f7ec f85a 	bl	80002a8 <__aeabi_dsub>
 80141f4:	4602      	mov	r2, r0
 80141f6:	460b      	mov	r3, r1
 80141f8:	4620      	mov	r0, r4
 80141fa:	4629      	mov	r1, r5
 80141fc:	f7ec f854 	bl	80002a8 <__aeabi_dsub>
 8014200:	4602      	mov	r2, r0
 8014202:	460b      	mov	r3, r1
 8014204:	a104      	add	r1, pc, #16	; (adr r1, 8014218 <__ieee754_asin+0x420>)
 8014206:	e9d1 0100 	ldrd	r0, r1, [r1]
 801420a:	e6df      	b.n	8013fcc <__ieee754_asin+0x1d4>
 801420c:	f3af 8000 	nop.w
 8014210:	33145c07 	.word	0x33145c07
 8014214:	3c91a626 	.word	0x3c91a626
 8014218:	54442d18 	.word	0x54442d18
 801421c:	3fe921fb 	.word	0x3fe921fb

08014220 <__ieee754_rem_pio2>:
 8014220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014224:	ed2d 8b02 	vpush	{d8}
 8014228:	ec55 4b10 	vmov	r4, r5, d0
 801422c:	4bca      	ldr	r3, [pc, #808]	; (8014558 <__ieee754_rem_pio2+0x338>)
 801422e:	b08b      	sub	sp, #44	; 0x2c
 8014230:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8014234:	4598      	cmp	r8, r3
 8014236:	4682      	mov	sl, r0
 8014238:	9502      	str	r5, [sp, #8]
 801423a:	dc08      	bgt.n	801424e <__ieee754_rem_pio2+0x2e>
 801423c:	2200      	movs	r2, #0
 801423e:	2300      	movs	r3, #0
 8014240:	ed80 0b00 	vstr	d0, [r0]
 8014244:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014248:	f04f 0b00 	mov.w	fp, #0
 801424c:	e028      	b.n	80142a0 <__ieee754_rem_pio2+0x80>
 801424e:	4bc3      	ldr	r3, [pc, #780]	; (801455c <__ieee754_rem_pio2+0x33c>)
 8014250:	4598      	cmp	r8, r3
 8014252:	dc78      	bgt.n	8014346 <__ieee754_rem_pio2+0x126>
 8014254:	9b02      	ldr	r3, [sp, #8]
 8014256:	4ec2      	ldr	r6, [pc, #776]	; (8014560 <__ieee754_rem_pio2+0x340>)
 8014258:	2b00      	cmp	r3, #0
 801425a:	ee10 0a10 	vmov	r0, s0
 801425e:	a3b0      	add	r3, pc, #704	; (adr r3, 8014520 <__ieee754_rem_pio2+0x300>)
 8014260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014264:	4629      	mov	r1, r5
 8014266:	dd39      	ble.n	80142dc <__ieee754_rem_pio2+0xbc>
 8014268:	f7ec f81e 	bl	80002a8 <__aeabi_dsub>
 801426c:	45b0      	cmp	r8, r6
 801426e:	4604      	mov	r4, r0
 8014270:	460d      	mov	r5, r1
 8014272:	d01b      	beq.n	80142ac <__ieee754_rem_pio2+0x8c>
 8014274:	a3ac      	add	r3, pc, #688	; (adr r3, 8014528 <__ieee754_rem_pio2+0x308>)
 8014276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427a:	f7ec f815 	bl	80002a8 <__aeabi_dsub>
 801427e:	4602      	mov	r2, r0
 8014280:	460b      	mov	r3, r1
 8014282:	e9ca 2300 	strd	r2, r3, [sl]
 8014286:	4620      	mov	r0, r4
 8014288:	4629      	mov	r1, r5
 801428a:	f7ec f80d 	bl	80002a8 <__aeabi_dsub>
 801428e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014528 <__ieee754_rem_pio2+0x308>)
 8014290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014294:	f7ec f808 	bl	80002a8 <__aeabi_dsub>
 8014298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801429c:	f04f 0b01 	mov.w	fp, #1
 80142a0:	4658      	mov	r0, fp
 80142a2:	b00b      	add	sp, #44	; 0x2c
 80142a4:	ecbd 8b02 	vpop	{d8}
 80142a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8014530 <__ieee754_rem_pio2+0x310>)
 80142ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b2:	f7eb fff9 	bl	80002a8 <__aeabi_dsub>
 80142b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8014538 <__ieee754_rem_pio2+0x318>)
 80142b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142bc:	4604      	mov	r4, r0
 80142be:	460d      	mov	r5, r1
 80142c0:	f7eb fff2 	bl	80002a8 <__aeabi_dsub>
 80142c4:	4602      	mov	r2, r0
 80142c6:	460b      	mov	r3, r1
 80142c8:	e9ca 2300 	strd	r2, r3, [sl]
 80142cc:	4620      	mov	r0, r4
 80142ce:	4629      	mov	r1, r5
 80142d0:	f7eb ffea 	bl	80002a8 <__aeabi_dsub>
 80142d4:	a398      	add	r3, pc, #608	; (adr r3, 8014538 <__ieee754_rem_pio2+0x318>)
 80142d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142da:	e7db      	b.n	8014294 <__ieee754_rem_pio2+0x74>
 80142dc:	f7eb ffe6 	bl	80002ac <__adddf3>
 80142e0:	45b0      	cmp	r8, r6
 80142e2:	4604      	mov	r4, r0
 80142e4:	460d      	mov	r5, r1
 80142e6:	d016      	beq.n	8014316 <__ieee754_rem_pio2+0xf6>
 80142e8:	a38f      	add	r3, pc, #572	; (adr r3, 8014528 <__ieee754_rem_pio2+0x308>)
 80142ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ee:	f7eb ffdd 	bl	80002ac <__adddf3>
 80142f2:	4602      	mov	r2, r0
 80142f4:	460b      	mov	r3, r1
 80142f6:	e9ca 2300 	strd	r2, r3, [sl]
 80142fa:	4620      	mov	r0, r4
 80142fc:	4629      	mov	r1, r5
 80142fe:	f7eb ffd3 	bl	80002a8 <__aeabi_dsub>
 8014302:	a389      	add	r3, pc, #548	; (adr r3, 8014528 <__ieee754_rem_pio2+0x308>)
 8014304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014308:	f7eb ffd0 	bl	80002ac <__adddf3>
 801430c:	f04f 3bff 	mov.w	fp, #4294967295
 8014310:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014314:	e7c4      	b.n	80142a0 <__ieee754_rem_pio2+0x80>
 8014316:	a386      	add	r3, pc, #536	; (adr r3, 8014530 <__ieee754_rem_pio2+0x310>)
 8014318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431c:	f7eb ffc6 	bl	80002ac <__adddf3>
 8014320:	a385      	add	r3, pc, #532	; (adr r3, 8014538 <__ieee754_rem_pio2+0x318>)
 8014322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014326:	4604      	mov	r4, r0
 8014328:	460d      	mov	r5, r1
 801432a:	f7eb ffbf 	bl	80002ac <__adddf3>
 801432e:	4602      	mov	r2, r0
 8014330:	460b      	mov	r3, r1
 8014332:	e9ca 2300 	strd	r2, r3, [sl]
 8014336:	4620      	mov	r0, r4
 8014338:	4629      	mov	r1, r5
 801433a:	f7eb ffb5 	bl	80002a8 <__aeabi_dsub>
 801433e:	a37e      	add	r3, pc, #504	; (adr r3, 8014538 <__ieee754_rem_pio2+0x318>)
 8014340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014344:	e7e0      	b.n	8014308 <__ieee754_rem_pio2+0xe8>
 8014346:	4b87      	ldr	r3, [pc, #540]	; (8014564 <__ieee754_rem_pio2+0x344>)
 8014348:	4598      	cmp	r8, r3
 801434a:	f300 80d9 	bgt.w	8014500 <__ieee754_rem_pio2+0x2e0>
 801434e:	f000 feed 	bl	801512c <fabs>
 8014352:	ec55 4b10 	vmov	r4, r5, d0
 8014356:	ee10 0a10 	vmov	r0, s0
 801435a:	a379      	add	r3, pc, #484	; (adr r3, 8014540 <__ieee754_rem_pio2+0x320>)
 801435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014360:	4629      	mov	r1, r5
 8014362:	f7ec f959 	bl	8000618 <__aeabi_dmul>
 8014366:	4b80      	ldr	r3, [pc, #512]	; (8014568 <__ieee754_rem_pio2+0x348>)
 8014368:	2200      	movs	r2, #0
 801436a:	f7eb ff9f 	bl	80002ac <__adddf3>
 801436e:	f7ec fc03 	bl	8000b78 <__aeabi_d2iz>
 8014372:	4683      	mov	fp, r0
 8014374:	f7ec f8e6 	bl	8000544 <__aeabi_i2d>
 8014378:	4602      	mov	r2, r0
 801437a:	460b      	mov	r3, r1
 801437c:	ec43 2b18 	vmov	d8, r2, r3
 8014380:	a367      	add	r3, pc, #412	; (adr r3, 8014520 <__ieee754_rem_pio2+0x300>)
 8014382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014386:	f7ec f947 	bl	8000618 <__aeabi_dmul>
 801438a:	4602      	mov	r2, r0
 801438c:	460b      	mov	r3, r1
 801438e:	4620      	mov	r0, r4
 8014390:	4629      	mov	r1, r5
 8014392:	f7eb ff89 	bl	80002a8 <__aeabi_dsub>
 8014396:	a364      	add	r3, pc, #400	; (adr r3, 8014528 <__ieee754_rem_pio2+0x308>)
 8014398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439c:	4606      	mov	r6, r0
 801439e:	460f      	mov	r7, r1
 80143a0:	ec51 0b18 	vmov	r0, r1, d8
 80143a4:	f7ec f938 	bl	8000618 <__aeabi_dmul>
 80143a8:	f1bb 0f1f 	cmp.w	fp, #31
 80143ac:	4604      	mov	r4, r0
 80143ae:	460d      	mov	r5, r1
 80143b0:	dc0d      	bgt.n	80143ce <__ieee754_rem_pio2+0x1ae>
 80143b2:	4b6e      	ldr	r3, [pc, #440]	; (801456c <__ieee754_rem_pio2+0x34c>)
 80143b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80143b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143bc:	4543      	cmp	r3, r8
 80143be:	d006      	beq.n	80143ce <__ieee754_rem_pio2+0x1ae>
 80143c0:	4622      	mov	r2, r4
 80143c2:	462b      	mov	r3, r5
 80143c4:	4630      	mov	r0, r6
 80143c6:	4639      	mov	r1, r7
 80143c8:	f7eb ff6e 	bl	80002a8 <__aeabi_dsub>
 80143cc:	e00f      	b.n	80143ee <__ieee754_rem_pio2+0x1ce>
 80143ce:	462b      	mov	r3, r5
 80143d0:	4622      	mov	r2, r4
 80143d2:	4630      	mov	r0, r6
 80143d4:	4639      	mov	r1, r7
 80143d6:	f7eb ff67 	bl	80002a8 <__aeabi_dsub>
 80143da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80143de:	9303      	str	r3, [sp, #12]
 80143e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80143e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80143e8:	f1b8 0f10 	cmp.w	r8, #16
 80143ec:	dc02      	bgt.n	80143f4 <__ieee754_rem_pio2+0x1d4>
 80143ee:	e9ca 0100 	strd	r0, r1, [sl]
 80143f2:	e039      	b.n	8014468 <__ieee754_rem_pio2+0x248>
 80143f4:	a34e      	add	r3, pc, #312	; (adr r3, 8014530 <__ieee754_rem_pio2+0x310>)
 80143f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fa:	ec51 0b18 	vmov	r0, r1, d8
 80143fe:	f7ec f90b 	bl	8000618 <__aeabi_dmul>
 8014402:	4604      	mov	r4, r0
 8014404:	460d      	mov	r5, r1
 8014406:	4602      	mov	r2, r0
 8014408:	460b      	mov	r3, r1
 801440a:	4630      	mov	r0, r6
 801440c:	4639      	mov	r1, r7
 801440e:	f7eb ff4b 	bl	80002a8 <__aeabi_dsub>
 8014412:	4602      	mov	r2, r0
 8014414:	460b      	mov	r3, r1
 8014416:	4680      	mov	r8, r0
 8014418:	4689      	mov	r9, r1
 801441a:	4630      	mov	r0, r6
 801441c:	4639      	mov	r1, r7
 801441e:	f7eb ff43 	bl	80002a8 <__aeabi_dsub>
 8014422:	4622      	mov	r2, r4
 8014424:	462b      	mov	r3, r5
 8014426:	f7eb ff3f 	bl	80002a8 <__aeabi_dsub>
 801442a:	a343      	add	r3, pc, #268	; (adr r3, 8014538 <__ieee754_rem_pio2+0x318>)
 801442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014430:	4604      	mov	r4, r0
 8014432:	460d      	mov	r5, r1
 8014434:	ec51 0b18 	vmov	r0, r1, d8
 8014438:	f7ec f8ee 	bl	8000618 <__aeabi_dmul>
 801443c:	4622      	mov	r2, r4
 801443e:	462b      	mov	r3, r5
 8014440:	f7eb ff32 	bl	80002a8 <__aeabi_dsub>
 8014444:	4602      	mov	r2, r0
 8014446:	460b      	mov	r3, r1
 8014448:	4604      	mov	r4, r0
 801444a:	460d      	mov	r5, r1
 801444c:	4640      	mov	r0, r8
 801444e:	4649      	mov	r1, r9
 8014450:	f7eb ff2a 	bl	80002a8 <__aeabi_dsub>
 8014454:	9a03      	ldr	r2, [sp, #12]
 8014456:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801445a:	1ad3      	subs	r3, r2, r3
 801445c:	2b31      	cmp	r3, #49	; 0x31
 801445e:	dc24      	bgt.n	80144aa <__ieee754_rem_pio2+0x28a>
 8014460:	e9ca 0100 	strd	r0, r1, [sl]
 8014464:	4646      	mov	r6, r8
 8014466:	464f      	mov	r7, r9
 8014468:	e9da 8900 	ldrd	r8, r9, [sl]
 801446c:	4630      	mov	r0, r6
 801446e:	4642      	mov	r2, r8
 8014470:	464b      	mov	r3, r9
 8014472:	4639      	mov	r1, r7
 8014474:	f7eb ff18 	bl	80002a8 <__aeabi_dsub>
 8014478:	462b      	mov	r3, r5
 801447a:	4622      	mov	r2, r4
 801447c:	f7eb ff14 	bl	80002a8 <__aeabi_dsub>
 8014480:	9b02      	ldr	r3, [sp, #8]
 8014482:	2b00      	cmp	r3, #0
 8014484:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014488:	f6bf af0a 	bge.w	80142a0 <__ieee754_rem_pio2+0x80>
 801448c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014490:	f8ca 3004 	str.w	r3, [sl, #4]
 8014494:	f8ca 8000 	str.w	r8, [sl]
 8014498:	f8ca 0008 	str.w	r0, [sl, #8]
 801449c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80144a4:	f1cb 0b00 	rsb	fp, fp, #0
 80144a8:	e6fa      	b.n	80142a0 <__ieee754_rem_pio2+0x80>
 80144aa:	a327      	add	r3, pc, #156	; (adr r3, 8014548 <__ieee754_rem_pio2+0x328>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	ec51 0b18 	vmov	r0, r1, d8
 80144b4:	f7ec f8b0 	bl	8000618 <__aeabi_dmul>
 80144b8:	4604      	mov	r4, r0
 80144ba:	460d      	mov	r5, r1
 80144bc:	4602      	mov	r2, r0
 80144be:	460b      	mov	r3, r1
 80144c0:	4640      	mov	r0, r8
 80144c2:	4649      	mov	r1, r9
 80144c4:	f7eb fef0 	bl	80002a8 <__aeabi_dsub>
 80144c8:	4602      	mov	r2, r0
 80144ca:	460b      	mov	r3, r1
 80144cc:	4606      	mov	r6, r0
 80144ce:	460f      	mov	r7, r1
 80144d0:	4640      	mov	r0, r8
 80144d2:	4649      	mov	r1, r9
 80144d4:	f7eb fee8 	bl	80002a8 <__aeabi_dsub>
 80144d8:	4622      	mov	r2, r4
 80144da:	462b      	mov	r3, r5
 80144dc:	f7eb fee4 	bl	80002a8 <__aeabi_dsub>
 80144e0:	a31b      	add	r3, pc, #108	; (adr r3, 8014550 <__ieee754_rem_pio2+0x330>)
 80144e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e6:	4604      	mov	r4, r0
 80144e8:	460d      	mov	r5, r1
 80144ea:	ec51 0b18 	vmov	r0, r1, d8
 80144ee:	f7ec f893 	bl	8000618 <__aeabi_dmul>
 80144f2:	4622      	mov	r2, r4
 80144f4:	462b      	mov	r3, r5
 80144f6:	f7eb fed7 	bl	80002a8 <__aeabi_dsub>
 80144fa:	4604      	mov	r4, r0
 80144fc:	460d      	mov	r5, r1
 80144fe:	e75f      	b.n	80143c0 <__ieee754_rem_pio2+0x1a0>
 8014500:	4b1b      	ldr	r3, [pc, #108]	; (8014570 <__ieee754_rem_pio2+0x350>)
 8014502:	4598      	cmp	r8, r3
 8014504:	dd36      	ble.n	8014574 <__ieee754_rem_pio2+0x354>
 8014506:	ee10 2a10 	vmov	r2, s0
 801450a:	462b      	mov	r3, r5
 801450c:	4620      	mov	r0, r4
 801450e:	4629      	mov	r1, r5
 8014510:	f7eb feca 	bl	80002a8 <__aeabi_dsub>
 8014514:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014518:	e9ca 0100 	strd	r0, r1, [sl]
 801451c:	e694      	b.n	8014248 <__ieee754_rem_pio2+0x28>
 801451e:	bf00      	nop
 8014520:	54400000 	.word	0x54400000
 8014524:	3ff921fb 	.word	0x3ff921fb
 8014528:	1a626331 	.word	0x1a626331
 801452c:	3dd0b461 	.word	0x3dd0b461
 8014530:	1a600000 	.word	0x1a600000
 8014534:	3dd0b461 	.word	0x3dd0b461
 8014538:	2e037073 	.word	0x2e037073
 801453c:	3ba3198a 	.word	0x3ba3198a
 8014540:	6dc9c883 	.word	0x6dc9c883
 8014544:	3fe45f30 	.word	0x3fe45f30
 8014548:	2e000000 	.word	0x2e000000
 801454c:	3ba3198a 	.word	0x3ba3198a
 8014550:	252049c1 	.word	0x252049c1
 8014554:	397b839a 	.word	0x397b839a
 8014558:	3fe921fb 	.word	0x3fe921fb
 801455c:	4002d97b 	.word	0x4002d97b
 8014560:	3ff921fb 	.word	0x3ff921fb
 8014564:	413921fb 	.word	0x413921fb
 8014568:	3fe00000 	.word	0x3fe00000
 801456c:	080159bc 	.word	0x080159bc
 8014570:	7fefffff 	.word	0x7fefffff
 8014574:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014578:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801457c:	ee10 0a10 	vmov	r0, s0
 8014580:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8014584:	ee10 6a10 	vmov	r6, s0
 8014588:	460f      	mov	r7, r1
 801458a:	f7ec faf5 	bl	8000b78 <__aeabi_d2iz>
 801458e:	f7eb ffd9 	bl	8000544 <__aeabi_i2d>
 8014592:	4602      	mov	r2, r0
 8014594:	460b      	mov	r3, r1
 8014596:	4630      	mov	r0, r6
 8014598:	4639      	mov	r1, r7
 801459a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801459e:	f7eb fe83 	bl	80002a8 <__aeabi_dsub>
 80145a2:	4b22      	ldr	r3, [pc, #136]	; (801462c <__ieee754_rem_pio2+0x40c>)
 80145a4:	2200      	movs	r2, #0
 80145a6:	f7ec f837 	bl	8000618 <__aeabi_dmul>
 80145aa:	460f      	mov	r7, r1
 80145ac:	4606      	mov	r6, r0
 80145ae:	f7ec fae3 	bl	8000b78 <__aeabi_d2iz>
 80145b2:	f7eb ffc7 	bl	8000544 <__aeabi_i2d>
 80145b6:	4602      	mov	r2, r0
 80145b8:	460b      	mov	r3, r1
 80145ba:	4630      	mov	r0, r6
 80145bc:	4639      	mov	r1, r7
 80145be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80145c2:	f7eb fe71 	bl	80002a8 <__aeabi_dsub>
 80145c6:	4b19      	ldr	r3, [pc, #100]	; (801462c <__ieee754_rem_pio2+0x40c>)
 80145c8:	2200      	movs	r2, #0
 80145ca:	f7ec f825 	bl	8000618 <__aeabi_dmul>
 80145ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80145d2:	ad04      	add	r5, sp, #16
 80145d4:	f04f 0803 	mov.w	r8, #3
 80145d8:	46a9      	mov	r9, r5
 80145da:	2600      	movs	r6, #0
 80145dc:	2700      	movs	r7, #0
 80145de:	4632      	mov	r2, r6
 80145e0:	463b      	mov	r3, r7
 80145e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80145e6:	46c3      	mov	fp, r8
 80145e8:	3d08      	subs	r5, #8
 80145ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80145ee:	f7ec fa7b 	bl	8000ae8 <__aeabi_dcmpeq>
 80145f2:	2800      	cmp	r0, #0
 80145f4:	d1f3      	bne.n	80145de <__ieee754_rem_pio2+0x3be>
 80145f6:	4b0e      	ldr	r3, [pc, #56]	; (8014630 <__ieee754_rem_pio2+0x410>)
 80145f8:	9301      	str	r3, [sp, #4]
 80145fa:	2302      	movs	r3, #2
 80145fc:	9300      	str	r3, [sp, #0]
 80145fe:	4622      	mov	r2, r4
 8014600:	465b      	mov	r3, fp
 8014602:	4651      	mov	r1, sl
 8014604:	4648      	mov	r0, r9
 8014606:	f000 f993 	bl	8014930 <__kernel_rem_pio2>
 801460a:	9b02      	ldr	r3, [sp, #8]
 801460c:	2b00      	cmp	r3, #0
 801460e:	4683      	mov	fp, r0
 8014610:	f6bf ae46 	bge.w	80142a0 <__ieee754_rem_pio2+0x80>
 8014614:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014618:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801461c:	f8ca 3004 	str.w	r3, [sl, #4]
 8014620:	f8da 300c 	ldr.w	r3, [sl, #12]
 8014624:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014628:	e73a      	b.n	80144a0 <__ieee754_rem_pio2+0x280>
 801462a:	bf00      	nop
 801462c:	41700000 	.word	0x41700000
 8014630:	08015a3c 	.word	0x08015a3c

08014634 <__ieee754_sqrt>:
 8014634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014638:	ec55 4b10 	vmov	r4, r5, d0
 801463c:	4e56      	ldr	r6, [pc, #344]	; (8014798 <__ieee754_sqrt+0x164>)
 801463e:	43ae      	bics	r6, r5
 8014640:	ee10 0a10 	vmov	r0, s0
 8014644:	ee10 3a10 	vmov	r3, s0
 8014648:	4629      	mov	r1, r5
 801464a:	462a      	mov	r2, r5
 801464c:	d110      	bne.n	8014670 <__ieee754_sqrt+0x3c>
 801464e:	ee10 2a10 	vmov	r2, s0
 8014652:	462b      	mov	r3, r5
 8014654:	f7eb ffe0 	bl	8000618 <__aeabi_dmul>
 8014658:	4602      	mov	r2, r0
 801465a:	460b      	mov	r3, r1
 801465c:	4620      	mov	r0, r4
 801465e:	4629      	mov	r1, r5
 8014660:	f7eb fe24 	bl	80002ac <__adddf3>
 8014664:	4604      	mov	r4, r0
 8014666:	460d      	mov	r5, r1
 8014668:	ec45 4b10 	vmov	d0, r4, r5
 801466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014670:	2d00      	cmp	r5, #0
 8014672:	dc10      	bgt.n	8014696 <__ieee754_sqrt+0x62>
 8014674:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014678:	4330      	orrs	r0, r6
 801467a:	d0f5      	beq.n	8014668 <__ieee754_sqrt+0x34>
 801467c:	b15d      	cbz	r5, 8014696 <__ieee754_sqrt+0x62>
 801467e:	ee10 2a10 	vmov	r2, s0
 8014682:	462b      	mov	r3, r5
 8014684:	ee10 0a10 	vmov	r0, s0
 8014688:	f7eb fe0e 	bl	80002a8 <__aeabi_dsub>
 801468c:	4602      	mov	r2, r0
 801468e:	460b      	mov	r3, r1
 8014690:	f7ec f8ec 	bl	800086c <__aeabi_ddiv>
 8014694:	e7e6      	b.n	8014664 <__ieee754_sqrt+0x30>
 8014696:	1509      	asrs	r1, r1, #20
 8014698:	d076      	beq.n	8014788 <__ieee754_sqrt+0x154>
 801469a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801469e:	07ce      	lsls	r6, r1, #31
 80146a0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80146a4:	bf5e      	ittt	pl
 80146a6:	0fda      	lsrpl	r2, r3, #31
 80146a8:	005b      	lslpl	r3, r3, #1
 80146aa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80146ae:	0fda      	lsrs	r2, r3, #31
 80146b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80146b4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80146b8:	2000      	movs	r0, #0
 80146ba:	106d      	asrs	r5, r5, #1
 80146bc:	005b      	lsls	r3, r3, #1
 80146be:	f04f 0e16 	mov.w	lr, #22
 80146c2:	4684      	mov	ip, r0
 80146c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80146c8:	eb0c 0401 	add.w	r4, ip, r1
 80146cc:	4294      	cmp	r4, r2
 80146ce:	bfde      	ittt	le
 80146d0:	1b12      	suble	r2, r2, r4
 80146d2:	eb04 0c01 	addle.w	ip, r4, r1
 80146d6:	1840      	addle	r0, r0, r1
 80146d8:	0052      	lsls	r2, r2, #1
 80146da:	f1be 0e01 	subs.w	lr, lr, #1
 80146de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80146e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80146e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80146ea:	d1ed      	bne.n	80146c8 <__ieee754_sqrt+0x94>
 80146ec:	4671      	mov	r1, lr
 80146ee:	2720      	movs	r7, #32
 80146f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80146f4:	4562      	cmp	r2, ip
 80146f6:	eb04 060e 	add.w	r6, r4, lr
 80146fa:	dc02      	bgt.n	8014702 <__ieee754_sqrt+0xce>
 80146fc:	d113      	bne.n	8014726 <__ieee754_sqrt+0xf2>
 80146fe:	429e      	cmp	r6, r3
 8014700:	d811      	bhi.n	8014726 <__ieee754_sqrt+0xf2>
 8014702:	2e00      	cmp	r6, #0
 8014704:	eb06 0e04 	add.w	lr, r6, r4
 8014708:	da43      	bge.n	8014792 <__ieee754_sqrt+0x15e>
 801470a:	f1be 0f00 	cmp.w	lr, #0
 801470e:	db40      	blt.n	8014792 <__ieee754_sqrt+0x15e>
 8014710:	f10c 0801 	add.w	r8, ip, #1
 8014714:	eba2 020c 	sub.w	r2, r2, ip
 8014718:	429e      	cmp	r6, r3
 801471a:	bf88      	it	hi
 801471c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014720:	1b9b      	subs	r3, r3, r6
 8014722:	4421      	add	r1, r4
 8014724:	46c4      	mov	ip, r8
 8014726:	0052      	lsls	r2, r2, #1
 8014728:	3f01      	subs	r7, #1
 801472a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801472e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014732:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014736:	d1dd      	bne.n	80146f4 <__ieee754_sqrt+0xc0>
 8014738:	4313      	orrs	r3, r2
 801473a:	d006      	beq.n	801474a <__ieee754_sqrt+0x116>
 801473c:	1c4c      	adds	r4, r1, #1
 801473e:	bf13      	iteet	ne
 8014740:	3101      	addne	r1, #1
 8014742:	3001      	addeq	r0, #1
 8014744:	4639      	moveq	r1, r7
 8014746:	f021 0101 	bicne.w	r1, r1, #1
 801474a:	1043      	asrs	r3, r0, #1
 801474c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014750:	0849      	lsrs	r1, r1, #1
 8014752:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014756:	07c2      	lsls	r2, r0, #31
 8014758:	bf48      	it	mi
 801475a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801475e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014762:	460c      	mov	r4, r1
 8014764:	463d      	mov	r5, r7
 8014766:	e77f      	b.n	8014668 <__ieee754_sqrt+0x34>
 8014768:	0ada      	lsrs	r2, r3, #11
 801476a:	3815      	subs	r0, #21
 801476c:	055b      	lsls	r3, r3, #21
 801476e:	2a00      	cmp	r2, #0
 8014770:	d0fa      	beq.n	8014768 <__ieee754_sqrt+0x134>
 8014772:	02d7      	lsls	r7, r2, #11
 8014774:	d50a      	bpl.n	801478c <__ieee754_sqrt+0x158>
 8014776:	f1c1 0420 	rsb	r4, r1, #32
 801477a:	fa23 f404 	lsr.w	r4, r3, r4
 801477e:	1e4d      	subs	r5, r1, #1
 8014780:	408b      	lsls	r3, r1
 8014782:	4322      	orrs	r2, r4
 8014784:	1b41      	subs	r1, r0, r5
 8014786:	e788      	b.n	801469a <__ieee754_sqrt+0x66>
 8014788:	4608      	mov	r0, r1
 801478a:	e7f0      	b.n	801476e <__ieee754_sqrt+0x13a>
 801478c:	0052      	lsls	r2, r2, #1
 801478e:	3101      	adds	r1, #1
 8014790:	e7ef      	b.n	8014772 <__ieee754_sqrt+0x13e>
 8014792:	46e0      	mov	r8, ip
 8014794:	e7be      	b.n	8014714 <__ieee754_sqrt+0xe0>
 8014796:	bf00      	nop
 8014798:	7ff00000 	.word	0x7ff00000
 801479c:	00000000 	.word	0x00000000

080147a0 <__kernel_cos>:
 80147a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a4:	ec57 6b10 	vmov	r6, r7, d0
 80147a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80147ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80147b0:	ed8d 1b00 	vstr	d1, [sp]
 80147b4:	da07      	bge.n	80147c6 <__kernel_cos+0x26>
 80147b6:	ee10 0a10 	vmov	r0, s0
 80147ba:	4639      	mov	r1, r7
 80147bc:	f7ec f9dc 	bl	8000b78 <__aeabi_d2iz>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	f000 8088 	beq.w	80148d6 <__kernel_cos+0x136>
 80147c6:	4632      	mov	r2, r6
 80147c8:	463b      	mov	r3, r7
 80147ca:	4630      	mov	r0, r6
 80147cc:	4639      	mov	r1, r7
 80147ce:	f7eb ff23 	bl	8000618 <__aeabi_dmul>
 80147d2:	4b51      	ldr	r3, [pc, #324]	; (8014918 <__kernel_cos+0x178>)
 80147d4:	2200      	movs	r2, #0
 80147d6:	4604      	mov	r4, r0
 80147d8:	460d      	mov	r5, r1
 80147da:	f7eb ff1d 	bl	8000618 <__aeabi_dmul>
 80147de:	a340      	add	r3, pc, #256	; (adr r3, 80148e0 <__kernel_cos+0x140>)
 80147e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e4:	4682      	mov	sl, r0
 80147e6:	468b      	mov	fp, r1
 80147e8:	4620      	mov	r0, r4
 80147ea:	4629      	mov	r1, r5
 80147ec:	f7eb ff14 	bl	8000618 <__aeabi_dmul>
 80147f0:	a33d      	add	r3, pc, #244	; (adr r3, 80148e8 <__kernel_cos+0x148>)
 80147f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f6:	f7eb fd59 	bl	80002ac <__adddf3>
 80147fa:	4622      	mov	r2, r4
 80147fc:	462b      	mov	r3, r5
 80147fe:	f7eb ff0b 	bl	8000618 <__aeabi_dmul>
 8014802:	a33b      	add	r3, pc, #236	; (adr r3, 80148f0 <__kernel_cos+0x150>)
 8014804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014808:	f7eb fd4e 	bl	80002a8 <__aeabi_dsub>
 801480c:	4622      	mov	r2, r4
 801480e:	462b      	mov	r3, r5
 8014810:	f7eb ff02 	bl	8000618 <__aeabi_dmul>
 8014814:	a338      	add	r3, pc, #224	; (adr r3, 80148f8 <__kernel_cos+0x158>)
 8014816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801481a:	f7eb fd47 	bl	80002ac <__adddf3>
 801481e:	4622      	mov	r2, r4
 8014820:	462b      	mov	r3, r5
 8014822:	f7eb fef9 	bl	8000618 <__aeabi_dmul>
 8014826:	a336      	add	r3, pc, #216	; (adr r3, 8014900 <__kernel_cos+0x160>)
 8014828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801482c:	f7eb fd3c 	bl	80002a8 <__aeabi_dsub>
 8014830:	4622      	mov	r2, r4
 8014832:	462b      	mov	r3, r5
 8014834:	f7eb fef0 	bl	8000618 <__aeabi_dmul>
 8014838:	a333      	add	r3, pc, #204	; (adr r3, 8014908 <__kernel_cos+0x168>)
 801483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801483e:	f7eb fd35 	bl	80002ac <__adddf3>
 8014842:	4622      	mov	r2, r4
 8014844:	462b      	mov	r3, r5
 8014846:	f7eb fee7 	bl	8000618 <__aeabi_dmul>
 801484a:	4622      	mov	r2, r4
 801484c:	462b      	mov	r3, r5
 801484e:	f7eb fee3 	bl	8000618 <__aeabi_dmul>
 8014852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014856:	4604      	mov	r4, r0
 8014858:	460d      	mov	r5, r1
 801485a:	4630      	mov	r0, r6
 801485c:	4639      	mov	r1, r7
 801485e:	f7eb fedb 	bl	8000618 <__aeabi_dmul>
 8014862:	460b      	mov	r3, r1
 8014864:	4602      	mov	r2, r0
 8014866:	4629      	mov	r1, r5
 8014868:	4620      	mov	r0, r4
 801486a:	f7eb fd1d 	bl	80002a8 <__aeabi_dsub>
 801486e:	4b2b      	ldr	r3, [pc, #172]	; (801491c <__kernel_cos+0x17c>)
 8014870:	4598      	cmp	r8, r3
 8014872:	4606      	mov	r6, r0
 8014874:	460f      	mov	r7, r1
 8014876:	dc10      	bgt.n	801489a <__kernel_cos+0xfa>
 8014878:	4602      	mov	r2, r0
 801487a:	460b      	mov	r3, r1
 801487c:	4650      	mov	r0, sl
 801487e:	4659      	mov	r1, fp
 8014880:	f7eb fd12 	bl	80002a8 <__aeabi_dsub>
 8014884:	460b      	mov	r3, r1
 8014886:	4926      	ldr	r1, [pc, #152]	; (8014920 <__kernel_cos+0x180>)
 8014888:	4602      	mov	r2, r0
 801488a:	2000      	movs	r0, #0
 801488c:	f7eb fd0c 	bl	80002a8 <__aeabi_dsub>
 8014890:	ec41 0b10 	vmov	d0, r0, r1
 8014894:	b003      	add	sp, #12
 8014896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489a:	4b22      	ldr	r3, [pc, #136]	; (8014924 <__kernel_cos+0x184>)
 801489c:	4920      	ldr	r1, [pc, #128]	; (8014920 <__kernel_cos+0x180>)
 801489e:	4598      	cmp	r8, r3
 80148a0:	bfcc      	ite	gt
 80148a2:	4d21      	ldrgt	r5, [pc, #132]	; (8014928 <__kernel_cos+0x188>)
 80148a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80148a8:	2400      	movs	r4, #0
 80148aa:	4622      	mov	r2, r4
 80148ac:	462b      	mov	r3, r5
 80148ae:	2000      	movs	r0, #0
 80148b0:	f7eb fcfa 	bl	80002a8 <__aeabi_dsub>
 80148b4:	4622      	mov	r2, r4
 80148b6:	4680      	mov	r8, r0
 80148b8:	4689      	mov	r9, r1
 80148ba:	462b      	mov	r3, r5
 80148bc:	4650      	mov	r0, sl
 80148be:	4659      	mov	r1, fp
 80148c0:	f7eb fcf2 	bl	80002a8 <__aeabi_dsub>
 80148c4:	4632      	mov	r2, r6
 80148c6:	463b      	mov	r3, r7
 80148c8:	f7eb fcee 	bl	80002a8 <__aeabi_dsub>
 80148cc:	4602      	mov	r2, r0
 80148ce:	460b      	mov	r3, r1
 80148d0:	4640      	mov	r0, r8
 80148d2:	4649      	mov	r1, r9
 80148d4:	e7da      	b.n	801488c <__kernel_cos+0xec>
 80148d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8014910 <__kernel_cos+0x170>
 80148da:	e7db      	b.n	8014894 <__kernel_cos+0xf4>
 80148dc:	f3af 8000 	nop.w
 80148e0:	be8838d4 	.word	0xbe8838d4
 80148e4:	bda8fae9 	.word	0xbda8fae9
 80148e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80148ec:	3e21ee9e 	.word	0x3e21ee9e
 80148f0:	809c52ad 	.word	0x809c52ad
 80148f4:	3e927e4f 	.word	0x3e927e4f
 80148f8:	19cb1590 	.word	0x19cb1590
 80148fc:	3efa01a0 	.word	0x3efa01a0
 8014900:	16c15177 	.word	0x16c15177
 8014904:	3f56c16c 	.word	0x3f56c16c
 8014908:	5555554c 	.word	0x5555554c
 801490c:	3fa55555 	.word	0x3fa55555
 8014910:	00000000 	.word	0x00000000
 8014914:	3ff00000 	.word	0x3ff00000
 8014918:	3fe00000 	.word	0x3fe00000
 801491c:	3fd33332 	.word	0x3fd33332
 8014920:	3ff00000 	.word	0x3ff00000
 8014924:	3fe90000 	.word	0x3fe90000
 8014928:	3fd20000 	.word	0x3fd20000
 801492c:	00000000 	.word	0x00000000

08014930 <__kernel_rem_pio2>:
 8014930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014934:	ed2d 8b02 	vpush	{d8}
 8014938:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801493c:	f112 0f14 	cmn.w	r2, #20
 8014940:	9308      	str	r3, [sp, #32]
 8014942:	9101      	str	r1, [sp, #4]
 8014944:	4bc6      	ldr	r3, [pc, #792]	; (8014c60 <__kernel_rem_pio2+0x330>)
 8014946:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014948:	9009      	str	r0, [sp, #36]	; 0x24
 801494a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801494e:	9304      	str	r3, [sp, #16]
 8014950:	9b08      	ldr	r3, [sp, #32]
 8014952:	f103 33ff 	add.w	r3, r3, #4294967295
 8014956:	bfa8      	it	ge
 8014958:	1ed4      	subge	r4, r2, #3
 801495a:	9306      	str	r3, [sp, #24]
 801495c:	bfb2      	itee	lt
 801495e:	2400      	movlt	r4, #0
 8014960:	2318      	movge	r3, #24
 8014962:	fb94 f4f3 	sdivge	r4, r4, r3
 8014966:	f06f 0317 	mvn.w	r3, #23
 801496a:	fb04 3303 	mla	r3, r4, r3, r3
 801496e:	eb03 0a02 	add.w	sl, r3, r2
 8014972:	9b04      	ldr	r3, [sp, #16]
 8014974:	9a06      	ldr	r2, [sp, #24]
 8014976:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014c50 <__kernel_rem_pio2+0x320>
 801497a:	eb03 0802 	add.w	r8, r3, r2
 801497e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014980:	1aa7      	subs	r7, r4, r2
 8014982:	ae20      	add	r6, sp, #128	; 0x80
 8014984:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014988:	2500      	movs	r5, #0
 801498a:	4545      	cmp	r5, r8
 801498c:	dd18      	ble.n	80149c0 <__kernel_rem_pio2+0x90>
 801498e:	9b08      	ldr	r3, [sp, #32]
 8014990:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014994:	aa20      	add	r2, sp, #128	; 0x80
 8014996:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8014c50 <__kernel_rem_pio2+0x320>
 801499a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801499e:	f1c3 0301 	rsb	r3, r3, #1
 80149a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80149a6:	9307      	str	r3, [sp, #28]
 80149a8:	9b07      	ldr	r3, [sp, #28]
 80149aa:	9a04      	ldr	r2, [sp, #16]
 80149ac:	4443      	add	r3, r8
 80149ae:	429a      	cmp	r2, r3
 80149b0:	db2f      	blt.n	8014a12 <__kernel_rem_pio2+0xe2>
 80149b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80149b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80149ba:	462f      	mov	r7, r5
 80149bc:	2600      	movs	r6, #0
 80149be:	e01b      	b.n	80149f8 <__kernel_rem_pio2+0xc8>
 80149c0:	42ef      	cmn	r7, r5
 80149c2:	d407      	bmi.n	80149d4 <__kernel_rem_pio2+0xa4>
 80149c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80149c8:	f7eb fdbc 	bl	8000544 <__aeabi_i2d>
 80149cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80149d0:	3501      	adds	r5, #1
 80149d2:	e7da      	b.n	801498a <__kernel_rem_pio2+0x5a>
 80149d4:	ec51 0b18 	vmov	r0, r1, d8
 80149d8:	e7f8      	b.n	80149cc <__kernel_rem_pio2+0x9c>
 80149da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80149e2:	f7eb fe19 	bl	8000618 <__aeabi_dmul>
 80149e6:	4602      	mov	r2, r0
 80149e8:	460b      	mov	r3, r1
 80149ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149ee:	f7eb fc5d 	bl	80002ac <__adddf3>
 80149f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149f6:	3601      	adds	r6, #1
 80149f8:	9b06      	ldr	r3, [sp, #24]
 80149fa:	429e      	cmp	r6, r3
 80149fc:	f1a7 0708 	sub.w	r7, r7, #8
 8014a00:	ddeb      	ble.n	80149da <__kernel_rem_pio2+0xaa>
 8014a02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a06:	3508      	adds	r5, #8
 8014a08:	ecab 7b02 	vstmia	fp!, {d7}
 8014a0c:	f108 0801 	add.w	r8, r8, #1
 8014a10:	e7ca      	b.n	80149a8 <__kernel_rem_pio2+0x78>
 8014a12:	9b04      	ldr	r3, [sp, #16]
 8014a14:	aa0c      	add	r2, sp, #48	; 0x30
 8014a16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014a1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014a22:	9c04      	ldr	r4, [sp, #16]
 8014a24:	930a      	str	r3, [sp, #40]	; 0x28
 8014a26:	ab98      	add	r3, sp, #608	; 0x260
 8014a28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014a2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8014a30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8014a34:	f8cd b008 	str.w	fp, [sp, #8]
 8014a38:	4625      	mov	r5, r4
 8014a3a:	2d00      	cmp	r5, #0
 8014a3c:	dc78      	bgt.n	8014b30 <__kernel_rem_pio2+0x200>
 8014a3e:	ec47 6b10 	vmov	d0, r6, r7
 8014a42:	4650      	mov	r0, sl
 8014a44:	f000 fbfc 	bl	8015240 <scalbn>
 8014a48:	ec57 6b10 	vmov	r6, r7, d0
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014a52:	ee10 0a10 	vmov	r0, s0
 8014a56:	4639      	mov	r1, r7
 8014a58:	f7eb fdde 	bl	8000618 <__aeabi_dmul>
 8014a5c:	ec41 0b10 	vmov	d0, r0, r1
 8014a60:	f000 fb6e 	bl	8015140 <floor>
 8014a64:	4b7f      	ldr	r3, [pc, #508]	; (8014c64 <__kernel_rem_pio2+0x334>)
 8014a66:	ec51 0b10 	vmov	r0, r1, d0
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	f7eb fdd4 	bl	8000618 <__aeabi_dmul>
 8014a70:	4602      	mov	r2, r0
 8014a72:	460b      	mov	r3, r1
 8014a74:	4630      	mov	r0, r6
 8014a76:	4639      	mov	r1, r7
 8014a78:	f7eb fc16 	bl	80002a8 <__aeabi_dsub>
 8014a7c:	460f      	mov	r7, r1
 8014a7e:	4606      	mov	r6, r0
 8014a80:	f7ec f87a 	bl	8000b78 <__aeabi_d2iz>
 8014a84:	9007      	str	r0, [sp, #28]
 8014a86:	f7eb fd5d 	bl	8000544 <__aeabi_i2d>
 8014a8a:	4602      	mov	r2, r0
 8014a8c:	460b      	mov	r3, r1
 8014a8e:	4630      	mov	r0, r6
 8014a90:	4639      	mov	r1, r7
 8014a92:	f7eb fc09 	bl	80002a8 <__aeabi_dsub>
 8014a96:	f1ba 0f00 	cmp.w	sl, #0
 8014a9a:	4606      	mov	r6, r0
 8014a9c:	460f      	mov	r7, r1
 8014a9e:	dd70      	ble.n	8014b82 <__kernel_rem_pio2+0x252>
 8014aa0:	1e62      	subs	r2, r4, #1
 8014aa2:	ab0c      	add	r3, sp, #48	; 0x30
 8014aa4:	9d07      	ldr	r5, [sp, #28]
 8014aa6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014aaa:	f1ca 0118 	rsb	r1, sl, #24
 8014aae:	fa40 f301 	asr.w	r3, r0, r1
 8014ab2:	441d      	add	r5, r3
 8014ab4:	408b      	lsls	r3, r1
 8014ab6:	1ac0      	subs	r0, r0, r3
 8014ab8:	ab0c      	add	r3, sp, #48	; 0x30
 8014aba:	9507      	str	r5, [sp, #28]
 8014abc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014ac0:	f1ca 0317 	rsb	r3, sl, #23
 8014ac4:	fa40 f303 	asr.w	r3, r0, r3
 8014ac8:	9302      	str	r3, [sp, #8]
 8014aca:	9b02      	ldr	r3, [sp, #8]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	dd66      	ble.n	8014b9e <__kernel_rem_pio2+0x26e>
 8014ad0:	9b07      	ldr	r3, [sp, #28]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	9307      	str	r3, [sp, #28]
 8014ad8:	4615      	mov	r5, r2
 8014ada:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014ade:	4294      	cmp	r4, r2
 8014ae0:	f300 8099 	bgt.w	8014c16 <__kernel_rem_pio2+0x2e6>
 8014ae4:	f1ba 0f00 	cmp.w	sl, #0
 8014ae8:	dd07      	ble.n	8014afa <__kernel_rem_pio2+0x1ca>
 8014aea:	f1ba 0f01 	cmp.w	sl, #1
 8014aee:	f000 80a5 	beq.w	8014c3c <__kernel_rem_pio2+0x30c>
 8014af2:	f1ba 0f02 	cmp.w	sl, #2
 8014af6:	f000 80c1 	beq.w	8014c7c <__kernel_rem_pio2+0x34c>
 8014afa:	9b02      	ldr	r3, [sp, #8]
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d14e      	bne.n	8014b9e <__kernel_rem_pio2+0x26e>
 8014b00:	4632      	mov	r2, r6
 8014b02:	463b      	mov	r3, r7
 8014b04:	4958      	ldr	r1, [pc, #352]	; (8014c68 <__kernel_rem_pio2+0x338>)
 8014b06:	2000      	movs	r0, #0
 8014b08:	f7eb fbce 	bl	80002a8 <__aeabi_dsub>
 8014b0c:	4606      	mov	r6, r0
 8014b0e:	460f      	mov	r7, r1
 8014b10:	2d00      	cmp	r5, #0
 8014b12:	d044      	beq.n	8014b9e <__kernel_rem_pio2+0x26e>
 8014b14:	4650      	mov	r0, sl
 8014b16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014c58 <__kernel_rem_pio2+0x328>
 8014b1a:	f000 fb91 	bl	8015240 <scalbn>
 8014b1e:	4630      	mov	r0, r6
 8014b20:	4639      	mov	r1, r7
 8014b22:	ec53 2b10 	vmov	r2, r3, d0
 8014b26:	f7eb fbbf 	bl	80002a8 <__aeabi_dsub>
 8014b2a:	4606      	mov	r6, r0
 8014b2c:	460f      	mov	r7, r1
 8014b2e:	e036      	b.n	8014b9e <__kernel_rem_pio2+0x26e>
 8014b30:	4b4e      	ldr	r3, [pc, #312]	; (8014c6c <__kernel_rem_pio2+0x33c>)
 8014b32:	2200      	movs	r2, #0
 8014b34:	4630      	mov	r0, r6
 8014b36:	4639      	mov	r1, r7
 8014b38:	f7eb fd6e 	bl	8000618 <__aeabi_dmul>
 8014b3c:	f7ec f81c 	bl	8000b78 <__aeabi_d2iz>
 8014b40:	f7eb fd00 	bl	8000544 <__aeabi_i2d>
 8014b44:	4b4a      	ldr	r3, [pc, #296]	; (8014c70 <__kernel_rem_pio2+0x340>)
 8014b46:	2200      	movs	r2, #0
 8014b48:	4680      	mov	r8, r0
 8014b4a:	4689      	mov	r9, r1
 8014b4c:	f7eb fd64 	bl	8000618 <__aeabi_dmul>
 8014b50:	4602      	mov	r2, r0
 8014b52:	460b      	mov	r3, r1
 8014b54:	4630      	mov	r0, r6
 8014b56:	4639      	mov	r1, r7
 8014b58:	f7eb fba6 	bl	80002a8 <__aeabi_dsub>
 8014b5c:	f7ec f80c 	bl	8000b78 <__aeabi_d2iz>
 8014b60:	9b02      	ldr	r3, [sp, #8]
 8014b62:	f843 0b04 	str.w	r0, [r3], #4
 8014b66:	3d01      	subs	r5, #1
 8014b68:	9302      	str	r3, [sp, #8]
 8014b6a:	ab70      	add	r3, sp, #448	; 0x1c0
 8014b6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b74:	4640      	mov	r0, r8
 8014b76:	4649      	mov	r1, r9
 8014b78:	f7eb fb98 	bl	80002ac <__adddf3>
 8014b7c:	4606      	mov	r6, r0
 8014b7e:	460f      	mov	r7, r1
 8014b80:	e75b      	b.n	8014a3a <__kernel_rem_pio2+0x10a>
 8014b82:	d105      	bne.n	8014b90 <__kernel_rem_pio2+0x260>
 8014b84:	1e63      	subs	r3, r4, #1
 8014b86:	aa0c      	add	r2, sp, #48	; 0x30
 8014b88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014b8c:	15c3      	asrs	r3, r0, #23
 8014b8e:	e79b      	b.n	8014ac8 <__kernel_rem_pio2+0x198>
 8014b90:	4b38      	ldr	r3, [pc, #224]	; (8014c74 <__kernel_rem_pio2+0x344>)
 8014b92:	2200      	movs	r2, #0
 8014b94:	f7eb ffc6 	bl	8000b24 <__aeabi_dcmpge>
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	d139      	bne.n	8014c10 <__kernel_rem_pio2+0x2e0>
 8014b9c:	9002      	str	r0, [sp, #8]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	4630      	mov	r0, r6
 8014ba4:	4639      	mov	r1, r7
 8014ba6:	f7eb ff9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	f000 80b4 	beq.w	8014d18 <__kernel_rem_pio2+0x3e8>
 8014bb0:	f104 3bff 	add.w	fp, r4, #4294967295
 8014bb4:	465b      	mov	r3, fp
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	9904      	ldr	r1, [sp, #16]
 8014bba:	428b      	cmp	r3, r1
 8014bbc:	da65      	bge.n	8014c8a <__kernel_rem_pio2+0x35a>
 8014bbe:	2a00      	cmp	r2, #0
 8014bc0:	d07b      	beq.n	8014cba <__kernel_rem_pio2+0x38a>
 8014bc2:	ab0c      	add	r3, sp, #48	; 0x30
 8014bc4:	f1aa 0a18 	sub.w	sl, sl, #24
 8014bc8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	f000 80a0 	beq.w	8014d12 <__kernel_rem_pio2+0x3e2>
 8014bd2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8014c58 <__kernel_rem_pio2+0x328>
 8014bd6:	4650      	mov	r0, sl
 8014bd8:	f000 fb32 	bl	8015240 <scalbn>
 8014bdc:	4f23      	ldr	r7, [pc, #140]	; (8014c6c <__kernel_rem_pio2+0x33c>)
 8014bde:	ec55 4b10 	vmov	r4, r5, d0
 8014be2:	46d8      	mov	r8, fp
 8014be4:	2600      	movs	r6, #0
 8014be6:	f1b8 0f00 	cmp.w	r8, #0
 8014bea:	f280 80cf 	bge.w	8014d8c <__kernel_rem_pio2+0x45c>
 8014bee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8014c50 <__kernel_rem_pio2+0x320>
 8014bf2:	465f      	mov	r7, fp
 8014bf4:	f04f 0800 	mov.w	r8, #0
 8014bf8:	2f00      	cmp	r7, #0
 8014bfa:	f2c0 80fd 	blt.w	8014df8 <__kernel_rem_pio2+0x4c8>
 8014bfe:	ab70      	add	r3, sp, #448	; 0x1c0
 8014c00:	f8df a074 	ldr.w	sl, [pc, #116]	; 8014c78 <__kernel_rem_pio2+0x348>
 8014c04:	ec55 4b18 	vmov	r4, r5, d8
 8014c08:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8014c0c:	2600      	movs	r6, #0
 8014c0e:	e0e5      	b.n	8014ddc <__kernel_rem_pio2+0x4ac>
 8014c10:	2302      	movs	r3, #2
 8014c12:	9302      	str	r3, [sp, #8]
 8014c14:	e75c      	b.n	8014ad0 <__kernel_rem_pio2+0x1a0>
 8014c16:	f8db 3000 	ldr.w	r3, [fp]
 8014c1a:	b955      	cbnz	r5, 8014c32 <__kernel_rem_pio2+0x302>
 8014c1c:	b123      	cbz	r3, 8014c28 <__kernel_rem_pio2+0x2f8>
 8014c1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014c22:	f8cb 3000 	str.w	r3, [fp]
 8014c26:	2301      	movs	r3, #1
 8014c28:	3201      	adds	r2, #1
 8014c2a:	f10b 0b04 	add.w	fp, fp, #4
 8014c2e:	461d      	mov	r5, r3
 8014c30:	e755      	b.n	8014ade <__kernel_rem_pio2+0x1ae>
 8014c32:	1acb      	subs	r3, r1, r3
 8014c34:	f8cb 3000 	str.w	r3, [fp]
 8014c38:	462b      	mov	r3, r5
 8014c3a:	e7f5      	b.n	8014c28 <__kernel_rem_pio2+0x2f8>
 8014c3c:	1e62      	subs	r2, r4, #1
 8014c3e:	ab0c      	add	r3, sp, #48	; 0x30
 8014c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014c48:	a90c      	add	r1, sp, #48	; 0x30
 8014c4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014c4e:	e754      	b.n	8014afa <__kernel_rem_pio2+0x1ca>
	...
 8014c5c:	3ff00000 	.word	0x3ff00000
 8014c60:	08015b88 	.word	0x08015b88
 8014c64:	40200000 	.word	0x40200000
 8014c68:	3ff00000 	.word	0x3ff00000
 8014c6c:	3e700000 	.word	0x3e700000
 8014c70:	41700000 	.word	0x41700000
 8014c74:	3fe00000 	.word	0x3fe00000
 8014c78:	08015b48 	.word	0x08015b48
 8014c7c:	1e62      	subs	r2, r4, #1
 8014c7e:	ab0c      	add	r3, sp, #48	; 0x30
 8014c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014c88:	e7de      	b.n	8014c48 <__kernel_rem_pio2+0x318>
 8014c8a:	a90c      	add	r1, sp, #48	; 0x30
 8014c8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014c90:	3b01      	subs	r3, #1
 8014c92:	430a      	orrs	r2, r1
 8014c94:	e790      	b.n	8014bb8 <__kernel_rem_pio2+0x288>
 8014c96:	3301      	adds	r3, #1
 8014c98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014c9c:	2900      	cmp	r1, #0
 8014c9e:	d0fa      	beq.n	8014c96 <__kernel_rem_pio2+0x366>
 8014ca0:	9a08      	ldr	r2, [sp, #32]
 8014ca2:	18e3      	adds	r3, r4, r3
 8014ca4:	18a6      	adds	r6, r4, r2
 8014ca6:	aa20      	add	r2, sp, #128	; 0x80
 8014ca8:	1c65      	adds	r5, r4, #1
 8014caa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014cae:	9302      	str	r3, [sp, #8]
 8014cb0:	9b02      	ldr	r3, [sp, #8]
 8014cb2:	42ab      	cmp	r3, r5
 8014cb4:	da04      	bge.n	8014cc0 <__kernel_rem_pio2+0x390>
 8014cb6:	461c      	mov	r4, r3
 8014cb8:	e6b5      	b.n	8014a26 <__kernel_rem_pio2+0xf6>
 8014cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	e7eb      	b.n	8014c98 <__kernel_rem_pio2+0x368>
 8014cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014cc6:	f7eb fc3d 	bl	8000544 <__aeabi_i2d>
 8014cca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd0:	46b3      	mov	fp, r6
 8014cd2:	461c      	mov	r4, r3
 8014cd4:	2700      	movs	r7, #0
 8014cd6:	f04f 0800 	mov.w	r8, #0
 8014cda:	f04f 0900 	mov.w	r9, #0
 8014cde:	9b06      	ldr	r3, [sp, #24]
 8014ce0:	429f      	cmp	r7, r3
 8014ce2:	dd06      	ble.n	8014cf2 <__kernel_rem_pio2+0x3c2>
 8014ce4:	ab70      	add	r3, sp, #448	; 0x1c0
 8014ce6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014cea:	e9c3 8900 	strd	r8, r9, [r3]
 8014cee:	3501      	adds	r5, #1
 8014cf0:	e7de      	b.n	8014cb0 <__kernel_rem_pio2+0x380>
 8014cf2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014cf6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014cfa:	f7eb fc8d 	bl	8000618 <__aeabi_dmul>
 8014cfe:	4602      	mov	r2, r0
 8014d00:	460b      	mov	r3, r1
 8014d02:	4640      	mov	r0, r8
 8014d04:	4649      	mov	r1, r9
 8014d06:	f7eb fad1 	bl	80002ac <__adddf3>
 8014d0a:	3701      	adds	r7, #1
 8014d0c:	4680      	mov	r8, r0
 8014d0e:	4689      	mov	r9, r1
 8014d10:	e7e5      	b.n	8014cde <__kernel_rem_pio2+0x3ae>
 8014d12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014d16:	e754      	b.n	8014bc2 <__kernel_rem_pio2+0x292>
 8014d18:	ec47 6b10 	vmov	d0, r6, r7
 8014d1c:	f1ca 0000 	rsb	r0, sl, #0
 8014d20:	f000 fa8e 	bl	8015240 <scalbn>
 8014d24:	ec57 6b10 	vmov	r6, r7, d0
 8014d28:	4b9f      	ldr	r3, [pc, #636]	; (8014fa8 <__kernel_rem_pio2+0x678>)
 8014d2a:	ee10 0a10 	vmov	r0, s0
 8014d2e:	2200      	movs	r2, #0
 8014d30:	4639      	mov	r1, r7
 8014d32:	f7eb fef7 	bl	8000b24 <__aeabi_dcmpge>
 8014d36:	b300      	cbz	r0, 8014d7a <__kernel_rem_pio2+0x44a>
 8014d38:	4b9c      	ldr	r3, [pc, #624]	; (8014fac <__kernel_rem_pio2+0x67c>)
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	4639      	mov	r1, r7
 8014d40:	f7eb fc6a 	bl	8000618 <__aeabi_dmul>
 8014d44:	f7eb ff18 	bl	8000b78 <__aeabi_d2iz>
 8014d48:	4605      	mov	r5, r0
 8014d4a:	f7eb fbfb 	bl	8000544 <__aeabi_i2d>
 8014d4e:	4b96      	ldr	r3, [pc, #600]	; (8014fa8 <__kernel_rem_pio2+0x678>)
 8014d50:	2200      	movs	r2, #0
 8014d52:	f7eb fc61 	bl	8000618 <__aeabi_dmul>
 8014d56:	460b      	mov	r3, r1
 8014d58:	4602      	mov	r2, r0
 8014d5a:	4639      	mov	r1, r7
 8014d5c:	4630      	mov	r0, r6
 8014d5e:	f7eb faa3 	bl	80002a8 <__aeabi_dsub>
 8014d62:	f7eb ff09 	bl	8000b78 <__aeabi_d2iz>
 8014d66:	f104 0b01 	add.w	fp, r4, #1
 8014d6a:	ab0c      	add	r3, sp, #48	; 0x30
 8014d6c:	f10a 0a18 	add.w	sl, sl, #24
 8014d70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014d74:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8014d78:	e72b      	b.n	8014bd2 <__kernel_rem_pio2+0x2a2>
 8014d7a:	4630      	mov	r0, r6
 8014d7c:	4639      	mov	r1, r7
 8014d7e:	f7eb fefb 	bl	8000b78 <__aeabi_d2iz>
 8014d82:	ab0c      	add	r3, sp, #48	; 0x30
 8014d84:	46a3      	mov	fp, r4
 8014d86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014d8a:	e722      	b.n	8014bd2 <__kernel_rem_pio2+0x2a2>
 8014d8c:	ab70      	add	r3, sp, #448	; 0x1c0
 8014d8e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8014d92:	ab0c      	add	r3, sp, #48	; 0x30
 8014d94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014d98:	f7eb fbd4 	bl	8000544 <__aeabi_i2d>
 8014d9c:	4622      	mov	r2, r4
 8014d9e:	462b      	mov	r3, r5
 8014da0:	f7eb fc3a 	bl	8000618 <__aeabi_dmul>
 8014da4:	4632      	mov	r2, r6
 8014da6:	e9c9 0100 	strd	r0, r1, [r9]
 8014daa:	463b      	mov	r3, r7
 8014dac:	4620      	mov	r0, r4
 8014dae:	4629      	mov	r1, r5
 8014db0:	f7eb fc32 	bl	8000618 <__aeabi_dmul>
 8014db4:	f108 38ff 	add.w	r8, r8, #4294967295
 8014db8:	4604      	mov	r4, r0
 8014dba:	460d      	mov	r5, r1
 8014dbc:	e713      	b.n	8014be6 <__kernel_rem_pio2+0x2b6>
 8014dbe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8014dc2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8014dc6:	f7eb fc27 	bl	8000618 <__aeabi_dmul>
 8014dca:	4602      	mov	r2, r0
 8014dcc:	460b      	mov	r3, r1
 8014dce:	4620      	mov	r0, r4
 8014dd0:	4629      	mov	r1, r5
 8014dd2:	f7eb fa6b 	bl	80002ac <__adddf3>
 8014dd6:	3601      	adds	r6, #1
 8014dd8:	4604      	mov	r4, r0
 8014dda:	460d      	mov	r5, r1
 8014ddc:	9b04      	ldr	r3, [sp, #16]
 8014dde:	429e      	cmp	r6, r3
 8014de0:	dc01      	bgt.n	8014de6 <__kernel_rem_pio2+0x4b6>
 8014de2:	45b0      	cmp	r8, r6
 8014de4:	daeb      	bge.n	8014dbe <__kernel_rem_pio2+0x48e>
 8014de6:	ab48      	add	r3, sp, #288	; 0x120
 8014de8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014dec:	e9c3 4500 	strd	r4, r5, [r3]
 8014df0:	3f01      	subs	r7, #1
 8014df2:	f108 0801 	add.w	r8, r8, #1
 8014df6:	e6ff      	b.n	8014bf8 <__kernel_rem_pio2+0x2c8>
 8014df8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014dfa:	2b02      	cmp	r3, #2
 8014dfc:	dc0b      	bgt.n	8014e16 <__kernel_rem_pio2+0x4e6>
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	dc6e      	bgt.n	8014ee0 <__kernel_rem_pio2+0x5b0>
 8014e02:	d045      	beq.n	8014e90 <__kernel_rem_pio2+0x560>
 8014e04:	9b07      	ldr	r3, [sp, #28]
 8014e06:	f003 0007 	and.w	r0, r3, #7
 8014e0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8014e0e:	ecbd 8b02 	vpop	{d8}
 8014e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014e18:	2b03      	cmp	r3, #3
 8014e1a:	d1f3      	bne.n	8014e04 <__kernel_rem_pio2+0x4d4>
 8014e1c:	ab48      	add	r3, sp, #288	; 0x120
 8014e1e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8014e22:	46d0      	mov	r8, sl
 8014e24:	46d9      	mov	r9, fp
 8014e26:	f1b9 0f00 	cmp.w	r9, #0
 8014e2a:	f1a8 0808 	sub.w	r8, r8, #8
 8014e2e:	dc64      	bgt.n	8014efa <__kernel_rem_pio2+0x5ca>
 8014e30:	465c      	mov	r4, fp
 8014e32:	2c01      	cmp	r4, #1
 8014e34:	f1aa 0a08 	sub.w	sl, sl, #8
 8014e38:	dc7e      	bgt.n	8014f38 <__kernel_rem_pio2+0x608>
 8014e3a:	2000      	movs	r0, #0
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	f1bb 0f01 	cmp.w	fp, #1
 8014e42:	f300 8097 	bgt.w	8014f74 <__kernel_rem_pio2+0x644>
 8014e46:	9b02      	ldr	r3, [sp, #8]
 8014e48:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8014e4c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	f040 8099 	bne.w	8014f88 <__kernel_rem_pio2+0x658>
 8014e56:	9b01      	ldr	r3, [sp, #4]
 8014e58:	e9c3 5600 	strd	r5, r6, [r3]
 8014e5c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8014e60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014e64:	e7ce      	b.n	8014e04 <__kernel_rem_pio2+0x4d4>
 8014e66:	ab48      	add	r3, sp, #288	; 0x120
 8014e68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e70:	f7eb fa1c 	bl	80002ac <__adddf3>
 8014e74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e78:	f1bb 0f00 	cmp.w	fp, #0
 8014e7c:	daf3      	bge.n	8014e66 <__kernel_rem_pio2+0x536>
 8014e7e:	9b02      	ldr	r3, [sp, #8]
 8014e80:	b113      	cbz	r3, 8014e88 <__kernel_rem_pio2+0x558>
 8014e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e86:	4619      	mov	r1, r3
 8014e88:	9b01      	ldr	r3, [sp, #4]
 8014e8a:	e9c3 0100 	strd	r0, r1, [r3]
 8014e8e:	e7b9      	b.n	8014e04 <__kernel_rem_pio2+0x4d4>
 8014e90:	2000      	movs	r0, #0
 8014e92:	2100      	movs	r1, #0
 8014e94:	e7f0      	b.n	8014e78 <__kernel_rem_pio2+0x548>
 8014e96:	ab48      	add	r3, sp, #288	; 0x120
 8014e98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea0:	f7eb fa04 	bl	80002ac <__adddf3>
 8014ea4:	3c01      	subs	r4, #1
 8014ea6:	2c00      	cmp	r4, #0
 8014ea8:	daf5      	bge.n	8014e96 <__kernel_rem_pio2+0x566>
 8014eaa:	9b02      	ldr	r3, [sp, #8]
 8014eac:	b1e3      	cbz	r3, 8014ee8 <__kernel_rem_pio2+0x5b8>
 8014eae:	4602      	mov	r2, r0
 8014eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014eb4:	9c01      	ldr	r4, [sp, #4]
 8014eb6:	e9c4 2300 	strd	r2, r3, [r4]
 8014eba:	4602      	mov	r2, r0
 8014ebc:	460b      	mov	r3, r1
 8014ebe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8014ec2:	f7eb f9f1 	bl	80002a8 <__aeabi_dsub>
 8014ec6:	ad4a      	add	r5, sp, #296	; 0x128
 8014ec8:	2401      	movs	r4, #1
 8014eca:	45a3      	cmp	fp, r4
 8014ecc:	da0f      	bge.n	8014eee <__kernel_rem_pio2+0x5be>
 8014ece:	9b02      	ldr	r3, [sp, #8]
 8014ed0:	b113      	cbz	r3, 8014ed8 <__kernel_rem_pio2+0x5a8>
 8014ed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	9b01      	ldr	r3, [sp, #4]
 8014eda:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014ede:	e791      	b.n	8014e04 <__kernel_rem_pio2+0x4d4>
 8014ee0:	465c      	mov	r4, fp
 8014ee2:	2000      	movs	r0, #0
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	e7de      	b.n	8014ea6 <__kernel_rem_pio2+0x576>
 8014ee8:	4602      	mov	r2, r0
 8014eea:	460b      	mov	r3, r1
 8014eec:	e7e2      	b.n	8014eb4 <__kernel_rem_pio2+0x584>
 8014eee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014ef2:	f7eb f9db 	bl	80002ac <__adddf3>
 8014ef6:	3401      	adds	r4, #1
 8014ef8:	e7e7      	b.n	8014eca <__kernel_rem_pio2+0x59a>
 8014efa:	e9d8 4500 	ldrd	r4, r5, [r8]
 8014efe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8014f02:	4620      	mov	r0, r4
 8014f04:	4632      	mov	r2, r6
 8014f06:	463b      	mov	r3, r7
 8014f08:	4629      	mov	r1, r5
 8014f0a:	f7eb f9cf 	bl	80002ac <__adddf3>
 8014f0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f12:	4602      	mov	r2, r0
 8014f14:	460b      	mov	r3, r1
 8014f16:	4620      	mov	r0, r4
 8014f18:	4629      	mov	r1, r5
 8014f1a:	f7eb f9c5 	bl	80002a8 <__aeabi_dsub>
 8014f1e:	4632      	mov	r2, r6
 8014f20:	463b      	mov	r3, r7
 8014f22:	f7eb f9c3 	bl	80002ac <__adddf3>
 8014f26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014f2a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8014f2e:	ed88 7b00 	vstr	d7, [r8]
 8014f32:	f109 39ff 	add.w	r9, r9, #4294967295
 8014f36:	e776      	b.n	8014e26 <__kernel_rem_pio2+0x4f6>
 8014f38:	e9da 8900 	ldrd	r8, r9, [sl]
 8014f3c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8014f40:	4640      	mov	r0, r8
 8014f42:	4632      	mov	r2, r6
 8014f44:	463b      	mov	r3, r7
 8014f46:	4649      	mov	r1, r9
 8014f48:	f7eb f9b0 	bl	80002ac <__adddf3>
 8014f4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f50:	4602      	mov	r2, r0
 8014f52:	460b      	mov	r3, r1
 8014f54:	4640      	mov	r0, r8
 8014f56:	4649      	mov	r1, r9
 8014f58:	f7eb f9a6 	bl	80002a8 <__aeabi_dsub>
 8014f5c:	4632      	mov	r2, r6
 8014f5e:	463b      	mov	r3, r7
 8014f60:	f7eb f9a4 	bl	80002ac <__adddf3>
 8014f64:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014f68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014f6c:	ed8a 7b00 	vstr	d7, [sl]
 8014f70:	3c01      	subs	r4, #1
 8014f72:	e75e      	b.n	8014e32 <__kernel_rem_pio2+0x502>
 8014f74:	ab48      	add	r3, sp, #288	; 0x120
 8014f76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7e:	f7eb f995 	bl	80002ac <__adddf3>
 8014f82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f86:	e75a      	b.n	8014e3e <__kernel_rem_pio2+0x50e>
 8014f88:	9b01      	ldr	r3, [sp, #4]
 8014f8a:	9a01      	ldr	r2, [sp, #4]
 8014f8c:	601d      	str	r5, [r3, #0]
 8014f8e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8014f92:	605c      	str	r4, [r3, #4]
 8014f94:	609f      	str	r7, [r3, #8]
 8014f96:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8014f9a:	60d3      	str	r3, [r2, #12]
 8014f9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fa0:	6110      	str	r0, [r2, #16]
 8014fa2:	6153      	str	r3, [r2, #20]
 8014fa4:	e72e      	b.n	8014e04 <__kernel_rem_pio2+0x4d4>
 8014fa6:	bf00      	nop
 8014fa8:	41700000 	.word	0x41700000
 8014fac:	3e700000 	.word	0x3e700000

08014fb0 <__kernel_sin>:
 8014fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb4:	ed2d 8b04 	vpush	{d8-d9}
 8014fb8:	eeb0 8a41 	vmov.f32	s16, s2
 8014fbc:	eef0 8a61 	vmov.f32	s17, s3
 8014fc0:	ec55 4b10 	vmov	r4, r5, d0
 8014fc4:	b083      	sub	sp, #12
 8014fc6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014fca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014fce:	9001      	str	r0, [sp, #4]
 8014fd0:	da06      	bge.n	8014fe0 <__kernel_sin+0x30>
 8014fd2:	ee10 0a10 	vmov	r0, s0
 8014fd6:	4629      	mov	r1, r5
 8014fd8:	f7eb fdce 	bl	8000b78 <__aeabi_d2iz>
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	d051      	beq.n	8015084 <__kernel_sin+0xd4>
 8014fe0:	4622      	mov	r2, r4
 8014fe2:	462b      	mov	r3, r5
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	4629      	mov	r1, r5
 8014fe8:	f7eb fb16 	bl	8000618 <__aeabi_dmul>
 8014fec:	4682      	mov	sl, r0
 8014fee:	468b      	mov	fp, r1
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	460b      	mov	r3, r1
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	f7eb fb0e 	bl	8000618 <__aeabi_dmul>
 8014ffc:	a341      	add	r3, pc, #260	; (adr r3, 8015104 <__kernel_sin+0x154>)
 8014ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015002:	4680      	mov	r8, r0
 8015004:	4689      	mov	r9, r1
 8015006:	4650      	mov	r0, sl
 8015008:	4659      	mov	r1, fp
 801500a:	f7eb fb05 	bl	8000618 <__aeabi_dmul>
 801500e:	a33f      	add	r3, pc, #252	; (adr r3, 801510c <__kernel_sin+0x15c>)
 8015010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015014:	f7eb f948 	bl	80002a8 <__aeabi_dsub>
 8015018:	4652      	mov	r2, sl
 801501a:	465b      	mov	r3, fp
 801501c:	f7eb fafc 	bl	8000618 <__aeabi_dmul>
 8015020:	a33c      	add	r3, pc, #240	; (adr r3, 8015114 <__kernel_sin+0x164>)
 8015022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015026:	f7eb f941 	bl	80002ac <__adddf3>
 801502a:	4652      	mov	r2, sl
 801502c:	465b      	mov	r3, fp
 801502e:	f7eb faf3 	bl	8000618 <__aeabi_dmul>
 8015032:	a33a      	add	r3, pc, #232	; (adr r3, 801511c <__kernel_sin+0x16c>)
 8015034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015038:	f7eb f936 	bl	80002a8 <__aeabi_dsub>
 801503c:	4652      	mov	r2, sl
 801503e:	465b      	mov	r3, fp
 8015040:	f7eb faea 	bl	8000618 <__aeabi_dmul>
 8015044:	a337      	add	r3, pc, #220	; (adr r3, 8015124 <__kernel_sin+0x174>)
 8015046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801504a:	f7eb f92f 	bl	80002ac <__adddf3>
 801504e:	9b01      	ldr	r3, [sp, #4]
 8015050:	4606      	mov	r6, r0
 8015052:	460f      	mov	r7, r1
 8015054:	b9eb      	cbnz	r3, 8015092 <__kernel_sin+0xe2>
 8015056:	4602      	mov	r2, r0
 8015058:	460b      	mov	r3, r1
 801505a:	4650      	mov	r0, sl
 801505c:	4659      	mov	r1, fp
 801505e:	f7eb fadb 	bl	8000618 <__aeabi_dmul>
 8015062:	a325      	add	r3, pc, #148	; (adr r3, 80150f8 <__kernel_sin+0x148>)
 8015064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015068:	f7eb f91e 	bl	80002a8 <__aeabi_dsub>
 801506c:	4642      	mov	r2, r8
 801506e:	464b      	mov	r3, r9
 8015070:	f7eb fad2 	bl	8000618 <__aeabi_dmul>
 8015074:	4602      	mov	r2, r0
 8015076:	460b      	mov	r3, r1
 8015078:	4620      	mov	r0, r4
 801507a:	4629      	mov	r1, r5
 801507c:	f7eb f916 	bl	80002ac <__adddf3>
 8015080:	4604      	mov	r4, r0
 8015082:	460d      	mov	r5, r1
 8015084:	ec45 4b10 	vmov	d0, r4, r5
 8015088:	b003      	add	sp, #12
 801508a:	ecbd 8b04 	vpop	{d8-d9}
 801508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015092:	4b1b      	ldr	r3, [pc, #108]	; (8015100 <__kernel_sin+0x150>)
 8015094:	ec51 0b18 	vmov	r0, r1, d8
 8015098:	2200      	movs	r2, #0
 801509a:	f7eb fabd 	bl	8000618 <__aeabi_dmul>
 801509e:	4632      	mov	r2, r6
 80150a0:	ec41 0b19 	vmov	d9, r0, r1
 80150a4:	463b      	mov	r3, r7
 80150a6:	4640      	mov	r0, r8
 80150a8:	4649      	mov	r1, r9
 80150aa:	f7eb fab5 	bl	8000618 <__aeabi_dmul>
 80150ae:	4602      	mov	r2, r0
 80150b0:	460b      	mov	r3, r1
 80150b2:	ec51 0b19 	vmov	r0, r1, d9
 80150b6:	f7eb f8f7 	bl	80002a8 <__aeabi_dsub>
 80150ba:	4652      	mov	r2, sl
 80150bc:	465b      	mov	r3, fp
 80150be:	f7eb faab 	bl	8000618 <__aeabi_dmul>
 80150c2:	ec53 2b18 	vmov	r2, r3, d8
 80150c6:	f7eb f8ef 	bl	80002a8 <__aeabi_dsub>
 80150ca:	a30b      	add	r3, pc, #44	; (adr r3, 80150f8 <__kernel_sin+0x148>)
 80150cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d0:	4606      	mov	r6, r0
 80150d2:	460f      	mov	r7, r1
 80150d4:	4640      	mov	r0, r8
 80150d6:	4649      	mov	r1, r9
 80150d8:	f7eb fa9e 	bl	8000618 <__aeabi_dmul>
 80150dc:	4602      	mov	r2, r0
 80150de:	460b      	mov	r3, r1
 80150e0:	4630      	mov	r0, r6
 80150e2:	4639      	mov	r1, r7
 80150e4:	f7eb f8e2 	bl	80002ac <__adddf3>
 80150e8:	4602      	mov	r2, r0
 80150ea:	460b      	mov	r3, r1
 80150ec:	4620      	mov	r0, r4
 80150ee:	4629      	mov	r1, r5
 80150f0:	f7eb f8da 	bl	80002a8 <__aeabi_dsub>
 80150f4:	e7c4      	b.n	8015080 <__kernel_sin+0xd0>
 80150f6:	bf00      	nop
 80150f8:	55555549 	.word	0x55555549
 80150fc:	3fc55555 	.word	0x3fc55555
 8015100:	3fe00000 	.word	0x3fe00000
 8015104:	5acfd57c 	.word	0x5acfd57c
 8015108:	3de5d93a 	.word	0x3de5d93a
 801510c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015110:	3e5ae5e6 	.word	0x3e5ae5e6
 8015114:	57b1fe7d 	.word	0x57b1fe7d
 8015118:	3ec71de3 	.word	0x3ec71de3
 801511c:	19c161d5 	.word	0x19c161d5
 8015120:	3f2a01a0 	.word	0x3f2a01a0
 8015124:	1110f8a6 	.word	0x1110f8a6
 8015128:	3f811111 	.word	0x3f811111

0801512c <fabs>:
 801512c:	ec51 0b10 	vmov	r0, r1, d0
 8015130:	ee10 2a10 	vmov	r2, s0
 8015134:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015138:	ec43 2b10 	vmov	d0, r2, r3
 801513c:	4770      	bx	lr
	...

08015140 <floor>:
 8015140:	ec51 0b10 	vmov	r0, r1, d0
 8015144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015148:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801514c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015150:	2e13      	cmp	r6, #19
 8015152:	ee10 5a10 	vmov	r5, s0
 8015156:	ee10 8a10 	vmov	r8, s0
 801515a:	460c      	mov	r4, r1
 801515c:	dc32      	bgt.n	80151c4 <floor+0x84>
 801515e:	2e00      	cmp	r6, #0
 8015160:	da14      	bge.n	801518c <floor+0x4c>
 8015162:	a333      	add	r3, pc, #204	; (adr r3, 8015230 <floor+0xf0>)
 8015164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015168:	f7eb f8a0 	bl	80002ac <__adddf3>
 801516c:	2200      	movs	r2, #0
 801516e:	2300      	movs	r3, #0
 8015170:	f7eb fce2 	bl	8000b38 <__aeabi_dcmpgt>
 8015174:	b138      	cbz	r0, 8015186 <floor+0x46>
 8015176:	2c00      	cmp	r4, #0
 8015178:	da57      	bge.n	801522a <floor+0xea>
 801517a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801517e:	431d      	orrs	r5, r3
 8015180:	d001      	beq.n	8015186 <floor+0x46>
 8015182:	4c2d      	ldr	r4, [pc, #180]	; (8015238 <floor+0xf8>)
 8015184:	2500      	movs	r5, #0
 8015186:	4621      	mov	r1, r4
 8015188:	4628      	mov	r0, r5
 801518a:	e025      	b.n	80151d8 <floor+0x98>
 801518c:	4f2b      	ldr	r7, [pc, #172]	; (801523c <floor+0xfc>)
 801518e:	4137      	asrs	r7, r6
 8015190:	ea01 0307 	and.w	r3, r1, r7
 8015194:	4303      	orrs	r3, r0
 8015196:	d01f      	beq.n	80151d8 <floor+0x98>
 8015198:	a325      	add	r3, pc, #148	; (adr r3, 8015230 <floor+0xf0>)
 801519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519e:	f7eb f885 	bl	80002ac <__adddf3>
 80151a2:	2200      	movs	r2, #0
 80151a4:	2300      	movs	r3, #0
 80151a6:	f7eb fcc7 	bl	8000b38 <__aeabi_dcmpgt>
 80151aa:	2800      	cmp	r0, #0
 80151ac:	d0eb      	beq.n	8015186 <floor+0x46>
 80151ae:	2c00      	cmp	r4, #0
 80151b0:	bfbe      	ittt	lt
 80151b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80151b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80151ba:	19a4      	addlt	r4, r4, r6
 80151bc:	ea24 0407 	bic.w	r4, r4, r7
 80151c0:	2500      	movs	r5, #0
 80151c2:	e7e0      	b.n	8015186 <floor+0x46>
 80151c4:	2e33      	cmp	r6, #51	; 0x33
 80151c6:	dd0b      	ble.n	80151e0 <floor+0xa0>
 80151c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80151cc:	d104      	bne.n	80151d8 <floor+0x98>
 80151ce:	ee10 2a10 	vmov	r2, s0
 80151d2:	460b      	mov	r3, r1
 80151d4:	f7eb f86a 	bl	80002ac <__adddf3>
 80151d8:	ec41 0b10 	vmov	d0, r0, r1
 80151dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80151e4:	f04f 33ff 	mov.w	r3, #4294967295
 80151e8:	fa23 f707 	lsr.w	r7, r3, r7
 80151ec:	4207      	tst	r7, r0
 80151ee:	d0f3      	beq.n	80151d8 <floor+0x98>
 80151f0:	a30f      	add	r3, pc, #60	; (adr r3, 8015230 <floor+0xf0>)
 80151f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f6:	f7eb f859 	bl	80002ac <__adddf3>
 80151fa:	2200      	movs	r2, #0
 80151fc:	2300      	movs	r3, #0
 80151fe:	f7eb fc9b 	bl	8000b38 <__aeabi_dcmpgt>
 8015202:	2800      	cmp	r0, #0
 8015204:	d0bf      	beq.n	8015186 <floor+0x46>
 8015206:	2c00      	cmp	r4, #0
 8015208:	da02      	bge.n	8015210 <floor+0xd0>
 801520a:	2e14      	cmp	r6, #20
 801520c:	d103      	bne.n	8015216 <floor+0xd6>
 801520e:	3401      	adds	r4, #1
 8015210:	ea25 0507 	bic.w	r5, r5, r7
 8015214:	e7b7      	b.n	8015186 <floor+0x46>
 8015216:	2301      	movs	r3, #1
 8015218:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801521c:	fa03 f606 	lsl.w	r6, r3, r6
 8015220:	4435      	add	r5, r6
 8015222:	4545      	cmp	r5, r8
 8015224:	bf38      	it	cc
 8015226:	18e4      	addcc	r4, r4, r3
 8015228:	e7f2      	b.n	8015210 <floor+0xd0>
 801522a:	2500      	movs	r5, #0
 801522c:	462c      	mov	r4, r5
 801522e:	e7aa      	b.n	8015186 <floor+0x46>
 8015230:	8800759c 	.word	0x8800759c
 8015234:	7e37e43c 	.word	0x7e37e43c
 8015238:	bff00000 	.word	0xbff00000
 801523c:	000fffff 	.word	0x000fffff

08015240 <scalbn>:
 8015240:	b570      	push	{r4, r5, r6, lr}
 8015242:	ec55 4b10 	vmov	r4, r5, d0
 8015246:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801524a:	4606      	mov	r6, r0
 801524c:	462b      	mov	r3, r5
 801524e:	b99a      	cbnz	r2, 8015278 <scalbn+0x38>
 8015250:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015254:	4323      	orrs	r3, r4
 8015256:	d036      	beq.n	80152c6 <scalbn+0x86>
 8015258:	4b39      	ldr	r3, [pc, #228]	; (8015340 <scalbn+0x100>)
 801525a:	4629      	mov	r1, r5
 801525c:	ee10 0a10 	vmov	r0, s0
 8015260:	2200      	movs	r2, #0
 8015262:	f7eb f9d9 	bl	8000618 <__aeabi_dmul>
 8015266:	4b37      	ldr	r3, [pc, #220]	; (8015344 <scalbn+0x104>)
 8015268:	429e      	cmp	r6, r3
 801526a:	4604      	mov	r4, r0
 801526c:	460d      	mov	r5, r1
 801526e:	da10      	bge.n	8015292 <scalbn+0x52>
 8015270:	a32b      	add	r3, pc, #172	; (adr r3, 8015320 <scalbn+0xe0>)
 8015272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015276:	e03a      	b.n	80152ee <scalbn+0xae>
 8015278:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801527c:	428a      	cmp	r2, r1
 801527e:	d10c      	bne.n	801529a <scalbn+0x5a>
 8015280:	ee10 2a10 	vmov	r2, s0
 8015284:	4620      	mov	r0, r4
 8015286:	4629      	mov	r1, r5
 8015288:	f7eb f810 	bl	80002ac <__adddf3>
 801528c:	4604      	mov	r4, r0
 801528e:	460d      	mov	r5, r1
 8015290:	e019      	b.n	80152c6 <scalbn+0x86>
 8015292:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015296:	460b      	mov	r3, r1
 8015298:	3a36      	subs	r2, #54	; 0x36
 801529a:	4432      	add	r2, r6
 801529c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80152a0:	428a      	cmp	r2, r1
 80152a2:	dd08      	ble.n	80152b6 <scalbn+0x76>
 80152a4:	2d00      	cmp	r5, #0
 80152a6:	a120      	add	r1, pc, #128	; (adr r1, 8015328 <scalbn+0xe8>)
 80152a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152ac:	da1c      	bge.n	80152e8 <scalbn+0xa8>
 80152ae:	a120      	add	r1, pc, #128	; (adr r1, 8015330 <scalbn+0xf0>)
 80152b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152b4:	e018      	b.n	80152e8 <scalbn+0xa8>
 80152b6:	2a00      	cmp	r2, #0
 80152b8:	dd08      	ble.n	80152cc <scalbn+0x8c>
 80152ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80152be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80152c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80152c6:	ec45 4b10 	vmov	d0, r4, r5
 80152ca:	bd70      	pop	{r4, r5, r6, pc}
 80152cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80152d0:	da19      	bge.n	8015306 <scalbn+0xc6>
 80152d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80152d6:	429e      	cmp	r6, r3
 80152d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80152dc:	dd0a      	ble.n	80152f4 <scalbn+0xb4>
 80152de:	a112      	add	r1, pc, #72	; (adr r1, 8015328 <scalbn+0xe8>)
 80152e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d1e2      	bne.n	80152ae <scalbn+0x6e>
 80152e8:	a30f      	add	r3, pc, #60	; (adr r3, 8015328 <scalbn+0xe8>)
 80152ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ee:	f7eb f993 	bl	8000618 <__aeabi_dmul>
 80152f2:	e7cb      	b.n	801528c <scalbn+0x4c>
 80152f4:	a10a      	add	r1, pc, #40	; (adr r1, 8015320 <scalbn+0xe0>)
 80152f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d0b8      	beq.n	8015270 <scalbn+0x30>
 80152fe:	a10e      	add	r1, pc, #56	; (adr r1, 8015338 <scalbn+0xf8>)
 8015300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015304:	e7b4      	b.n	8015270 <scalbn+0x30>
 8015306:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801530a:	3236      	adds	r2, #54	; 0x36
 801530c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015310:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015314:	4620      	mov	r0, r4
 8015316:	4b0c      	ldr	r3, [pc, #48]	; (8015348 <scalbn+0x108>)
 8015318:	2200      	movs	r2, #0
 801531a:	e7e8      	b.n	80152ee <scalbn+0xae>
 801531c:	f3af 8000 	nop.w
 8015320:	c2f8f359 	.word	0xc2f8f359
 8015324:	01a56e1f 	.word	0x01a56e1f
 8015328:	8800759c 	.word	0x8800759c
 801532c:	7e37e43c 	.word	0x7e37e43c
 8015330:	8800759c 	.word	0x8800759c
 8015334:	fe37e43c 	.word	0xfe37e43c
 8015338:	c2f8f359 	.word	0xc2f8f359
 801533c:	81a56e1f 	.word	0x81a56e1f
 8015340:	43500000 	.word	0x43500000
 8015344:	ffff3cb0 	.word	0xffff3cb0
 8015348:	3c900000 	.word	0x3c900000

0801534c <_getpid>:
 801534c:	4b02      	ldr	r3, [pc, #8]	; (8015358 <_getpid+0xc>)
 801534e:	2258      	movs	r2, #88	; 0x58
 8015350:	601a      	str	r2, [r3, #0]
 8015352:	f04f 30ff 	mov.w	r0, #4294967295
 8015356:	4770      	bx	lr
 8015358:	20005888 	.word	0x20005888

0801535c <_kill>:
 801535c:	4b02      	ldr	r3, [pc, #8]	; (8015368 <_kill+0xc>)
 801535e:	2258      	movs	r2, #88	; 0x58
 8015360:	601a      	str	r2, [r3, #0]
 8015362:	f04f 30ff 	mov.w	r0, #4294967295
 8015366:	4770      	bx	lr
 8015368:	20005888 	.word	0x20005888

0801536c <_exit>:
 801536c:	e7fe      	b.n	801536c <_exit>
	...

08015370 <_init>:
 8015370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015372:	bf00      	nop
 8015374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015376:	bc08      	pop	{r3}
 8015378:	469e      	mov	lr, r3
 801537a:	4770      	bx	lr

0801537c <_fini>:
 801537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801537e:	bf00      	nop
 8015380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015382:	bc08      	pop	{r3}
 8015384:	469e      	mov	lr, r3
 8015386:	4770      	bx	lr
